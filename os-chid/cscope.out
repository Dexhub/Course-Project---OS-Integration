cscope 15 $HOME/cse506-git               0000407288
	@bin/hello/hello.c

1 
	~<°dio.h
>

2 
	~<u°dlib.h
>

3 
	gb
=199;

4 
	$sum
(
a
, 
b
){

5 
	`__©åibuã__
((
__unu£d__
))
a1
[100];

6 
	`sum
(5,6);

7 
	}
}

9 
	$maö
(
¨gc
, * 
¨gv
[]) {

11 
a
;

12 
a
 = 
	`f‹k
();

13 if(
a
 == 0){

14 
no
;

17 
buf
[30];

18 
	`¥ötf
("WelcomeÅo Parent. Enter some data\n");

19 (
no
 = 
	`ªad
(
buf
)) == -1);

20 
	`¥ötf
("∑ª¡ gŸ d©®%s\n", 
buf
);

22 
	`¥ötf
("waiting for childsÅoÉxit\n");

23 
	`waô
();

24 
	`¥ötf
("parentÉxiting since its childrenáreÇo more\n");

33 
	`¥ötf
("WelcomeÅo child. Child is sleeping for 10 seconds beforeÉxec'ng world\n");

34 
	`¶ìp
(10);

35 
	`¥ötf
("10 seconds over. Child isÉxec'ng\n");

53 
	}
}

	@bin/ps/ps.c

1 
	~<°dio.h
>

2 
	~<u°dlib.h
>

5 
	$maö
(){

6 
	`¥ötf
("hi\n");

7 
	`ps
();

9 
	}
}

	@bin/shell/shell.c

1 
	~<sys/shñl.h
>

2 
	~<defs.h
>

3 
	~<°dio.h
>

4 
	~<u°dlib.h
>

6 vﬁ©ûê
	ga
[] = "abcsdef\n";

7 
	g¥om±
[] = "SBUINX> ";

9 
	$∑r£löe
(c⁄° *
cmdlöe
, 
cmdlöe_tokís
 *
tok
)

12 
¨øy
[100];

13 c⁄° 
dñims
[10] = " \t\r\n";

14 *
buf
 = 
¨øy
;

15 *
ídbuf
;

16 
√xt_°r_öd
=0;

18 i‡(
cmdlöe
 =
NULL
) {

19 
	`¥ötf
("Error: commandÜine is NULL\n");

23 (Ë
	`°∫˝y
(
buf
, 
cmdlöe
, 100);

24 
ídbuf
 = 
buf
 + 
	`°æí
(buf);

26 
tok
->
¨gc
 = 0;

29 
buf
 < 
ídbuf
) {

30 i‡(
buf
 >
ídbuf
) ;

31 
√xt_°r_öd
 = 
	`°r˝¢
(
buf
, 
dñims
);

32 
tok
->
¨gv
[tok->
¨gc
++] = 
buf
;

35 i‡(!
	`°rcmp
(
tok
->
¨gv
[0], "quit")) {

36 
tok
->
buûtös
 = 
BUILTIN_QUIT
;

37 } i‡(!
	`°rcmp
(
tok
->
¨gv
[0], "jobs")) {

38 
tok
->
buûtös
 = 
BUILTIN_JOBS
;

40 
tok
->
buûtös
 = 
BUILTIN_NONE
;

42 
buf
 = bu‡+ 1 + 
√xt_°r_öd
;

45 
	}
}

47 
	$ußge
(){

48 
	`¥ötf
("1. cls - Clear Screen\n");

49 
	`¥ötf
("2.Éxec filename - ExecuteáÖrocess\n");

50 
	`¥ötf
("3.Ös -ÖrintÅhe currentÑunningÖrocess\n");

51 
	}
}

53 
	$exec
(* 
«me
){

54 
ªt
;

55 
ªt
 = 
	`execve
(
«me
);

56  
ªt
;

57 
	}
}

60 
	$evÆ
(*
cmdlöe
)

62 
cmdlöe_tokís
 
tok
;

63 
i
,
j
,
ªt
=0;

64 
cmd
[100], 
tmp
[100];

66 
	`∑r£löe
(
cmdlöe
, &
tok
);

68 
i
=0; i< 
tok
.
¨gc
; i++){

69 
	`mem£t
(
cmd
, 0, (cmd));

70 
	`mem£t
(
tmp
, 0, (tmp));

72 
	`°∫˝y
(
tmp
, 
tok
.
¨gv
[
i
], 
	`°æí
(tok.argv[i]));

74 
j
=0; (
tmp
[j] !' ' &&Åmp[j] !'\r' && j < 
	`°æí
(tmp)); j++)

75 
cmd
[
j
] = 
tmp
[j];

76 if(
	`°rcmp
(
cmd
, "cls") == 0){

77 
	`˛s
();

80 if(
	`°rcmp
(
cmd
, "h") == 0)

81 
	`ußge
();

82 if(
	`°rcmp
(
cmd
, "exec") == 0){

83 
ªt
 = 
	`exec
(
tok
.
¨gv
[1]);

86 if(
	`°rcmp
(
cmd
, "ps") == 0)

87 
	`exec
("bin/ps");

89 
	`¥ötf
("Enterá valid command\n");

92 i‡(
tok
.
¨gv
[0] =
NULL
)  -1;

94  
ªt
;

95 
	}
}

100 
	$maö
(
¨gc
, * 
¨gv
[], * 
ívp
[])

102 
cmdlöe
[100];

103 
emô_¥om±
 = 1;

104 
pid
, 
ªt
;

107 
	`¥ötf
("Welcome USER. Type h for help\n");

110 
	`mem£t
(
cmdlöe
, '\0', (cmdline));

111 i‡(
emô_¥om±
) {

112 
	`¥ötf
("%s", 
¥om±
);

114 
	`ªad
(
cmdlöe
);

117 
cmdlöe
[
	`°æí
(cmdline)-1] = '\0';

120 
pid
 = 
	`f‹k
();

121 if(
pid
 > 0){

122 
ªt
 = 
	`evÆ
(
cmdlöe
);

123 if(
ªt
 == -1)

124 
	`¥ötf
("Bad FileÇame\n");

128 
	`waô
();

129 
	`¥ötf
("Pro˚s†%†exôedÇ‹mÆlyÖid = %d\n",
cmdlöe
,
	`gëpid
());

134 
	}
}

	@bin/world/world.c

1 
	~<°dio.h
>

2 
	~<u°dlib.h
>

4 
	$maö
(
¨gc
, *
¨gv
[]){

5 
	`¥ötf
("World world worldn\n");

7 
	}
}

	@crt/crt1.c

1 
	~<°dlib.h
>

4 
	$_°¨t
() {

5 
¨gc
 = 1;

6 * 
¨gv
[10];

7 * 
ívp
[10];

8 
ªs
;

9 
ªs
 = 
	`maö
(
¨gc
, 
¨gv
, 
ívp
);

10 
	`exô
(
ªs
);

11 
	}
}

13 
	$exô
(
ªs
){

14 
__asm__
 
	`__vﬁ©ûe__
("movq $0x14, %rax\n\tint $0x80");

15 
__asm__
 
	`__vﬁ©ûe__
("movq %rax, %rdi\n\tmovq $0x1, %rax\n\tint $0x80");

16 
	}
}

	@include/defs.h

1 #i‚de‡
_DEFS_H


2 
	#_DEFS_H


	)

4 
	#NULL
 0

	)

5 
	#TEXT_COLOR
 0x1F

	)

6 
	#MY_KERNEL_SIZE
 40

7 

	)

8 
	t__uöt64_t
;

9 
__uöt64_t
 
	tuöt64_t
;

10 
	t__uöt32_t
;

11 
__uöt32_t
 
	tuöt32_t
;

12 
	t__öt32_t
;

13 
__öt32_t
 
	töt32_t
;

14 
	t__uöt16_t
;

15 
__uöt16_t
 
	tuöt16_t
;

16 
	t__uch¨8_t
;

17 
__uch¨8_t
 
	tuöt8_t
;

21 
	mFALSE
,

22 
	mTRUE


23 } 
	tboﬁ
;

	@include/elf.h

1 #i‚de‡
_ELF_H_


2 
	#_ELF_H_


	)

3 
	~<defs.h
>

5 
uöt64_t
 
	tElf64_Addr
;

6 
uöt16_t
 
	tElf64_HÆf
;

7 
uöt16_t
 
	tElf64_SHÆf
;

8 
uöt64_t
 
	tElf64_Off
;

9 
uöt32_t
 
	tElf64_Sw‹d
;

10 
uöt32_t
 
	tElf64_W‹d
;

11 
uöt64_t
 
	tElf64_Xw‹d
;

12 
uöt64_t
 
	tElf64_Sxw‹d
;

16 
	me_idít
[16];

17 
Elf64_HÆf
 
	me_ty≥
;

18 
Elf64_HÆf
 
	me_machöe
;

19 
Elf64_W‹d
 
	me_vîsi⁄
;

20 
Elf64_Addr
 
	me_íåy
;

21 
Elf64_Off
 
	me_phoff
;

22 
Elf64_Off
 
	me_shoff
;

23 
Elf64_W‹d
 
	me_Êags
;

24 
Elf64_HÆf
 
	me_ehsize
;

25 
Elf64_HÆf
 
	me_phítsize
;

26 
Elf64_HÆf
 
	me_phnum
;

27 
Elf64_HÆf
 
	me_shítsize
;

28 
Elf64_HÆf
 
	me_shnum
;

29 
Elf64_HÆf
 
	me_sh°∫dx
;

30 } 
	tElf64_Ehdr
;

34 
Elf64_W‹d
 
	msh_«me
;

35 
Elf64_W‹d
 
	msh_ty≥
;

36 
Elf64_Xw‹d
 
	msh_Êags
;

37 
Elf64_Addr
 
	msh_addr
;

38 
Elf64_Off
 
	msh_off£t
;

39 
Elf64_Xw‹d
 
	msh_size
;

40 
Elf64_W‹d
 
	msh_lök
;

41 
Elf64_W‹d
 
	msh_öfo
;

42 
Elf64_Xw‹d
 
	msh_addølign
;

43 
Elf64_Xw‹d
 
	msh_ítsize
;

44 } 
	tElf64_Shdr
;

48 
Elf64_W‹d
 
	mp_ty≥
;

49 
Elf64_W‹d
 
	mp_Êags
;

50 
Elf64_Off
 
	mp_off£t
;

51 
Elf64_Addr
 
	mp_vaddr
;

52 
Elf64_Addr
 
	mp_∑ddr
;

53 
Elf64_Xw‹d
 
	mp_fûesz
;

54 
Elf64_Xw‹d
 
	mp_memsz
;

55 
Elf64_Xw‹d
 
	mp_Æign
;

56 } 
	tElf64_Phdr
;

58 
	sexec
{

59 
uöt32_t
 
	m£g_Àngth
;

60 
uöt64_t
 
	m£g_∑ge_°¨t
;

61 
uöt64_t
 
	m£g_a˘uÆ_°¨t
;

62 * 
	m£g_mem
;

64 
uöt16_t
 
ªadñf
(*, 
exec
*, uöt16_t*, 
uöt64_t
*);

	@include/errors.h

1 #i‚de‡
_ERRORS_H


2 
	#_ERROR_H


	)

4 
	e_mem‹y_îr‹
{

5 
	mE_MEM_SUCCESS
 = 0,

6 
	mE_MEM_NOMEM
 = -1,

8 
_mem‹y_îr‹
 
	tmem_îr‹_t
;

10 
	e_èsk_îr‹
{

11 
	mE_PID_SUCCESS
 = 0,

12 
	mE_PID_NOPID
 = -1,

14 
_èsk_îr‹
 
	tèsk_îr‹_t
;

	@include/io.h

1 #i‚de‡
_IO_H


2 
	#_IO_H


	)

4 
__ölöe
 

5 
	$outb
 (
p‹t
, 
vÆue
)

7 
__asm__
 
	`__vﬁ©ûe__
("outb %0, %1": :"a" (
vÆue
), "Nd" (
p‹t
));

8 
	}
}

10 
__ölöe


11 
	$öb
–
p‹t
 )

13 
ªt
;

14 
__asm__
 
	`__vﬁ©ûe__
–"öb %1, %0": "˜"(
ªt
Ë: "Nd"(
p‹t
) );

15  
ªt
;

16 
	}
}

	@include/stdarg.h

1 
	#va_°¨t
(
v
,
l
Ë
	`__buûtö_va_°¨t
(v,l)

	)

2 
	#va_¨g
(
v
,
l
Ë
	`__buûtö_va_¨g
(v,l)

	)

3 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

4 
	#va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

5 
__buûtö_va_li°
 
	tva_li°
;

	@include/stdio.h

1 #i‚de‡
_STDIO_H


2 
	#_STDIO_H


	)

4 
	#START_MEMORY
 0xFFFFFFFF80100000

5 
	#TIMER_MEMORY
 0xFFFFFFFF80100F90

6 
	#KEYBOARD_WARMUP_MEMORY
 0xB8F8A

7 
	#MAX_ROWS
 25

	)

8 
	#MAX_COLUMNS
 80

	)

10 
	~<defs.h
>

13 
¥ötf
(c⁄° *
f‹m©
, ...);

14 
sˇnf
(c⁄° *
f‹m©
, ...);

15 
wrôe_ch¨
(, );

16 
wrôe_°rög
(, const *);

17 
wrôe_time
(
uöt16_t
, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t);

18 
wrôe_key
(, );

19 
PANIC
(c⁄° *, 
uöt16_t
, const *);

20 
SYS_TRACE
(c⁄° *, 
uöt16_t
, const *);

21 
¥ötf
(c⁄° *
f‹m©
, ...);

22 
sˇnf
(c⁄° *
f‹m©
, ...);

23 
wrôe_io_buff
();

	@include/stdlib.h

1 #i‚de‡
_STDLIB_H


2 
	#_STDLIB_H


	)

4 
	~<defs.h
>

7 
exô
(
°©us
);

8 
°æí
(const *);

9 * 
c⁄vît
(
uöt64_t
, );

10 * 
mem£t
(*, , 
uöt32_t
);

11 
˛s
();

12 
upd©e_curs‹
();

13 * 
mem˝y
(*, c⁄° *, 
uöt32_t
);

14 
°∫˝y
(*, c⁄° *, 
uöt32_t
);

15 
°rcmp
(*, *);

16 
uöt32_t
 
my_©oi
(*);

17 
uöt32_t
 
my_©oﬁ
(*);

18 
maö
(
¨gc
, * 
¨gv
[], * 
ívp
[]);

19 
exô
(
°©us
);

20 
°r˝¢
(const *, const *);

	@include/sys/exec.h

1 
	#U£rCode
 0x0000000000400000L

	)

2 
	#U£rD©a
 0x0000000000600000L

	)

	@include/sys/gdt.h

1 #i‚de‡
_GDT_H


2 
	#_GDT_H


	)

4 
	~<defs.h
>

6 
	stss_t
 {

7 
uöt32_t
 
	mª£rved
;

8 
uöt64_t
 
	mr•0
;

9 
uöt32_t
 
	munu£d
[11];

10 }
__©åibuã__
((
∑cked
));

11 
tss_t
 
tss
;

15 
	#GDT_CS
 (0x00180000000000Ë

	)

16 
	#GDT_DS
 (0x00100000000000Ë

	)

18 
	#C
 (0x00040000000000Ë

	)

19 
	#DPL0
 (0x00000000000000Ë

	)

20 
	#DPL1
 (0x00200000000000Ë

	)

21 
	#DPL2
 (0x00400000000000Ë

	)

22 
	#DPL3
 (0x00600000000000Ë

	)

23 
	#P
 (0x00800000000000Ë

	)

24 
	#L
 (0x20000000000000Ë

	)

25 
	#D
 (0x40000000000000Ë

	)

26 
	#W
 (0x00020000000000Ë

	)

28 
uöt64_t
 
gdt
[];

30 
ªlﬂd_gdt
();

31 
£tup_tss
();

	@include/sys/idt.h

1 #i‚de‡
_IDT_H


2 
	#_IDT_H


	)

4 
	~<defs.h
>

12 
	sidtE¡ry
 {

13 
uöt16_t
 
	mba£Low
;

14 
uöt16_t
 
	m£À˘‹
;

15 
	mª£rvedI°
;

16 
	mÊags
;

17 
uöt16_t
 
	mba£Mid
;

18 
uöt32_t
 
	mba£High
;

19 
uöt32_t
 
	mª£rved
;

20 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tidtE
;

23 
	sªgi°îs
{

25 
uöt64_t
 
	mr15
, 
	mr14
, 
	mr13
, 
	mr12
, 
	mr11
, 
	mr10
, 
	mr9
, 
	mr8
, 
	mrsi
, 
	mrdi
, 
	mrbp
, 
	mrdx
, 
	mrcx
, 
	mrbx
, 
	møx
;

26 
uöt64_t
 
	mötNo
, 
	mîrCode
;

27 
uöt64_t
 
	mrù
, 
	mcs
, 
	mrÊags
, 
	mr•
, 
	mss
;

28 } 
	tªgs
;

30 
	sidå_t
 {

31 
uöt16_t
 
	msize
;

32 
uöt64_t
 
	maddr
;

33 }
__©åibuã__
((
∑cked
));

35 
ªlﬂd_idt
();

	@include/sys/irq.h

1 #i‚de‡
_IRQ_H


2 
	#_IRQ_H


	)

4 
	~<defs.h
>

6 
úq_ö°Æl
();

	@include/sys/isr.h

1 #i‚de‡
_ISR_H_


2 
	#_ISR_H


	)

4 
	~<defs.h
>

5 
	~<sys/kthªad.h
>

6 
	~<sys/idt.h
>

8 
∑ge_Áu…_h™dÀr
(
uöt64_t
, *);

9 
gíîÆ_¥Ÿe˘i⁄_Áu…_h™dÀr
(
uöt64_t
);

10 
wrôe
(const *);

11 
sys_gëpid
();

12 
sys_exô
();

13 
f‹k
(
ªgs
*);

14 
¶ìp
(
uöt64_t
 
time
);

15 
d‹ód
(*);

16 
waô
();

17 
do_execve
();

18 
¥öt_¥o˚ss
();

19 
do_˛s
();

	@include/sys/kb.h

1 
	~<io.h
>

2 
	~<defs.h
>

4 
keybﬂrd_ö°Æl
();

5 
wrôe_key
(, );

28 
	eKYBRD_ENCODER_IO
 {

29 
	mKYBRD_ENC_INPUT_BUF
 = 0x60,

30 
	mKYBRD_ENC_CMD_REG
 = 0x60

33 
	eKYBRD_CTRL_IO
 {

34 
	mKYBRD_CTRL_STATS_REG
 = 0x64,

35 
	mKYBRD_CTRL_CMD_REG
 = 0x64

38 
	eKYBRD_CTRL_STATS_MASK
 {

39 
	mKYBRD_CTRL_STATS_MASK_OUT_BUF
 = 1,

40 
	mKYBRD_CTRL_STATS_MASK_IN_BUF
 = 2,

48 
	mKEY_SPACE
 = ' ',

49 
	mKEY_0
 = '0',

50 
	mKEY_1
 = '1',

51 
	mKEY_2
 = '2',

52 
	mKEY_3
 = '3',

53 
	mKEY_4
 = '4',

54 
	mKEY_5
 = '5',

55 
	mKEY_6
 = '6',

56 
	mKEY_7
 = '7',

57 
	mKEY_8
 = '8',

58 
	mKEY_9
 = '9',

60 
	mKEY_A
 = 'a',

61 
	mKEY_B
 = 'b',

62 
	mKEY_C
 = 'c',

63 
	mKEY_D
 = 'd',

64 
	mKEY_E
 = 'e',

65 
	mKEY_F
 = 'f',

66 
	mKEY_G
 = 'g',

67 
	mKEY_H
 = 'h',

68 
	mKEY_I
 = 'i',

69 
	mKEY_J
 = 'j',

70 
	mKEY_K
 = 'k',

71 
	mKEY_L
 = 'l',

72 
	mKEY_M
 = 'm',

73 
	mKEY_N
 = 'n',

74 
	mKEY_O
 = 'o',

75 
	mKEY_P
 = 'p',

76 
	mKEY_Q
 = 'q',

77 
	mKEY_R
 = 'r',

78 
	mKEY_S
 = 's',

79 
	mKEY_T
 = 't',

80 
	mKEY_U
 = 'u',

81 
	mKEY_V
 = 'v',

82 
	mKEY_W
 = 'w',

83 
	mKEY_X
 = 'x',

84 
	mKEY_Y
 = 'y',

85 
	mKEY_Z
 = 'z',

87 
	mKEY_RETURN
 = '\r',

88 
	mKEY_ESCAPE
 = 0x1001,

89 
	mKEY_BACKSPACE
 = '\b',

93 
	mKEY_UP
 = 0x1100,

94 
	mKEY_DOWN
 = 0x1101,

95 
	mKEY_LEFT
 = 0x1102,

96 
	mKEY_RIGHT
 = 0x1103,

100 
	mKEY_F1
 = 0x1201,

101 
	mKEY_F2
 = 0x1202,

102 
	mKEY_F3
 = 0x1203,

103 
	mKEY_F4
 = 0x1204,

104 
	mKEY_F5
 = 0x1205,

105 
	mKEY_F6
 = 0x1206,

106 
	mKEY_F7
 = 0x1207,

107 
	mKEY_F8
 = 0x1208,

108 
	mKEY_F9
 = 0x1209,

109 
	mKEY_F10
 = 0x120a,

110 
	mKEY_F11
 = 0x120b,

111 
	mKEY_F12
 = 0x120b,

112 
	mKEY_F13
 = 0x120c,

113 
	mKEY_F14
 = 0x120d,

114 
	mKEY_F15
 = 0x120e,

116 
	mKEY_DOT
 = '.',

117 
	mKEY_COMMA
 = ',',

118 
	mKEY_COLON
 = ':',

119 
	mKEY_SEMICOLON
 = ';',

120 
	mKEY_SLASH
 = '/',

121 
	mKEY_BACKSLASH
 = '\\',

122 
	mKEY_PLUS
 = '+',

123 
	mKEY_MINUS
 = '-',

124 
	mKEY_ASTERISK
 = '*',

125 
	mKEY_EXCLAMATION
 = '!',

126 
	mKEY_QUESTION
 = '?',

127 
	mKEY_QUOTEDOUBLE
 = '\"',

128 
	mKEY_QUOTE
 = '\'',

129 
	mKEY_EQUAL
 = '=',

130 
	mKEY_HASH
 = '#',

131 
	mKEY_PERCENT
 = '%',

132 
	mKEY_AMPERSAND
 = '&',

133 
	mKEY_UNDERSCORE
 = '_',

134 
	mKEY_LEFTPARENTHESIS
 = '(',

135 
	mKEY_RIGHTPARENTHESIS
 = ')',

136 
	mKEY_LEFTBRACKET
 = '[',

137 
	mKEY_RIGHTBRACKET
 = ']',

138 
	mKEY_LEFTCURL
 = '{',

139 
	mKEY_RIGHTCURL
 = '}',

140 
	mKEY_DOLLAR
 = '$',

141 
	mKEY_POUND
 = '£',

142 
	mKEY_EURO
 = '$',

143 
	mKEY_LESS
 = '<',

144 
	mKEY_GREATER
 = '>',

145 
	mKEY_BAR
 = '|',

146 
	mKEY_GRAVE
 = '`',

147 
	mKEY_TILDE
 = '~',

148 
	mKEY_AT
 = '@',

149 
	mKEY_CARRET
 = '^',

153 
	mKEY_KP_0
 = '0',

154 
	mKEY_KP_1
 = '1',

155 
	mKEY_KP_2
 = '2',

156 
	mKEY_KP_3
 = '3',

157 
	mKEY_KP_4
 = '4',

158 
	mKEY_KP_5
 = '5',

159 
	mKEY_KP_6
 = '6',

160 
	mKEY_KP_7
 = '7',

161 
	mKEY_KP_8
 = '8',

162 
	mKEY_KP_9
 = '9',

163 
	mKEY_KP_PLUS
 = '+',

164 
	mKEY_KP_MINUS
 = '-',

165 
	mKEY_KP_DECIMAL
 = '.',

166 
	mKEY_KP_DIVIDE
 = '/',

167 
	mKEY_KP_ASTERISK
 = '*',

168 
	mKEY_KP_NUMLOCK
 = 0x300f,

169 
	mKEY_KP_ENTER
 = 0x3010,

171 
	mKEY_TAB
 = 0x4000,

172 
	mKEY_CAPSLOCK
 = 0x4001,

176 
	mKEY_LSHIFT
 = 0x4002,

177 
	mKEY_LCTRL
 = 0x4003,

178 
	mKEY_LALT
 = 0x4004,

179 
	mKEY_LWIN
 = 0x4005,

180 
	mKEY_RSHIFT
 = 0x4006,

181 
	mKEY_RCTRL
 = 0x4007,

182 
	mKEY_RALT
 = 0x4008,

183 
	mKEY_RWIN
 = 0x4009,

185 
	mKEY_INSERT
 = 0x400a,

186 
	mKEY_DELETE
 = 0x400b,

187 
	mKEY_HOME
 = 0x400c,

188 
	mKEY_END
 = 0x400d,

189 
	mKEY_PAGEUP
 = 0x400e,

190 
	mKEY_PAGEDOWN
 = 0x400f,

191 
	mKEY_SCROLLLOCK
 = 0x4010,

192 
	mKEY_PAUSE
 = 0x4011,

194 
	mKEY_UNKNOWN
,

195 
	mKEY_NUMKEYCODES


196 } 
	tKEYCODE
;

	@include/sys/kthread.h

1 #i‚de‡
_KTHREAD_H_


2 
	#_KTHREAD_H_


	)

4 
	~<sys/èsk.h
>

9 
	#PRIORITY_IDLE
 0

	)

10 
	#PRIORITY_USER
 1

	)

11 
	#PRIORITY_LOW
 2

	)

12 
	#PRIORITY_NORMAL
 5

	)

13 
	#PRIORITY_HIGH
 10

	)

18 (*
	tthªad_func
)(
	tuöt16_t
 
	t¨g
);

19 
Kî√l_Thªad
 
	tkthªad
;

21 
	sAŒ_thªads
{

22 
kthªad
 *
hód
, *
èû
;

24 
AŒ_thªads
 
	tglobÆ_thªad_li°
;

26 
	sThªad_queue
{

27 
kthªad
 *
hód
, *
èû
;

29 
Thªad_queue
 
	tThr_Queue
;

33 
	sjoö_Queue
{

34 
kthªad
* 
chûd
;

35 
joö_Queue
* 
√xt
;

37 
joö_Queue
 
	tjoöQ
;

44 
	sKî√l_Thªad
 {

45 
uöt64_t
 
r•
;

46 
uöt64_t
 
kî√l_thªad
;

47 
uöt64_t
 
kr•
;

48 
uöt64_t
 
p¸3
;

49 
uöt64_t
 
¸3
;

50 * 
k°ack
;

51 sig√d 
¶ìpög
;

52 
¥i‹ôy
;

53 
Kî√l_Thªad
 *
¥ev_ö_ThªadQ
, *
√xt_ö_ThªadQ
;

54 * 
°ackPage
;

55 
no_°ack_∑ges
;

57 
Kî√l_Thªad
* 
ow√r
;

58 
Kî√l_Thªad
* 
∑ª¡
;

59 
Thªad_queue
 
joöQueue
;

60 
ªfCou¡
;

61 
joöQ
 
hód
;

63 
boﬁ
 
Æive
;

64 c⁄° * 
«me
;

66 
exôCode
;

69 
pid
;

70 
vm_¨ó_°ru˘
 *
mm≠
;

71 
vm_¨ó_°ru˘
 *
mm≠_ˇche
;

73 
Kî√l_Thªad
 *
¥ev_ö_ThªadLi°
, *
√xt_ö_ThªadLi°
;

75 
	#MAX_TLOCAL_KEYS
 128

	)

76 c⁄° * 
éoˇlD©a
[
MAX_TLOCAL_KEYS
];

79 
Kî√l_Thªad
 
	tkthªad
;

85 
	`Inô_ScheduÀr
();

87 
	`£tup_kthªad
(
kthªad
*, 
thªad_func
, 
uöt16_t
);

88 
	`Enqueue_Thªad
(
Thr_Queue
*, 
kthªad
*);

89 
	`Dequeue_Thªad
(
Thr_Queue
*, 
kthªad
*);

90 
kthªad
* 
	`°¨t_kthªad
(
thªad_func
, c⁄° *, 
uöt16_t
, uöt16_t, 
boﬁ
);

92 
	`ru¬abÀ_kthªad
(
kthªad
*);

93 
kthªad
* 
	`Gë_Cuºít
();

94 
kthªad
* 
	`Gë_Next_Ru¬abÀ
();

95 
	`ScheduÀ
();

96 
	`scheduÀr_öô
();

97 
	`Yõld
();

98 
	`Exô_thªad
(
uöt16_t
 
exôCode
);

99 
	`Joö
(
Kî√l_Thªad
* 
kthªad
);

100 
kthªad
* 
	`Lookup_Thªad
(
pid
);

101 
	`dißbÀ_öãºu±s
();

102 
	`íabÀ_öãºu±s
();

103 
	`≠≥nd_run_queue
(
Thr_Queue
*, 
kthªad
*);

104 
	`≠≥nd_globÆ_li°_queue
(
globÆ_thªad_li°
*, 
kthªad
*);

105 
	`Push_GíîÆ_Regi°îs
(
kthªad
*);

106 
	`Push
(
kthªad
*, 
uöt64_t
);

107 
	`öô_thªad_queue
(
Thr_Queue
*);

108 
	`Æloc_pid
();

109 
	`‰ì_pid
();

110 
	`add_to_±abÀ
(
kthªad
*);

111 
	`thªad_˛ónup
(
kthªad
*);

112 
	`ÆŒi°_kthªad
(
kthªad
*);

113 
	`add_to_joöQueue
(
kthªad
*, kthread*);

114 
	`ªmove_ru¬abÀ_kthªad
(
Thr_Queue
*, 
kthªad
*);

115 * 
	`èrfs_ªad
(*);

116 
	`maö_execve
(*);

	@include/sys/list.h

1 #i‚de‡
_LIST_H


2 
	#_LIST_H


	)

3 
	~<sys/èsk.h
>

10 
	#LIST_POISON1
 ((*Ë0x00100100)

	)

11 
	#LIST_POISON2
 ((*Ë0x00200200)

	)

14 
	sli°_hód
 {

15 
li°_hód
 *
	m√xt
, *
	m¥ev
;

18 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

20 
	#LIST_HEAD
(
«me
) \

21 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

23 
	#INIT_LIST_HEAD
(
±r
) do { \

24 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

25 } 0)

	)

31 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

33  
hód
->
√xt
 == head;

34 
	}
}

43 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

44 
li°_hód
 *
¥ev
,

45 
li°_hód
 *
√xt
)

47 
√xt
->
¥ev
 = 
√w
;

48 
√w
->
√xt
 =Çext;

49 
√w
->
¥ev
 =Örev;

50 
¥ev
->
√xt
 = 
√w
;

51 
	}
}

61 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

63 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

64 
	}
}

74 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

76 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

77 
	}
}

87 
ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

89 
√xt
->
¥ev
 =Örev;

90 
¥ev
->
√xt
 =Çext;

91 
	}
}

99 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

101 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

102 
íåy
->
√xt
 = 
LIST_POISON1
;

103 
íåy
->
¥ev
 = 
LIST_POISON2
;

104 
	}
}

110 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

112 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

113 
	`INIT_LIST_HEAD
(
íåy
);

114 
	}
}

121 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

123 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

124 
	`li°_add
(
li°
, 
hód
);

125 
	}
}

132 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

133 
li°_hód
 *
hód
)

135 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

136 
	`li°_add_èû
(
li°
, 
hód
);

137 
	}
}

151 
ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

153 
li°_hód
 *
√xt
 = 
hód
->next;

154  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

155 
	}
}

157 
ölöe
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

158 
li°_hód
 *
hód
)

160 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

161 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

162 
li°_hód
 *
©
 = 
hód
->
√xt
;

164 
fú°
->
¥ev
 = 
hód
;

165 
hód
->
√xt
 = 
fú°
;

167 
œ°
->
√xt
 = 
©
;

168 
©
->
¥ev
 = 
œ°
;

169 
	}
}

177 
ölöe
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

179 i‡(!
	`li°_em±y
(
li°
))

180 
	`__li°_•li˚
(
li°
, 
hód
);

181 
	}
}

190 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

191 
li°_hód
 *
hód
)

193 i‡(!
	`li°_em±y
(
li°
)) {

194 
	`__li°_•li˚
(
li°
, 
hód
);

195 
	`INIT_LIST_HEAD
(
li°
);

197 
	}
}

210 
	#__li°_f‹_óch
(
pos
, 
hód
) \

211 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

	@include/sys/mm/mmgr.h

1 #i‚de‡
_MMGR_H


2 
	#_MMGR_H


	)

4 
	#BLOCKS_PER_BYTE
 8

	)

5 
	#KILO_BYTE
 1024

	)

6 
	#MEGA_BYTE
 (1024*1024)

	)

7 
	#BLOCK_SIZE
 (4*
KILO_BYTE
)

	)

8 
	#BLOCK_ALIGN
 
BLOCK_SIZE


	)

9 
	#PHY_PAGE_SIZE
 
BLOCK_SIZE


	)

11 
	ssm≠_t
 {

12 
uöt64_t
 
	mba£
, 
	mÀngth
;

13 
uöt32_t
 
	mty≥
;

14 }
__©åibuã__
((
∑cked
));

16 
mm_phy_öô
(
uöt32_t
 *);

18 
mmgr_‰ì_size_blocks
(*, );

20 
mmgr_‰ì_block
(*);

22 * 
mmgr_Æloc_size_blocks
();

24 * 
mmgr_Æloc_block
();

26 
mmgr_¥öt_mem‹y_°©us
();

	@include/sys/mm/regions.h

1 #i‚de‡
_REGIONS_H


2 
	#_REGIONS_H


	)

4 
	emm_phy_ty≥s
 {

5 
	mMM_PHY_UNKNOWN
=0,

6 
	mMM_PHY_USABLE
,

7 
	mMM_PHY_RESERVED
,

8 
	mMM_PHY_ACPI_RECLAIMABLE
,

9 
	mMM_PHY_ACPI_NVS
,

10 
	mMM_PHY_BAD
,

11 
	mMM_PHY_MAX


	@include/sys/mm/vm_mmgr.h

1 
uöt64_t
 
	tvútuÆ_addr
;

3 
	#PAGES_PER_TABLE
 512

	)

4 
	#PAGES_PED_DIR
 512

	)

9 
	s∑ge_èbÀ
{

10 
±_íåy
 
	mm_ítúes
[
PAGES_PER_TABLE
];

12 
∑ge_èbÀ
 
	t±e
;

17 
	s∑ge_dúe˘‹y_èbÀ
{

18 
pd_íåy
 
	mm_íåõs
[
PAGES_PED_DIR
];

20 
∑ge_dúe˘‹y_èbÀ
 
	tpde
;

25 
	s∑ge_dúe˘‹y_poöãr_èbÀ
{

26 
pd≥_íåy
 
	mm_íåõs
[
PAGES_PED_DIR
];

28 
∑ge_dúe˘‹y_poöãr_èbÀ
 
	tpd≥
;

33 
	s∑ge_m≠_Àvñ_4
{

34 
pml4e_íåy
 
	mm_íåõs
[
PAGES_PER_DIR
];

36 
∑ge_m≠_Àvñ_4
 
	tpml4
;

39 
vmmgr_m≠_∑ge
(*, 
viod
 *);

42 
vmmgr_öô
();

45 
boﬁ
 
vmmgr_Æloc_∑ge
();

48 
vmmgr_‰ì_∑ge
();

56 
pde
* 
vmmngr_gë_∑ge_dúe˘‹y
();

59 
pd≥
* 
vmmngr_gë_∑ge_poöãr_dúe˘‹y
();

62 
pml4
* 
vmmngr_gë_pml4_dúe˘‹y
();

70 
boﬁ
 
vmmgr_swôch_∑ge_dúe˘‹y
(
pde
 *);

73 
boﬁ
 
vmmgr_swôch_∑ge_poöãr_dúe˘‹y
(
pd≥
 *);

76 
boﬁ
 
vmmgr_swôch_pml4_dúe˘‹y
(
pml4
 *);

85 
uöt32_t
 
vmmgr_±abÀ_vút_to_ödex
(
vútuÆ_addr
);

88 
uöt32_t
 
vmmgr_pdèbÀ_vút_to_ödex
(
vútuÆ_addr
);

91 
uöt32_t
 
vmmgr_pdpoöãπabÀ_vút_to_ödex
(
vútuÆ_addr
);

94 
uöt32_t
 
vmmgr_pml4_vút_to_ödex
(
vútuÆ_addr
);

101 
vmmgr_±abÀ_˛ór
(
±e
 *);

104 
vmmgr_∑ge_dúe˘‹y_˛ór
(
pde
 *);

107 
vmmgr_∑ge_poöãr_dúe˘‹y_˛ór
(
pd≥
 *);

110 
vmmgr_pml4_dúe˘‹y_˛ór
(
pml4
 *);

118 
±_íåy
* 
vmmgr_±abÀ_lookup_íåy
(
±e
*, 
vútuÆ_addr
);

121 
pd_íåy
* 
vmmgr_∑ge_dúe˘‹y_lookup_íåy
(
±e
*, 
vútuÆ_addr
);

124 
pd≥_íåy
* 
vmmgr_∑ge_poöãr_dúe˘‹y_lookup_íåy
(
pd≥
*, 
vútuÆ_addr
);

127 
pml4e_íåy
* 
vmmgr_pml4_dúe˘‹y_lookup_íåy
(
pml4
*, 
vútuÆ_addr
);

	@include/sys/mm/vmmgr_pde.h

1 
	~<defs.h
>

3 
uöt64_t
 
	tpd_íåy
;

5 
	ePAGE_PDE_FLAGS
{

7 
	mPDE_PRESENT
 = 1,

8 
	mPDE_WRITABLE
 = 2,

9 
	mPDE_USER
 = 4,

11 
	mPDE_WRITETHROUGH
 = 8,

14 
	mPDE_NOT_CACHABLE
 = 0x10,

16 
	mPDE_ACCESSED
 = 0x20,

18 
	mPDE_4MB
 = 0x80,

19 
	mPDE_AVL
 = 0x700,

20 
	mPDE_FRAME
 = 0x00000FFFFFFFF000

25 
pd_íåy_add_©åib
 (
pd_íåy
* 
e
, 
uöt64_t
 
©åib
);

28 
pd_íåy_dñ_©åib
 (
pd_íåy
* 
e
, 
uöt64_t
 
©åib
);

31 
pd_íåy_£t_‰ame
 (
pd_íåy
*, 
uöt64_t
);

34 
boﬁ
 
pd_íåy_is_¥e£¡
 (
pd_íåy
);

37 
boﬁ
 
pd_íåy_is_u£r
 (
pd_íåy
);

40 
boﬁ
 
pd_íåy_is_4mb
 (
pd_íåy
);

43 
boﬁ
 
pd_íåy_is_wrôabÀ
 (
pd_íåy
 
e
);

46 
uöt32_t
 
pd_íåy_p‚
 (
pd_íåy
 
e
);

	@include/sys/mm/vmmgr_pdpe.h

1 
	~<defs.h
>

3 
uöt64_t
 
	tpd≥_íåy
;

5 
	ePAGE_PDPE_FLAGS
{

7 
	mPDPE_PRESENT
 = 1,

8 
	mPDPE_WRITABLE
 = 2,

9 
	mPDPE_USER
 = 4,

11 
	mPDPE_WRITETHROUGH
 = 8,

14 
	mPDPE_NOT_CACHABLE
 = 0x10,

16 
	mPDPE_ACCESSED
 = 0x20,

18 
	mPDPE_4MB
 = 0x80,

19 
	mPDPE_AVL
 = 0x700,

20 
	mPDPE_FRAME
 = 0x00000FFFFFFFF000

25 
pd≥_íåy_add_©åib
 (
pd≥_íåy
* , 
uöt64_t
);

28 
pd≥_íåy_dñ_©åib
 (
pd≥_íåy
* , 
uöt64_t
);

31 
pd≥_íåy_£t_‰ame
 (
pd≥_íåy
*, 
uöt64_t
);

34 
boﬁ
 
pd≥_íåy_is_¥e£¡
 (
pd≥_íåy
);

37 
boﬁ
 
pd≥_íåy_is_u£r
 (
pd≥_íåy
);

40 
boﬁ
 
pd≥_íåy_is_4mb
 (
pd≥_íåy
);

43 
boﬁ
 
pd≥_íåy_is_wrôabÀ
 (
pd≥_íåy
);

	@include/sys/mm/vmmgr_pml4.h

1 
	~<defs.h
>

3 
uöt64_t
 
	tpml4e_íåy
;

5 
	ePAGE_PML4E_FLAGS
{

7 
	mPML4E_PRESENT
 = 1,

8 
	mPML4E_WRITABLE
 = 2,

9 
	mPML4E_USER
 = 4,

11 
	mPML4E_WRITETHROUGH
 = 8,

14 
	mPML4E_NOT_CACHABLE
 = 0x10,

16 
	mPML4E_ACCESSED
 = 0x20,

18 
	mPML4E_4MB
 = 0x80,

19 
	mPML4E_AVL
 = 0x700,

20 
	mPML4E_FRAME
 = 0x00000FFFFFFFF000

25 
pml4e_íåy_add_©åib
 (
pml4e_íåy
* , 
uöt64_t
);

28 
pml4e_íåy_dñ_©åib
 (
pml4e_íåy
* , 
uöt64_t
);

31 
pml4e_íåy_£t_‰ame
 (
pml4e_íåy
*, 
uöt64_t
);

34 
boﬁ
 
pml4e_íåy_is_¥e£¡
 (
pml4e_íåy
);

37 
boﬁ
 
pml4e_íåy_is_u£r
 (
pml4e_íåy
);

40 
boﬁ
 
pml4e_íåy_is_4mb
 (
pml4e_íåy
);

43 
boﬁ
 
pml4e_íåy_is_wrôabÀ
 (
pml4e_íåy
);

	@include/sys/mm/vmmgr_pte.h

3 
	~<defs.h
>

5 
uöt64_t
 
	t±_íåy
;

7 
	ePAGE_PTE_FLAGS
{

9 
	mPTE_PRESENT
 = 1,

10 
	mPTE_WRITABLE
 = 2,

11 
	mPTE_USER
 = 4,

13 
	mPTE_WRITETHROUGH
 = 8,

16 
	mPTE_NOT_CACHABLE
 = 0x10,

18 
	mPTE_ACCESSED
 = 0x20,

20 
	mPTE_DIRTY
 = 0x40,

22 
	mPTE_PAT
 = 0x80,

23 
	mPTE_GLOBAL
 = 0x100,

25 
	mPTE_AVL
 = 0x700,

26 
	mPTE_COW
 = 0x4000000000000000,

27 
	mPTE_FRAME
 = 0x00000FFFFFFFF000

31 
±_íåy_add_©åib
(
±_íåy
* 
e
, 
uöt64_t
 
©åib
);

34 
±_íåy_dñ_©åib
(
±_íåy
* 
e
, 
uöt64_t
 
©åib
);

37 
±_íåy_£t_‰ame
(
±_íåy
*, 
uöt64_t
);

40 
boﬁ
 
±_íåy_is_¥e£¡
(
±_íåy
 
e
);

43 
boﬁ
 
±_íåy_is_wrôabÀ
(
±_íåy
 
e
);

46 
uöt32_t
 
±_íåy_p‚
(
±_íåy
 
e
);

48 
boﬁ
 
±_íåy_is_ac˚s£d
(
±_íåy
 
e
);

	@include/sys/mm/vmmgr_virtual.h

1 #i‚de‡
_VMMGR_VIRTUAL_H


2 
	#_VMMGR_VIRTUAL_H


	)

4 
	~<sys/mm/vmmgr_±e.h
>

5 
	~<sys/mm/vmmgr_pde.h
>

6 
	~<sys/mm/vmmgr_pd≥.h
>

7 
	~<sys/mm/vmmgr_pml4.h
>

9 
uöt64_t
 
	tvútuÆ_addr
;

11 
	#PAGES_PER_TABLE
 512

	)

12 
	#PAGES_PER_DIR
 512

	)

13 
	#VIRT_PAGE_SIZE
 4096

	)

15 
	#PAGE_TABLE_OFFSET
(
x
Ë(x>>12 & 0x1FF)

	)

16 
	#PAGE_DIRECTORY_OFFSET
(
x
Ë(x>>21 &0x1FF)

	)

17 
	#PAGE_POINTER_OFFSET
(
x
Ë(x>>30 & 0x1FF)

	)

18 
	#PAGE_PML4_OFFSET
(
x
Ë(x>>39 & 0x1FF)

	)

19 
	#PAGE_PHYSICAL_ADDRESS
(
x
) (*x & ~0xFFF0000000000FFF)

21 

	)

24 
	s∑ge_èbÀ
{

25 
±_íåy
 
	míåy
[
PAGES_PER_TABLE
];

27 
∑ge_èbÀ
 
	t±e
;

32 
	s∑ge_dúe˘‹y_èbÀ
{

33 
pd_íåy
 
	míåy
[
PAGES_PER_DIR
];

35 
∑ge_dúe˘‹y_èbÀ
 
	tpde
;

40 
	s∑ge_dúe˘‹y_poöãr_èbÀ
{

41 
pd≥_íåy
 
	míåy
[
PAGES_PER_DIR
];

43 
∑ge_dúe˘‹y_poöãr_èbÀ
 
	tpd≥
;

48 
	s∑ge_m≠_Àvñ_4
{

49 
pml4e_íåy
 
	míåy
[
PAGES_PER_DIR
];

51 
∑ge_m≠_Àvñ_4
 
	tpml4
;

53 
uöt64_t
 
gë_¸3_ªgi°î
();

56 
vmmgr_m≠_∑ge
(
vútuÆ_addr
, virtual_addr);

59 
vmmgr_öô
();

62 * 
vmmgr_Æloc_∑ge
(
uöt16_t
);

65 
vmmgr_‰ì_∑ge
();

67 * 
sub_mÆloc
(
uöt16_t
, 
boﬁ
);

69 
sub_‰ì
(*);

75 
pde
* 
vmmngr_gë_∑ge_dúe˘‹y
();

78 
pd≥
* 
vmmngr_gë_∑ge_poöãr_dúe˘‹y
();

81 
pml4
* 
vmmngr_gë_pml4_dúe˘‹y
();

89 
boﬁ
 
vmmgr_swôch_∑ge_dúe˘‹y
(
pde
 *);

92 
boﬁ
 
vmmgr_swôch_∑ge_poöãr_dúe˘‹y
(
pd≥
 *);

95 
vmmgr_swôch_pml4_dúe˘‹y
(
pml4
 *);

104 
uöt32_t
 
vmmgr_±abÀ_vút_to_ödex
(
vútuÆ_addr
);

107 
uöt32_t
 
vmmgr_pdèbÀ_vút_to_ödex
(
vútuÆ_addr
);

110 
uöt32_t
 
vmmgr_pdpoöãπabÀ_vút_to_ödex
(
vútuÆ_addr
);

113 
uöt32_t
 
vmmgr_pml4_vút_to_ödex
(
vútuÆ_addr
);

120 
vmmgr_±abÀ_˛ór
(
±e
 *);

123 
vmmgr_∑ge_dúe˘‹y_˛ór
(
pde
 *);

126 
vmmgr_∑ge_poöãr_dúe˘‹y_˛ór
(
pd≥
 *);

129 
vmmgr_pml4_dúe˘‹y_˛ór
(
pml4
 *);

137 
±_íåy
* 
vmmgr_±abÀ_lookup_íåy
(
±e
*, 
vútuÆ_addr
);

140 
pd_íåy
* 
vmmgr_∑ge_dúe˘‹y_lookup_íåy
(
pde
*, 
vútuÆ_addr
);

143 
pd≥_íåy
* 
vmmgr_∑ge_poöãr_dúe˘‹y_lookup_íåy
(
pd≥
*, 
vútuÆ_addr
);

146 
pml4e_íåy
* 
vmmgr_pml4_dúe˘‹y_lookup_íåy
(
pml4
*, 
vútuÆ_addr
);

148 * 
vmmgr_∑ge_Æloc
();

150 
vmmgr_m≠_∑ge_a·î_∑gög
(
uöt64_t
, uöt64_t, 
boﬁ
);

152 
mmgr_syncwôh_kî√l
();

154 
˛⁄e_pgdú
(
uöt64_t
, uint64_t);

156 
c›y_∑ge_èbÀ
(
uöt64_t
, uöt64_t, 
boﬁ
);

158 
pd_íåy
* 
gë_pde_off£t_ªcur£
(
vútuÆ_addr
);

160 
±_íåy
* 
gë_±e_ªcur£
(
vútuÆ_addr
);

162 
˛ór_∑ge_èbÀs
(
uöt64_t
);

	@include/sys/mmap.h

1 #i‚de‡
_MMAP_H_


2 
	#_MMAP_H_


	)

3 
	~<defs.h
>

4 
	~<sys/kthªad.h
>

6 
mm≠
(*, 
uöt32_t
, , , , 
uöt64_t
, 
kthªad
*);

	@include/sys/shell.h

1 #i‚de‡
_SHELL_H_


2 
	#_SHELL_H


	)

4 
	#MAXARGS
 10

	)

6 
	scmdlöe_tokís
 {

7 
	m¨gc
;

8 *
	m¨gv
[
MAXARGS
];

9 
	ebuûtös_t
 {

10 
	mBUILTIN_NONE
,

11 
	mBUILTIN_QUIT
,

12 
	mBUILTIN_JOBS
,

13 
	mBUILTIN_BG
,

14 
	mBUILTIN_FG
} 
	mbuûtös
;

17 
shñl_maö
();

	@include/sys/tarfs.h

1 #i‚de‡
_TARFS_H


2 
	#_TARFS_H


	)

4 
_bö¨y_èrfs_°¨t
;

5 
_bö¨y_èrfs_íd
;

7 
	sposix_hódî_u°¨
 {

8 
	m«me
[100];

9 
	mmode
[8];

10 
	muid
[8];

11 
	mgid
[8];

12 
	msize
[12];

13 
	mmtime
[12];

14 
	mchecksum
[8];

15 
	mty≥Êag
[1];

16 
	mlök«me
[100];

17 
	mmagic
[6];

18 
	mvîsi⁄
[2];

19 
	mu«me
[32];

20 
	mg«me
[32];

21 
	mdevmaj‹
[8];

22 
	mdevmö‹
[8];

23 
	m¥efix
[155];

24 
	m∑d
[12];

	@include/sys/task.h

2 #i‚de‡
_TASK_H


3 
	#_TASK_H


	)

4 
	~<defs.h
>

5 
	~<sys/mm/vmmgr_vútuÆ.h
>

29 
	svmas
 {

30 * 
	m«me
;

31 *
	mvm_°¨t
, *
	mvm_íd
;

32 
uöt16_t
 
	mvm_Êags
;

33 
vmas
 *
	mvm_√xt
;

37 
vmas
 
	tvm_¨ó_°ru˘
;

	@include/sys/timer.h

1 
timî_£tup
();

2 
timî_h™dÀr
(
ªgs
 *);

3 
timî_ö°Æl
();

	@include/syscall.h

1 #i‚de‡
_SYSCALL_H


2 
	#_SYSCALL_H


	)

4 
	~<defs.h
>

6 
	#SYSCALL_PROTO
(
n
Ë
__ölöe
 
uöt64_t
 
__sysˇŒ
#n

	)

8 
	$SYSCALL_PROTO
(0)(
uöt64_t
 
n
) {

10 
	}
}

12 
	$SYSCALL_PROTO
(1)(
uöt64_t
 
n
, uöt64_à
a1
) {

14 
	}
}

16 
	$SYSCALL_PROTO
(2)(
uöt64_t
 
n
, uöt64_à
a1
, uöt64_à
a2
) {

18 
	}
}

20 
	$SYSCALL_PROTO
(3)(
uöt64_t
 
n
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
) {

22 
	}
}

24 
	$SYSCALL_PROTO
(4)(
uöt64_t
 
n
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
) {

26 
	}
}

	@include/syscalls.h

1 #i‚de‡
_SYSCALLS_H_


2 
	#_SYSCALLS_H_


	)

4 
	~<defs.h
>

6 
uöt16_t
 
wrôe
(*, uint16_t);

	@include/ustdlib.h

1 #i‚de‡
_USTDLIB_H_


2 
	#_USTDLIB_H_


	)

3 
	~<defs.h
>

5 * 
c⁄vît_u
(
uöt64_t
, 
uöt16_t
);

6 
uöt64_t
 
f‹k
();

7 
gëpid
();

8 
¶ìp
(
uöt64_t
);

9 
ªad
(*);

10 
waô
();

11 
execve
(const *);

12 
uöt16_t
 
ps
();

13 
˛s
();

14 * 
mem˝y
(*, c⁄° *, 
uöt32_t
);

15 
°∫˝y
(*, c⁄° *, 
uöt32_t
);

16 
°rcmp
(*, *);

17 
°r˝¢
(const *, const *);

18 
°æí
(const *);

19 
mem£t
(*, 
uöt8_t
, 
uöt32_t
);

	@ld/ld.c

	@libc/cls.c

1 
	~<defs.h
>

2 
	$˛s
(){

3 
	`__asm__
("movq $0x9, %rax;\n\tint $0x80;");

5 
	}
}

	@libc/exec.c

1 
	~<u°dlib.h
>

3 
	$execve
(c⁄° * 
buf
){

4 
ªs
;

5 
	`__asm__
("movq $0x7, %rax;\n\tint $0x80;");

6 
__asm__
 
	`__vﬁ©ûe__
("movl %%eax, %0;"

7 :"Ù"(
ªs
)

11  
ªs
;

13 
	}
}

	@libc/exit.c

1 
	$exô
(
°©us
) {

2 
	}
}

	@libc/fork.c

1 
	~<defs.h
>

3 
	$f‹k
(){

4 
uöt64_t
 
pid
;

5 
	`__asm__
("movq $0x3, %rax;\n\tint $0x80");

6 
__asm__
 
	`__vﬁ©ûe__
("movq %%rax, %0;"

7 :"Ù"(
pid
)

11  
pid
;

12 
	}
}

	@libc/getpid.c

1 
	~<defs.h
>

3 
	$gëpid
(){

4 
uöt64_t
 
pid
;

5 
__asm__
 
	`__vﬁ©ûe__
("movq $0x14, %rax\n\tint $0x80");

6 
__asm__
 
	`__vﬁ©ûe__
("movq %%rax, %0;"

7 :"Ù"(
pid
)

11  
pid
;

12 
	}
}

	@libc/printf.c

2 
	~<u°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<defs.h
>

6 
uöt16_t
 
	$wrôe
(c⁄° * 
buf
){

7 
	`__asm__
("movq $0x2, %rax;\n\tint $0x80;");

9 
	}
}

11 
	$¥ötf
(c⁄° *
fmt
, ...) {

12 c⁄° *
p
;

13 
buf
[100];

14 
uöt16_t
 
öd
,
˙t
=0;

17 
i
;

19 *
s
;

20 
va_li°
 
¨g_p
;

23 
	`va_°¨t
(
¨g_p
, 
fmt
);

29 
p
=
fmt
; *p ;Ö++){

30 * 
c⁄v
;

31 if(*
p
 != '%'){

32 
buf
[
˙t
++] = *
p
;

35 *++
p
){

36 'c': 
i
 = 
	`va_¨g
(
¨g_p
, );

37 
buf
[
˙t
++] = 
i
;

39 's': 
s
 = 
	`va_¨g
(
¨g_p
, *);

40 
öd
 = 0;

41 
s
[
öd
])

42 
buf
[
˙t
++] = 
s
[
öd
++];

44 'd': 
i
 = 
	`va_¨g
(
¨g_p
, );

45 
c⁄v
 = 
	`c⁄vît_u
(
i
,10);

46 
öd
=0; ind<8; ind++)

47 if(
c⁄v
[
öd
] != ' ')

48 
buf
[
˙t
++] = 
c⁄v
[
öd
];

50 'x': 
i
 = 
	`va_¨g
(
¨g_p
, );

51 
buf
[
˙t
++] = '0';

52 
buf
[
˙t
++] = 'x';

53 
c⁄v
 = 
	`c⁄vît_u
(
i
,10);

54 
öd
=0; ind<8; ind++)

55 if(
c⁄v
[
öd
] != ' ')

56 
buf
[
˙t
++] = 
c⁄v
[
öd
];

65 
	`va_íd
(
¨g_p
);

66 
	`wrôe
((c⁄° *)
buf
);

67 
	`mem£t
(
buf
, '\0', (buf));

69 
	}
}

	@libc/ps.c

1 
	~<defs.h
>

2 
uöt16_t
 
	$ps
(){

3 
	`__asm__
("movq $0x8, %rax;\n\tint $0x80;");

5 
	}
}

	@libc/read.c

1 
	~<defs.h
>

3 
	$ªad
(* 
buf
){

4 
˙t
=0;

5 
	`__asm__
("movq $0x5, %rax;\n\tint $0x80;");

6 
__asm__
 
	`__vﬁ©ûe__
("movl %%eax, %0;"

7 :"Ù"(
˙t
)

11  
˙t
;

12 
	}
}

	@libc/sleep.c

1 
	~<defs.h
>

3 
	$¶ìp
(
uöt64_t
 
time
){

4 
__asm__
 
	`__vﬁ©ûe__
("movq $0x4, %rax\n\tint $0x80");

5 
	}
}

	@libc/stdlib.c

1 
	~<defs.h
>

2 
	~<u°dlib.h
>

3 *
	$c⁄vît_u
(
uöt64_t
 
num
, 
uöt16_t
 
ba£
)

5 
buf
[65];

6 *
±r
;

8 
±r
=&
buf
[(buf)-1];

9 *
±r
='\0';

12 *--
±r
="0123456789abcdef"[
num
%
ba£
];

13 
num
/=
ba£
;

14 }
num
!=0);

15 (
±r
);

16 
	}
}

18 
	$mem£t
(*
s
, 
uöt8_t
 
c
, 
uöt32_t
 
n
)

20 * 
p
(*)
s
;

21 
n
--)

22 *
p
++ = ()
c
;

23 
	}
}

26 
	$°∫˝y
(* 
de°
, c⁄° * 
§c
, 
uöt32_t
 
size
){

27 
uöt32_t
 
i
;

28 
i
=0; i<
size
; i++)

29 
de°
[
i
] = 
§c
[i];

30 
	}
}

34 
	$°æí
(c⁄° *
s
){

35 
Àngth
=0;

36 * 
loˇl_s
 = (*)
s
;

37 *
loˇl_s
){

38 
Àngth
++;

39 
loˇl_s
++;

41  
Àngth
;

42 
	}
}

44 
	$°rcmp
(*
a
, * 
b
){

45 
i
=0, 
equÆs
 = 0;

46 
Àn1
 = 
	`°æí
(
a
);

47 
Àn2
 = 
	`°æí
(
b
);

48 if–
Àn1
 !
Àn2
 )

50 
a
[
i
] !
NULL
){

51 if(
a
[
i
] =
b
[i]){

52 
i
++;

56 
equÆs
 = 1;

60  
equÆs
;

61 
	}
}

63 *
	$°rchr
(c⁄° *
s
, 
c
)

65 *
s
 !()
c
)

66 i‡(!*
s
++)

68  (*)
s
;

69 
	}
}

71 
	$°r˝¢
(c⁄° *
s1
, c⁄° *
s2
)

73 
ªt
=0;

74 *
s1
)

75 if(
	`°rchr
(
s2
,*
s1
))

76  
ªt
;

78 
s1
++,
ªt
++;

79  
ªt
;

80 
	}
}

	@libc/syscalls.s

1 .
	gãxt


2 .
globÆ
 
wrôe


3 
	gwrôe
:

4 
sysˇŒ


5 
ªtq


	@libc/wait.c

1 
	~<defs.h
>

3 
	$waô
(){

4 
	`__asm__
("movq $0x6, %rax;\n\tint $0x80;");

6 
	}
}

	@sys/elf.c

1 
	~<sys/èrfs.h
>

2 
	~<ñf.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<sys/mm/mmgr.h
>

6 
	~<sys/mm/vmmgr_vútuÆ.h
>

7 
	~<defs.h
>

9 
	$¥ötSe˘Hrds
(* 
bö_°¨t
, 
Elf64_Ehdr
* 
bö_ñf_°¨t
, 
uöt16_t
 
idx
){

10 
Elf64_Shdr
* 
£˘Hdr
;

11 
£˘Hdr
 = (
Elf64_Shdr
*)((
bö_°¨t
 + 
bö_ñf_°¨t
->
e_shoff
 + 
idx
*((Elf64_Shdr)Ë+ (
Elf64_Ehdr
)));

12 
	`¥ötf
("Se¯ödex %d Se¯«mêoff£à%d Se¯ty≥ = %d Se¯©åibuã†%d Se¯vútuÆáddªs†%x Se¯off£à%d Se¯sizê%d Se¯lök %d Se¯öfÿ%d Se¯Æig¿%d Se¯ítSizê%d\n",
idx
,
£˘Hdr
->
sh_«me
,£˘Hdr->
sh_ty≥
,£˘Hdr->
sh_Êags
,£˘Hdr->
sh_addr
,£˘Hdr->
sh_off£t
,£˘Hdr->
sh_size
,£˘Hdr->
sh_lök
,£˘Hdr->
sh_öfo
,£˘Hdr->
sh_addølign
,£˘Hdr->
sh_ítsize
);

14 
	}
}

16 
	$¥ötElfHdr
(*
bö_°¨t
, 
Elf64_Ehdr
* 
bö_ñf_°¨t
){

17 
	`¥ötf
("Elf_magi¯%†Elf_ty≥ %d Elf_mach_ty≥ %dÉlf_vîsi⁄ %dÉlf_íåy_add∏%xÉlf_pf_off£à%dÉlf_sh_off£à%dÉlf_Êag†%d,Élf_sizê%d,Élf_ph_sizê%d,Élf_ph_num %di,Élf_sh_sizê%d,Élf_sh_sizê%d,Élf_sh_num %d,Élf_°r_ödex %d\n",
bö_ñf_°¨t
->
e_idít
,bö_ñf_°¨t->
e_ty≥
,bö_ñf_°¨t->
e_machöe
,bö_ñf_°¨t->
e_vîsi⁄
,bö_ñf_°¨t->
e_íåy
,bö_ñf_°¨t->
e_phoff
,bö_ñf_°¨t->
e_shoff
,bö_ñf_°¨t->
e_Êags
,bö_ñf_°¨t->
e_ehsize
,bö_ñf_°¨t->
e_phítsize
,bö_ñf_°¨t->
e_phnum
,bö_ñf_°¨t->
e_shítsize
,bö_ñf_°¨t->
e_shnum
,bö_ñf_°¨t->
e_sh°∫dx
);

18 
	}
}

20 
	$¥ötPgmHdr
(*
bö_°¨t
, 
Elf64_Ehdr
* 
bö_ñf_°¨t
, 
uöt16_t
 
idx
){

21 
Elf64_Phdr
* 
pgmHdr
;

22 
pgmHdr
 = (
Elf64_Phdr
*)((
bö_°¨t
 + (
Elf64_Ehdr
Ë+ 
idx
*(Elf64_Phdr)));

23 
	`¥ötf
("Pgm_vadd∏%x, Pgm_off£à%d, Pgm_sizê%d\n", 
pgmHdr
->
p_vaddr
,ÖgmHdr->
p_off£t
,ÖgmHdr->
p_fûesz
);

24 
	}
}

26 
	$round
(
no
){

27 
no
 = (((no/512)+1)* 512);

28  
no
;

29 
	}
}

30 * 
	$èrfs_ªad
(* 
«me
){

32 * 
°¨t_addr
 = 
NULL
;

33 
found
 = 0;

34 
uöt64_t
 
íd
 = (uöt64_t)&(
_bö¨y_èrfs_íd
);

35 
posix_hódî_u°¨
 *
hódî
;

36 
hódî
 = (
posix_hódî_u°¨
*)(&
_bö¨y_èrfs_°¨t
);

38  (
uöt64_t
)
hódî
 <
íd
 ){

39 if(
	`°rcmp
((*)
hódî
->
«me
,Çame) == 0){

41 
found
 = 1;

42 
°¨t_addr
 = (*)(
hódî
 + 1);

45 if(
	`my_©oﬁ
(
hódî
->
size
) == 0)

46 
hódî
 = hódî + 1 + (
	`my_©oﬁ
(hódî->
size
));

48 
hódî
 = (
posix_hódî_u°¨
*)((
uöt64_t
)(hódî + 1Ë+ (uöt64_t)
	`round
(
	`my_©oﬁ
(hódî->
size
)));

51 if(
found
)

52  
°¨t_addr
;

54  (*)
NULL
;

55 
	}
}

65 
uöt16_t
 
	$ªadñf
(*
«me
, 
exec
 *
execuèbÀ
, 
uöt16_t
 *
pgm_íåõs
, 
uöt64_t
 *
íåy_poöt
){

66 
Elf64_Ehdr
 *
bö_ñf_°¨t
;

67 
Elf64_Shdr
 *
£˘Hdr
;

68 
Elf64_Phdr
 *
pgmHdr
;

69 
uöt16_t
 
i
;

71 
uöt64_t
 
lﬂd_size
, 
lﬂd_°¨t
, 
lﬂd_addr
;

72 
uöt64_t
 
Àngth
 = 0;

73 
uöt64_t
 
ãxt_°¨t
;

75 
uöt64_t
 
a˘uÆ_mem_°¨t
;

76 * 
bö_°¨t
;

77 * 
lﬂd_buf
;

79 
bö_°¨t
 = (*)
	`èrfs_ªad
(
«me
);

80 if((
uöt64_t
)
bö_°¨t
 =
NULL
)

83 
bö_ñf_°¨t
 = (
Elf64_Ehdr
*)
bö_°¨t
;

84 *
íåy_poöt
 = 
bö_ñf_°¨t
->
e_íåy
;

85 *
pgm_íåõs
 = 
bö_ñf_°¨t
->
e_phnum
 - 1;

89 
£˘Hdr
 = (
Elf64_Shdr
*)((
bö_°¨t
 + 
bö_ñf_°¨t
->
e_shoff
 + (
Elf64_Ehdr
)));

90 
ãxt_°¨t
 = 
£˘Hdr
->
sh_addr
;

92 
a˘uÆ_mem_°¨t
 = (
uöt64_t
)((uöt64_t)
bö_°¨t
 + (
Elf64_Ehdr
Ë+ ((*
pgm_íåõs
))*(
Elf64_Phdr
Ë+ 
bö_ñf_°¨t
->
e_phoff
);

93 
i
=0; i < (*
pgm_íåõs
); i++){

94 
pgmHdr
 = (
Elf64_Phdr
*)((
bö_°¨t
 + (
Elf64_Ehdr
Ë+ 
i
*(Elf64_Phdr)));

95 
lﬂd_size
 = 
pgmHdr
->
p_memsz
;

96 
lﬂd_°¨t
 = 
pgmHdr
->
p_vaddr
 -ÖgmHdr->
p_off£t
;

97 if(
i
==0)

98 
lﬂd_addr
 = 
ãxt_°¨t
;

100 
lﬂd_addr
 = 
pgmHdr
->
p_vaddr
;

101 if(
i
==0)

102 
lﬂd_buf
 = (*)(
a˘uÆ_mem_°¨t
 + 
Àngth
);

104 
lﬂd_buf
 = (*)((
uöt64_t
)
bö_ñf_°¨t
 + 
pgmHdr
->
p_off£t
);

105 
Àngth
 +
lﬂd_size
;

106 
execuèbÀ
[
i
].
£g_Àngth
 = 
lﬂd_size
;

107 
execuèbÀ
[
i
].
£g_∑ge_°¨t
 = 
lﬂd_°¨t
;

108 
execuèbÀ
[
i
].
£g_a˘uÆ_°¨t
 = 
lﬂd_addr
;

109 
execuèbÀ
[
i
].
£g_mem
 = (*)
lﬂd_buf
;

130 
	}
}

	@sys/exec.c

1 
	~<defs.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<sys/mm/vmmgr_vútuÆ.h
>

5 
	~<sys/mm/mmgr.h
>

6 
	~<sys/èsk.h
>

7 
	~<ñf.h
>

8 
	~<sys/mm≠.h
>

9 
	~<sys/kthªad.h
>

11 
	#U£rCode
 0x0000000000400000

	)

12 
	#U£rD©a
 0x0000000000600000

	)

13 
	#U£rSèck
 0x0000000000bff000

	)

14 
	#VmaSèπ
 0x0000000000400000

	)

16 
uöt64_t
 
USER_CS
;

17 
uöt64_t
 
USER_DS
;

18 
globÆ_thªad_li°
 
ÆlThªadLi°
;

19 
Thr_Queue
 
runQueue
;

20 
swôch_to_u£r
();

21 
uöt64_t
 
gë_¸3_ªgi°î
();

22 
kthªad
* 
cuºítThªad
;

23 
uöt64_t
 
kî√l_pgd
;

24 
debug
;

25 
PushU
(
kthªad
*, 
uöt64_t
);

26 
ªlﬂd_¸3
(
uöt64_t
);

33 
	$PushU_GíîÆ_Regi°îs
(
kthªad
* 
k_thªad
){

35 
	`PushU
(
k_thªad
, 0);

36 
	`PushU
(
k_thªad
, 0);

37 
	`PushU
(
k_thªad
, 0);

38 
	`PushU
(
k_thªad
, 0);

39 
	`PushU
(
k_thªad
, 0);

40 
	`PushU
(
k_thªad
, 0);

41 
	`PushU
(
k_thªad
, 0);

42 
	`PushU
(
k_thªad
, 0);

43 
	`PushU
(
k_thªad
, 0);

44 
	`PushU
(
k_thªad
, 0);

45 
	`PushU
(
k_thªad
, 0);

46 
	`PushU
(
k_thªad
, 0);

47 
	`PushU
(
k_thªad
, 0);

48 
	`PushU
(
k_thªad
, 0);

49 
	`PushU
(
k_thªad
, 0);

50 
	}
}

53 
	$£tup_kthªad_u£r
(
kthªad
* 
k_thªad
, * 
°¨tFunc
, 
uöt16_t
 
¨g
){

70 
	`PushU
(
k_thªad
, (
uöt64_t
)
USER_DS
);

72 
	`PushU
(
k_thªad
, (
uöt64_t
)(k_thªad->
r•
));

75 
	`PushU
(
k_thªad
, (
uöt64_t
)0x200);

78 
	`PushU
(
k_thªad
, (
uöt64_t
)
USER_CS
);

81 
	`PushU
(
k_thªad
, (
uöt64_t
Ë
°¨tFunc
);

89 
	`PushU
(
k_thªad
, (
uöt64_t
)0);

90 
	`PushU
(
k_thªad
, (
uöt64_t
)0);

96 
	`PushU_GíîÆ_Regi°îs
(
k_thªad
);

98 
	}
}

101 
	$Inô_Thªad_u£r
(
kthªad
* 
k_thªad
,c⁄° * 
«me
, * 
°ackPage
, 
uöt16_t
 
¥io
, 
boﬁ
 
dëached
){

102 
kthªad
* 
ow√r
 = 
dëached
 ? (kthªad*)0: 
cuºítThªad
;

103 
k_thªad
->
°ackPage
 = stackPage;

110 
k_thªad
->
r•
 = ((
uöt64_t
Ëk_thªad->
°ackPage
Ë+ 
VIRT_PAGE_SIZE
 - 0x8;

111 
k_thªad
->
kr•
 = ((
uöt64_t
Ëk_thªad->
k°ack
Ë+ 2*
VIRT_PAGE_SIZE
 - 0x8;

112 
k_thªad
->
k°ack
 = (*)(((
uöt64_t
)k_thªad->k°ackË+ 2*
VIRT_PAGE_SIZE
 - 0x8);

113 
k_thªad
->
¥i‹ôy
 = 
¥io
;

115 
k_thªad
->
ow√r
 = owner;

116 
k_thªad
->
ªfCou¡
 = 
dëached
 ? 1 : 2;

117 
k_thªad
->
kî√l_thªad
 = 0;

118 
k_thªad
->
no_°ack_∑ges
 = 1;

119 
k_thªad
->
Æive
 = 
TRUE
;

120 
k_thªad
->
¶ìpög
 = 0;

121 
k_thªad
->
«me
 =Çame;

122 
k_thªad
->
p¸3
 = 
	`gë_¸3_ªgi°î
();

123 
k_thªad
->
¸3
 = (
uöt64_t
)
cuºítThªad
->cr3;

124 if(
k_thªad
 !
cuºítThªad
)

125 
k_thªad
->
pid
 = 
	`Æloc_pid
();

126 
	}
}

128 
kthªad
* 
	$¸óã_kthªad_u£r
(c⁄° * 
«me
, 
¥io
, 
boﬁ
 
dëached
){

129 
kthªad
* 
k_thªad
;

130 * 
°ackPage
 = 0;

131 
k_thªad
 = (
kthªad
*)
	`sub_mÆloc
((kthread),0);

132 if–!
k_thªad
 )

133  
NULL
;

134 
°ackPage
 = (*)
U£rSèck
;

135 
k_thªad
->
k°ack
 = (*)
	`sub_mÆloc
(1,1);

136 if–!
k_thªad
->
k°ack
 ){

137 
	`sub_‰ì
(
k_thªad
->
k°ack
);

138  
NULL
;

140 
debug
 = 1;

145 
	`Inô_Thªad_u£r
(
k_thªad
, 
«me
, 
°ackPage
, 
¥io
, 
dëached
);

148 
	`≠≥nd_globÆ_li°_queue
(&
ÆlThªadLi°
, 
k_thªad
);

150  
k_thªad
;

151 
	}
}

156 
	$¸óã_√w_èsk
(
kthªad
* 
k_thªad
, * 
°¨tFunc
, c⁄° * 
«me
, 
uöt16_t
 
¨g
, uöt16_à
¥i‹ôy
, 
boﬁ
 
dëached
){

157 
	`£tup_kthªad_u£r
(
k_thªad
, 
°¨tFunc
, 
¨g
);

159 
	}
}

161 
uöt32_t
 
	$do_exec
(*
«me
){

162 
exec
 
execuèbÀ
[20];

163 
uöt64_t
 
cuºítSèck_∑ge
;

164 
uöt16_t
 
pgm_íåõs
;

165 
kthªad
* 
k_thªad
;

167 
uöt16_t
 
i
;

168 
uöt64_t
 
íåy_poöt
;

169 
	`¥ötf
("inÉxec\n");

170 if–
	`ªadñf
(
«me
, 
execuèbÀ
, &
pgm_íåõs
, &
íåy_poöt
) ){

171 
k_thªad
 = 
	`¸óã_kthªad_u£r
(
«me
, 10, 1);

172 if(!
k_thªad
)

173  
NULL
;

175 
i
=0; i < 
pgm_íåõs
; i++){

176 
	`mm≠
((*)
execuèbÀ
[
i
].
£g_∑ge_°¨t
,ÉxecuèbÀ[i].
£g_Àngth
, 0, 0, 0, 0, 
k_thªad
);

177 
	`mem˝y
((*)
execuèbÀ
[
i
].
£g_a˘uÆ_°¨t
,ÉxecuèbÀ[i].
£g_mem
,ÉxecuèbÀ[i].
£g_Àngth
);

181 
cuºítSèck_∑ge
 = 
U£rSèck
;

182 
	`mm≠
((*)
cuºítSèck_∑ge
, 
VIRT_PAGE_SIZE
, 0, 0, 0, 0, 
k_thªad
);

185 
	`¸óã_√w_èsk
(
k_thªad
, (*)
íåy_poöt
, "first", 0, 10, 1);

186 
	`add_to_±abÀ
(
k_thªad
);

187 
	`dißbÀ_öãºu±s
();

188 
	`ru¬abÀ_kthªad
(
k_thªad
);

189 
	`íabÀ_öãºu±s
();

194 
	}
}

196 
	$do_exec1
(* 
«me
){

197 
exec
 
execuèbÀ
[20];

198 
uöt64_t
 
cuºítSèck_∑ge
;

199 
uöt16_t
 
pgm_íåõs
;

200 
uöt16_t
 
i
;

201 
uöt64_t
 
íåy_poöt
;

202 
	`Inô_Thªad_u£r
(
cuºítThªad
, 
«me
, (*)
U£rSèck
, 10, 1);

203 
	`≠≥nd_globÆ_li°_queue
(&
ÆlThªadLi°
, 
cuºítThªad
);

204 
	`¥ötf
("inÉxec1");

205 if–
	`ªadñf
(
«me
, 
execuèbÀ
, &
pgm_íåõs
, &
íåy_poöt
) ){

206 
i
=0; i < 
pgm_íåõs
; i++){

207 
	`mm≠
((*)
execuèbÀ
[
i
].
£g_∑ge_°¨t
,ÉxecuèbÀ[i].
£g_Àngth
, 0, 0, 0, 0, 
cuºítThªad
);

208 
	`mem˝y
((*)
execuèbÀ
[
i
].
£g_a˘uÆ_°¨t
,ÉxecuèbÀ[i].
£g_mem
,ÉxecuèbÀ[i].
£g_Àngth
);

212 
cuºítSèck_∑ge
 = 
U£rSèck
;

213 
	`mm≠
((*)
cuºítSèck_∑ge
, 
VIRT_PAGE_SIZE
, 0, 0, 0, 0, 
cuºítThªad
);

216 
	`¸óã_√w_èsk
(
cuºítThªad
, (*)
íåy_poöt
, 
«me
, 0, 10, 1);

217 
	`dißbÀ_öãºu±s
();

218 
	`ru¬abÀ_kthªad
(
cuºítThªad
);

219 
	`íabÀ_öãºu±s
();

222 
	}
}

223 
	$˛ór_vmas
(
kthªad
* 
k_thªad
){

224 
vm_¨ó_°ru˘
 *
¸awl
 = 
k_thªad
->
mm≠
, *
tmp
;

225 
¸awl
){

226 
tmp
 = 
¸awl
->
vm_√xt
;

227 
	`mem£t
((*)
¸awl
, 0, (
vm_¨ó_°ru˘
));

228 
	`sub_‰ì
(
¸awl
);

229 
¸awl
 = 
tmp
;

231 
k_thªad
->
mm≠
 = k_thªad->
mm≠_ˇche
 = 
NULL
;

232 
	}
}

234 
	$maö_execve
(* 
«me
){

235 
ãmp
[30];

236 
	`mem£t
(
ãmp
, 0, (temp));

237 
	`°∫˝y
(
ãmp
, 
«me
, 
	`°æí
(name));

238 
	`˛ór_vmas
(
cuºítThªad
);

239 
	`˛ór_∑ge_èbÀs
(
cuºítThªad
->
¸3
);

240 
	`ªlﬂd_¸3
(
cuºítThªad
->
p¸3
);

241 
	`do_exec1
(
ãmp
);

242 
	}
}

	@sys/fork.c

1 
	~<sys/èsk.h
>

2 
	~<îr‹s.h
>

3 
	~<defs.h
>

4 
	~<sys/mm/vmmgr_vútuÆ.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

	@sys/gdt.c

1 
	~<sys/gdt.h
>

5 
	#MAX_GDT
 32

	)

7 
	ssys_£gmít_des¸ùt‹
 {

8 
uöt64_t
 
	msd_lﬁimô
:16;

9 
uöt64_t
 
	msd_loba£
:24;

10 
uöt64_t
 
	msd_ty≥
:5;

11 
uöt64_t
 
	msd_d∂
:2;

12 
uöt64_t
 
	msd_p
:1;

13 
uöt64_t
 
	msd_hûimô
:4;

14 
uöt64_t
 
	msd_xx1
:3;

15 
uöt64_t
 
	msd_gøn
:1;

16 
uöt64_t
 
	msd_hiba£
:40;

17 
uöt64_t
 
	msd_xx2
:8;

18 
uöt64_t
 
	msd_zîo
:5;

19 
uöt64_t
 
	msd_xx3
:19;

20 }
__©åibuã__
((
∑cked
));

22 
uöt64_t
 
	ggdt
[
MAX_GDT
] = {

24 
GDT_CS
 | 
P
 | 
DPL0
 | 
L
,

25 
GDT_DS
 | 
P
 | 
W
 | 
DPL0
,

26 
GDT_CS
 | 
P
 | 
DPL3
 | 
L
,

27 
GDT_DS
 | 
P
 | 
W
 | 
DPL3
,

31 
	sgdå_t
 {

32 
uöt16_t
 
	msize
;

33 
uöt64_t
 
	maddr
;

34 }
__©åibuã__
((
∑cked
));

36 
gdå_t
 
	ggdå
 = {

37 (
gdt
),

38 (
uöt64_t
)
gdt
,

41 
_x86_64_asm_lgdt
(
gdå_t
* 
gdå
, 
uöt64_t
 
cs_idx
, uöt64_à
ds_idx
);

43 
	$ªlﬂd_gdt
() {

44 
	`_x86_64_asm_lgdt
(&
gdå
, 8, 16);

45 
	}
}

47 
	$£tup_tss
() {

48 
sys_£gmít_des¸ùt‹
* 
sd
 = (sys_£gmít_des¸ùt‹*)&
gdt
[5];

49 
sd
->
sd_lﬁimô
 = (
tss_t
)-1;

50 
sd
->
sd_loba£
 = ((
uöt64_t
)&
tss
);

51 
sd
->
sd_ty≥
 = 9;

52 
sd
->
sd_d∂
 = 0;

53 
sd
->
sd_p
 = 1;

54 
sd
->
sd_hûimô
 = 0;

55 
sd
->
sd_gøn
 = 0;

56 
sd
->
sd_hiba£
 = ((
uöt64_t
)&
tss
) >> 24;

57 
	}
}

	@sys/gdt.s

1 #
#gdt.
s


3 #
#Cª©ed 
⁄
: 
Dec
 29, 2010

5 #Auth‹: 
cds


8 .
	gãxt


11 #lﬂd 
a
 
√w
 
GDT


12 #∑ømëî 1: 
addªss
 
of
 
gdå


13 #∑ømëî 2: 
√w
 
code
 
des¸ùt‹
 
off£t


14 #∑ømëî 3: 
√w
 
d©a
 
des¸ùt‹
 
off£t


15 .
globÆ
 
_x86_64_asm_lgdt


16 
	g_x86_64_asm_lgdt
:

18 
lgdt
 (%
rdi
)

20 
pushq
 %
rsi
 #push 
code
 
£À˘‹


21 
movabsq
 
$
.
d⁄e
, %
r10


22 
	gpushq
 %
	gr10
 #push  
addªss


23 
	gÃëq
 #Ár- 
to
 
√w
 
cs
 
des¸ùt‹
 ( 
the
 
ªtq
 
bñow
 )

24 .
	gd⁄e
:

25 
movq
 %
rdx
, %
es


26 
	gmovq
 %
	grdx
, %
fs


27 
	gmovq
 %
	grdx
, %
gs


28 
	gmovq
 %
	grdx
, %
ds


29 
	gmovq
 %
	grdx
, %
ss


30 
	gªtq


	@sys/idt.c

1 
	~<sys/idt.h
>

2 
	~<sys/i§.h
>

3 
	~<sys/kthªad.h
>

4 
	~<°dio.h
>

5 
	#MAX_IDT
 256

	)

7 
_i§0
();

8 
_i§1
();

9 
_i§13
();

10 
_i§14
();

11 
_i§80
();

12 *
mem£t
(*,,);

13 
wrôe_°rög
(, const *);

14 
_x86_64_asm_…r
(*);

15 
kthªad
* *
±abÀ
;

16 
idtE
 
	gidt
[
MAX_IDT
];

17 
kthªad
* 
cuºítThªad
;

19 
idå_t
 
	gidå
 = {

20 (
idt
) - 1,

21 (
uöt64_t
)
idt
,

24 
_x86_64_asm_lidt
(
idå_t
* 
idå
);

26 
	$Áu…_h™dÀr
(
ªgs
 *
r
)

29 * 
Áu…ög_ö°ru˘i⁄
;

30 
uöt16_t
 
ˇŒNo
;

31 c⁄° * 
°r
;

32 sig√d 
vÆ
=1;

33 
ªgs
 
ãmp_r
;

34 
ªgs
 *
±emp_r
 = &
ãmp_r
;

37 
asm
 vﬁ©ûe("movq %%r•, %0" : "Ù" (
Áu…ög_ö°ru˘i⁄
));

38 i‡(
r
->
ötNo
 <= 0x80){

39 
r
->
ötNo
){

40 0xE: 
	`∑ge_Áu…_h™dÀr
(
r
->
îrCode
,
Áu…ög_ö°ru˘i⁄
);

42 0xD: 
	`gíîÆ_¥Ÿe˘i⁄_Áu…_h™dÀr
(
r
->
îrCode
);

44 0x80:
ˇŒNo
 = 
r
->
øx
;

45 
ˇŒNo
){

47 
	`sys_exô
();

50 
°r
 = (c⁄° *)
r
->
rdi
;

51 
	`wrôe
(
°r
);

54 
ãmp_r
.
øx
 = 
r
->rax;

55 
ãmp_r
.
rbx
 = 
r
->rbx;

56 
ãmp_r
.
rcx
 = 
r
->rcx;

57 
ãmp_r
.
rdx
 = 
r
->rdx;

58 
ãmp_r
.
rsi
 = 
r
->rsi;

59 
ãmp_r
.
rdi
 = 
r
->rdi;

60 
ãmp_r
.
rbp
 = 
r
->rbp;

61 
ãmp_r
.
r8
 = 
r
->r8;

62 
ãmp_r
.
r9
 = 
r
->r9;

63 
ãmp_r
.
r10
 = 
r
->r10;

64 
ãmp_r
.
r11
 = 
r
->r11;

65 
ãmp_r
.
r12
 = 
r
->r12;

66 
ãmp_r
.
r13
 = 
r
->r13;

67 
ãmp_r
.
r14
 = 
r
->r14;

68 
ãmp_r
.
r15
 = 
r
->r15;

69 
ãmp_r
.
rù
 = 
r
->rip;

70 
ãmp_r
.
cs
 = 
r
->cs;

71 
ãmp_r
.
rÊags
 = 
r
->rflags;

72 
ãmp_r
.
r•
 = 
r
->rsp;

73 
ãmp_r
.
ss
 = 
r
->ss;

74 
ãmp_r
.
ötNo
 = 
r
->intNo;

75 
ãmp_r
.
îrCode
 = 
r
->errCode;

76 
	`f‹k
(
±emp_r
);

77 
vÆ
 = 0;

81 
	`¶ìp
(
r
->
rdi
);

84 
vÆ
 = -1;

85 
vÆ
 = 
	`d‹ód
((*)
r
->
rdi
);

88 6: 
	`waô
();

91 
vÆ
 = -1;

92 
vÆ
 = 
	`do_execve
((*)
r
->
rdi
);

95 8: 
	`¥öt_¥o˚ss
();

97 9: 
	`do_˛s
();

100 
vÆ
 = 
	`sys_gëpid
();

104 : 
	`wrôe_°rög
(0x1F," Unknown Exception. System Halted!\n");

110  
vÆ
;

111 
	}
}

113 
	$idt_£t_g©e
(
numbî
, 
uöt64_t
 
ba£
, 
uöt16_t
 
£À˘‹
, 
Êags
) {

117 
idt
[
numbî
].
ba£Low
 = 
ba£
 & 0xFFFF;

118 
idt
[
numbî
].
ba£Mid
 = (
ba£
 >> 16) & 0xFFFF;

119 
idt
[
numbî
].
ba£High
 = (
ba£
 >> 32) & 0xFFFFFFFF;

122 
idt
[
numbî
].
£À˘‹
 = selector;

123 
idt
[
numbî
].
Êags
 = flags;

126 
idt
[
numbî
].
ª£rvedI°
 = 0;

127 
idt
[
numbî
].
ª£rved
 = 0;

128 
	}
}

130 
	$x86_64_asm_…r
(){

131 
uöt16_t
 
vÆ
 = 0x2B;

132 
	`_x86_64_asm_…r
(&
vÆ
);

133 
	}
}

135 
	$ªlﬂd_idt
() {

137 
	`mem£t
(&
idt
, 0, (
idtE¡ry
) * 256);

138 
	`idt_£t_g©e
(0, (
uöt64_t
)
_i§0
, 0x08, 0x8E);

139 
	`idt_£t_g©e
(1, (
uöt64_t
)
_i§1
, 0x08, 0x8E);

140 
	`idt_£t_g©e
(0xD, (
uöt64_t
)
_i§13
, 0x08, 0x8E);

141 
	`idt_£t_g©e
(0xE, (
uöt64_t
)
_i§14
, 0x08, 0x8E);

142 
	`idt_£t_g©e
(0x80, (
uöt64_t
)
_i§80
, 0x08, 0xEE);

143 
	`_x86_64_asm_lidt
(&
idå
);

144 
	`x86_64_asm_…r
();

145 
	}
}

	@sys/idt.s

1 .
	gãxt


4 #lﬂd 
a
 
√w
 
IDT


5 #∑ømëî 1: 
addªss
 
of
 
idå


7 .
globÆ
 
_x86_64_asm_lidt


8 
	g_x86_64_asm_lidt
:

9 
lidt
 (%
rdi
)

10 
ªtq


13 .
globÆ
 
_x86_64_asm_…r


14 
_x86_64_asm_…r
:

15 
…r
 (%
rdi
)

16 
ªtq


	@sys/irq.c

1 
	~<io.h
>

2 
	~<defs.h
>

3 
	~<sys/idt.h
>

5 
_úq0
();

6 
_úq1
();

7 
_úq2
();

8 
_úq3
();

9 
_úq4
();

10 
_úq5
();

11 
_úq6
();

12 
_úq7
();

13 
_úq8
();

14 
_úq9
();

15 
_úq10
();

16 
_úq11
();

17 
_úq12
();

18 
_úq13
();

19 
_úq14
();

20 
_úq15
();

22 
idt_£t_g©e
(, 
uöt64_t
, 
uöt16_t
, );

26 *
	gúq_routöes
[16] =

33 
úq_ö°Æl_h™dÀr
(
úq
, (*
h™dÀr
)(
ªgs
 *
r
)){

34 
úq_routöes
[
úq
] = 
h™dÀr
;

35 
	}
}

38 
	$úq_unö°Æl_h™dÀr
(
úq
){

39 
úq_routöes
[
úq
] = 0;

40 
	}
}

59 
	$úq_ªm≠
(){

70 
	`outb
(0x20, 0x11);

71 
	`outb
(0xA0, 0x11);

79 
	`outb
(0x21, 0x20);

80 
	`outb
(0xA1, 0x28);

91 
	`outb
(0x21, 0x04);

92 
	`outb
(0xA1, 0x02);

100 
	`outb
(0x21, 0x01);

101 
	`outb
(0xA1, 0x01);

106 
	`outb
(0x21, 0x0);

107 
	`outb
(0xA1, 0x0);

110 
	}
}

115 
	$úq_ö°Æl
()

117 
	`úq_ªm≠
();

119 
	`idt_£t_g©e
(32, (
uöt64_t
)
_úq0
, 0x08, 0x8E);

120 
	`idt_£t_g©e
(33, (
uöt64_t
)
_úq1
, 0x08, 0x8E);

121 
	`idt_£t_g©e
(34, (
uöt64_t
)
_úq2
, 0x08, 0x8E);

122 
	`idt_£t_g©e
(35, (
uöt64_t
)
_úq3
, 0x08, 0x8E);

123 
	`idt_£t_g©e
(36, (
uöt64_t
)
_úq4
, 0x08, 0x8E);

124 
	`idt_£t_g©e
(37, (
uöt64_t
)
_úq5
, 0x08, 0x8E);

125 
	`idt_£t_g©e
(38, (
uöt64_t
)
_úq6
, 0x08, 0x8E);

126 
	`idt_£t_g©e
(39, (
uöt64_t
)
_úq7
, 0x08, 0x8E);

127 
	`idt_£t_g©e
(40, (
uöt64_t
)
_úq8
, 0x08, 0x8E);

128 
	`idt_£t_g©e
(41, (
uöt64_t
)
_úq9
, 0x08, 0x8E);

129 
	`idt_£t_g©e
(42, (
uöt64_t
)
_úq10
, 0x08, 0x8E);

130 
	`idt_£t_g©e
(43, (
uöt64_t
)
_úq11
, 0x08, 0x8E);

131 
	`idt_£t_g©e
(44, (
uöt64_t
)
_úq12
, 0x08, 0x8E);

132 
	`idt_£t_g©e
(45, (
uöt64_t
)
_úq13
, 0x08, 0x8E);

133 
	`idt_£t_g©e
(46, (
uöt64_t
)
_úq14
, 0x08, 0x8E);

134 
	`idt_£t_g©e
(47, (
uöt64_t
)
_úq15
, 0x08, 0x8E);

135 
	}
}

137 
	$úq_h™dÀr
(
ªgs
 *
r
)

140 (*
h™dÀr
)(
ªgs
 *
r
);

149 
h™dÀr
 = 
úq_routöes
[
r
->
ötNo
 - 0x32];

150 i‡(
h™dÀr
){

151 
	`h™dÀr
(
r
);

157 i‡(
r
->
ötNo
 >= 40){

158 
	`outb
(0xA0, 0x20);

163 
	`outb
(0x20, 0x20);

164 
	}
}

	@sys/irq.s

1 .
cuºítThªad


2 .
is_scheduÀr_⁄


3 .
ru¬abÀ_kthªad


4 .
√xt_ru¬abÀ_kthªad


5 .
tss


7 .
Æign
 8

9 .
ma¸o
 
PUSHAQ


10 #Savê
ªgi°îs
 
to
 
the
 
°ack
.

12 
pushq
 %
øx
 #ßvê
cuºít
Ñax

13 
pushq
 %
rbx
 #ßvê
cuºít
Ñbx

14 
pushq
 %
rcx
 #ßvê
cuºít
Ñcx

15 
pushq
 %
rdx
 #ßvê
cuºít
Ñdx

16 
pushq
 %
rbp
 #ßvê
cuºít
Ñbp

17 
pushq
 %
rdi
 #ßvê
cuºít
Ñdi

18 
pushq
 %
rsi
 #ßvê
cuºít
Ñsi

19 
pushq
 %
r8
 #ßvê
cuºít
Ñ8

20 
pushq
 %
r9
 #ßvê
cuºít
Ñ9

21 
pushq
 %
r10
 #ßvê
cuºít
Ñ10

22 
pushq
 %
r11
 #ßvê
cuºít
Ñ11

23 
pushq
 %
r12
 #ßvê
cuºít
Ñ12

24 
pushq
 %
r13
 #ßvê
cuºít
Ñ13

25 
pushq
 %
r14
 #ßvê
cuºít
Ñ14

26 
pushq
 %
r15
 #ßvê
cuºít
Ñ15

28 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


30 .
Æign
 8

32 .
ma¸o
 
POPAQ


33 #Re°‹ê
ªgi°îs
 
‰om
 
the
 
°ack
.

35 
p›q
 %
r15
 #ª°‹ê
cuºít
Ñ15

36 
p›q
 %
r14
 #ª°‹ê
cuºít
Ñ14

37 
p›q
 %
r13
 #ª°‹ê
cuºít
Ñ13

38 
p›q
 %
r12
 #ª°‹ê
cuºít
Ñ12

39 
p›q
 %
r11
 #ª°‹ê
cuºít
Ñ11

40 
p›q
 %
r10
 #ª°‹ê
cuºít
Ñ10

41 
p›q
 %
r9
 #ª°‹ê
cuºít
Ñ9

42 
p›q
 %
r8
 #ª°‹ê
cuºít
Ñ8

43 
p›q
 %
rsi
 #ª°‹ê
cuºít
Ñsi

44 
p›q
 %
rdi
 #ª°‹ê
cuºít
Ñdi

45 
p›q
 %
rbp
 #ª°‹ê
cuºít
Ñbp

46 
p›q
 %
rdx
 #ª°‹ê
cuºít
Ñdx

47 
p›q
 %
rcx
 #ª°‹ê
cuºít
Ñcx

48 
p›q
 %
rbx
 #ª°‹ê
cuºít
Ñbx

49 
p›q
 %
øx
 #ª°‹ê
cuºít
Ñax

51 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


54 .
ãxt


55 .
globÆ
 
_úq0


56 .
globÆ
 
_úq1


57 .
globÆ
 
_úq2


58 .
globÆ
 
_úq3


59 .
globÆ
 
_úq4


60 .
globÆ
 
_úq5


61 .
globÆ
 
_úq6


62 .
globÆ
 
_úq7


63 .
globÆ
 
_úq8


64 .
globÆ
 
_úq9


65 .
globÆ
 
_úq10


66 .
globÆ
 
_úq11


67 .
globÆ
 
_úq12


68 .
globÆ
 
_úq13


69 .
globÆ
 
_úq14


70 .
globÆ
 
_úq15


72 .
Áu…_h™dÀr


74 #IRQ 0: 
IDT
 32

75 
_úq0
:

76 
˛i


77 #thê
fﬁlowög
 
code
 
is
 
puª
 
debuggög
 
puΩo£


78 #I 
had
 
to
 
°›
 
©
 
gdb
 
⁄ly
 
whí
 
a
 
u£r
 
thªad
 
is
 
öãºu±ed


79 #sÿ
doög
 
the
 
addôi⁄Æ
 
push
 
™d
 
p›
 
of
Åhê
øx


80 
pushq
 %
øx


81 
cmp
 
$0x1
, (
is_scheduÀr_⁄
)

82 
j√
 .
n‹m_öãºu±1


83 
movq
 (
cuºítThªad
), %
øx


84 
cmp
 
$0x1
, 0x8(%
øx
)

85 
je
 .
n‹m_öãºu±1


86 
ã°
 %
øx
, %øx #thi†
is
 
a
 
dummy
 
ö°ru˘i⁄


87 .
n‹m_öãºu±1
:

88 
p›q
 %
øx


89 
pushq
 
$0x0
 #îr‹ 
code


90 
pushq
 
$0x32
 #idà
no


91 
jmp
 
úq_comm⁄_°ub


94 #IRQ 1: 
IDT
 33

95 
_úq1
:

96 
˛i


97 
pushq
 
$0x0
 #îr‹ 
code


98 
pushq
 
$0x33
 #idà
no


99 
jmp
 
úq_comm⁄_°ub


101 #IRQ 2: 
IDT
 34

102 
_úq2
:

103 
˛i


104 
pushq
 
$0x0
 #îr‹ 
code


105 
pushq
 
$0x34
 #idà
no


106 
jmp
 
úq_comm⁄_°ub


109 #IRQ 3: 
IDT
 35

110 
_úq3
:

111 
˛i


112 
pushq
 
$0x0
 #îr‹ 
code


113 
pushq
 
$0x35
 #idà
no


114 
jmp
 
úq_comm⁄_°ub


117 #IRQ 4: 
IDT
 36

118 
_úq4
:

119 
˛i


120 
pushq
 
$0x0
 #îr‹ 
code


121 
pushq
 
$0x36
 #idà
no


122 
jmp
 
úq_comm⁄_°ub


124 #IRQ 5: 
IDT
 37

125 
_úq5
:

126 
˛i


127 
pushq
 
$0x0
 #îr‹ 
code


128 
pushq
 
$0x37
 #idà
no


129 
jmp
 
úq_comm⁄_°ub


131 #IRQ 6: 
IDT
 38

132 
_úq6
:

133 
˛i


134 
pushq
 
$0x0
 #îr‹ 
code


135 
pushq
 
$0x38
 #idà
no


136 
jmp
 
úq_comm⁄_°ub


138 #IRQ 7: 
IDT
 39

139 
_úq7
:

140 
˛i


141 
pushq
 
$0x0
 #îr‹ 
code


142 
pushq
 
$0x39
 #idà
no


143 
jmp
 
úq_comm⁄_°ub


145 #IRQ 8: 
IDT
 40

146 
_úq8
:

147 
˛i


148 
pushq
 
$0x0
 #îr‹ 
code


149 
pushq
 
$0x40
 #idà
no


150 
jmp
 
úq_comm⁄_°ub


152 #IRQ 9: 
IDT
 41

153 
_úq9
:

154 
˛i


155 
pushq
 
$0x0
 #îr‹ 
code


156 
pushq
 
$0x41
 #idà
no


157 
jmp
 
úq_comm⁄_°ub


159 #IRQ 10: 
IDT
 42

160 
_úq10
:

161 
˛i


162 
pushq
 
$0x0
 #îr‹ 
code


163 
pushq
 
$0x42
 #idà
no


164 
jmp
 
úq_comm⁄_°ub


166 #IRQ 11: 
IDT
 43

167 
_úq11
:

168 
˛i


169 
pushq
 
$0x0
 #îr‹ 
code


170 
pushq
 
$0x43
 #idà
no


171 
jmp
 
úq_comm⁄_°ub


173 #IRQ 12: 
IDT
 44

174 
_úq12
:

175 
˛i


176 
pushq
 
$0x0
 #îr‹ 
code


177 
pushq
 
$0x44
 #idà
no


178 
jmp
 
úq_comm⁄_°ub


180 #IRQ 13: 
IDT
 45

181 
_úq13
:

182 
˛i


183 
pushq
 
$0x0
 #îr‹ 
code


184 
pushq
 
$0x45
 #idà
no


185 
jmp
 
úq_comm⁄_°ub


187 #IRQ 14: 
IDT
 46

188 
_úq14
:

189 
˛i


190 
pushq
 
$0x0
 #îr‹ 
code


191 
pushq
 
$0x46
 #idà
no


192 
jmp
 
úq_comm⁄_°ub


194 #IRQ 15 : 
IDT
 47:

195 
_úq15
:

196 
˛i


197 
pushq
 
$0x0
 #îr‹ 
code


198 
pushq
 
$0x36
 #úq 
no


199 
jmp
 
úq_comm⁄_°ub


201 .
úq_h™dÀr


203 
úq_comm⁄_°ub
:

204 
PUSHAQ


205 
movq
 %
r•
, %
rdi
 #Push 
us
 
the
 
°ack


206 
ˇŒq
 
úq_h™dÀr


207 #Gëtög 
the
 
öãºu±
 
numbî
 
we
 
pushed
. 
Off£t
 
is
 
dëîmöged
 
m™uÆly
.

208 
movq
 0x78(%
r•
), %
øx


209 #H™dÀ 
c⁄ãxt
 
swôchög
 
a
 
timî
 
öãºu±
.

210 
cmp
 
$0x32
, %
øx


211 
j√
 .
ª°‹e_ªg


212 #I‡
scheduÀr
 
is
 
nŸ
 
öôülized
 
thí
 
we
 
should
ÇŸ 
c⁄ãxt
 .

213 #is_scheduÀ_⁄ 
is
 
tu∫ed
 
⁄
 
by
 
scheduÀr_öô


214 
cmp
 
$0x1
, (
is_scheduÀr_⁄
)

215 
j√
 .
ª°‹e_ªg


217 #Decisi⁄ 
should
 
be
 
èkí
 
ba£d
 
⁄
 
u£r
 
‹
 
kî√l
 
thªad
. 
So
 
com∑rög


218 
movq
 (
cuºítThªad
), %
øx


219 
cmpq
 
$0x0
, 0x8(%
øx
)

220 
je
 .
u£r_move_r•
 #Thê
cuºít
 
thªad
 
is
 
a
 
u£r
Åhread

222 #Thi†
a˘i⁄
 
is
, 
the
 
cuºít
 
thªad
 i†
a
 
kî√l
Åhread

223 #It†
íough
 
we
 
ju°
 
move
 
the
 
°ack
 
poöãr
 
öto
Åhê"r•" 
fõld
 
of
 
kthªad


224 #movq (
cuºítThªad
), %
øx


225 #movq %
r•
, (%
øx
)

226 
Àa
 (%
r•
), %
øx


227 
movq
 (
cuºítThªad
), %
rdi


228 
movq
 %
øx
, (%
rdi
)

229 
jmp
 .
move_r•_n‹mÆ


231 #Thê
cuºít
 
thªad
 
is
 
a
 
i£r
Åhªad. 
We
 
√ed
 
to
 
w‹k
 
wôh
 
the
 
kî√l
 
°ack


232 #Wê
ˇ¡
 
wrôe
 
ö
 
the
 
u£r
 
°ack
 
beˇu£
 
⁄
 
™
 
öãºu±
,Åhê
RSP
 i¿thê
TSS
 
gës
 
lﬂded


233 #Sÿ
I
 
¸óã
 
a
 
kî√l
 
°ack
 
óch
 
u£r
 
™d
 dÿ
push
 
p›
 
⁄
 
the
 kernel's stack only.

234 #Thê
u£r
's stack is untouched

235 .
u£r_move_r•
:

236 #movq (
cuºítThªad
), %
øx


237 #movq %
r•
, 0x10(%
øx
)

238 
Àa
 (%
r•
), %
øx


239 
movq
 (
cuºítThªad
), %
rdi


240 
movq
 %
øx
, 0x10(%
rdi
)

242 #usuÆ 
›î©i⁄


243 .
move_r•_n‹mÆ
:

244 #Makê
the
 
cuºít
 
thªad
 
ru¬abÀ
. 
i
.
e
 
add
 
ô
 
to
Åhê
run
 
queue


245 
movq
 (
cuºítThªad
), %
rdi


246 
ˇŒq
 
ru¬abÀ_kthªad


247 #Gë 
the
 
√xt
 
thªad
 
which
 
is
 
to
 
tbe
 
scheduÀd
. 
WARNING
! 
It
 
ˇn
 
be
Åhê
ßme
Åhread

248 #Thê
addªss
 
of
 
the
 
ru¬abÀ
 
thªad
 
is
 
ªtu∫ed
 
ö
Åhê
RAX
 .

249 
ˇŒq
 
√xt_ru¬abÀ_kthªad


250 
cmpq
 
$0x0
, 0x8(%
øx
)

251 
j√
 .
°‹e_tss_n‹m1


252 
Àaq
 (
tss
), %
rbx


253 
Àaq
 0x4(%
rbx
), %rbx

254 
movq
 0x28(%
øx
), %
rcx


255 
movq
 %
rcx
, (%
rbx
)

258 #THE 
MAIN
 
CONTEXT
 
SWITCH


260 .
°‹e_tss_n‹m1
:

261 
movq
 %
øx
, (
cuºítThªad
)

262 #ResŸª 
the
Åhê
vÆue
 
of
 
RSP
 
which
 
was
 
°‹ed
 
bef‹e
 
c⁄ãxt
 
occuªd


263 #Agaö, 
we
 
√ed
 
com∑ris⁄
 
hîe


264 
movq
 (
cuºítThªad
), %
rbx


265 
movq
 %
¸3
, %
rcx


266 
cmpq
 %
rcx
, 0x18(%
rbx
)

267 
je
 .
n‹m_¸3


268 
movq
 0x18(%
rbx
), %
rcx


269 
movq
 %
rcx
, %
¸3


271 .
n‹m_¸3
:

272 
cmp
 
$0x0
, 0x8(%
øx
)

273 
je
 .
u£r_ch™ge_r•
 #Thê
cho£n
 
thªad
 
is
 
a
 
u£r
Åhread

275 #i‡
ô
 
comes
 
hîe
, 
thí
 
the
 
cho£n
 
thªad
 
is
 
a
 
kî√l
Åhªad. 
So
 
°ack
 
poöãr
 is

276 #obèöed 
‰om
 
the
 "r•" 
fõld
. 
i
.
e
Åhê1
°
 
membî
 
ö
Åhê
kthªad


277 
movq
 (%
øx
), %
r•


278 
jmp
 .
n‹mÆ_ch™ge_r•


280 #Thê
cho£n
 
thªad
 
is
 
a
 
u£r
Åhread

281 .
u£r_ch™ge_r•
:

282 #Wê
ª°‹e
 
the
 
°ack
 
poöãr
 
‰om
Åhê"kr•" 
fõld
 
of
Åhê
kthªad


283 
movq
 0x10(%
øx
), %
r•


285 #n‹mÆ 
›î©i⁄
. 
So
, 
hîe
 
íds
 
the
 
c⁄ãxt
 . 
Phew
!!!

286 .
n‹mÆ_ch™ge_r•
:

287 
POPAQ


288 #CÀ™ög 
the
 
öãºu±
 
numbî
 
™d
 
îr‹
 
code
 
we
 
pushed
 
durög
 
_úq0
 
ˇŒ
.

289 
add
 
$0x10
, %
r•


290 #cmpq 
$0x1
, 0x8(
cuºítThªad
)

291 #j√ .
u£r_mode


292 #movq 
$0x8
, 0x8(%
r•
)

293 
úëq


295 .
ª°‹e_ªg
:

296 
POPAQ


297 
add
 
$0x10
, %
r•
 #CÀ™†
up
 
the
 
pushed
 
îr‹
 
code
 
™d
Öushed 
ISR
 
numbî


298 
úëq
 #p›†5 
thögs
 
©
 
⁄˚
: 
CS
, 
EIP
, 
EFLAGS
, 
SS
, 
™d
 
ESP
!

	@sys/isr.c

1 
	~<defs.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<sys/kthªad.h
>

5 
	~<sys/mm/mmgr.h
>

6 
	~<sys/idt.h
>

7 
	~<°dlib.h
>

8 
	~<sys/mm≠.h
>

10 
kthªad
* 
cuºítThªad
;

11 
kthªad
* 
±abÀ
[100];

12 
uöt64_t
 
gë_¸3_ªgi°î
();

13 vﬁ©ûê
	gªadög
 = 0;

14 vﬁ©ûê
	gªadög_föished
 = 1;

15 
	giobuff
[1024];

16 * 
	gio_buff
;

17 
Thr_Queue
 
runQueue
;

19 
	$ªlﬂd_¸3
(
uöt64_t
 
p¸3
){

20 
__asm__
 
	`__vﬁ©ûe__
("movq %rdi, %cr3");

21 
	}
}

23 
	$∑ge_Áu…_h™dÀr
(
uöt64_t
 
îr_code
, * 
îr_ös
){

26 
uöt64_t
 
Áu…ög_addªss
, 
phys
, 
Áu…_∑ge
;

27 
vm_¨ó_°ru˘
 *
¸awl
;

28 
±_íåy
* 
±e
;

29 
asm
 vﬁ©ûe("mov %%¸2, %0" : "Ù" (
Áu…ög_addªss
));

31 
±e
 = 
	`gë_±e_ªcur£
(
Áu…ög_addªss
);

32 if(
cuºítThªad
->
kî√l_thªad
 == 0){

33 
¸awl
 = 
cuºítThªad
->
mm≠
;

34 
¸awl
){

35 if(((
uöt64_t
)
¸awl
->
vm_°¨t
 - 
Áu…ög_addªss
) <= 100){

36 if(
cuºítThªad
->
no_°ack_∑ges
 <= 4){

37 
cuºítThªad
->
no_°ack_∑ges
++;

38 
	`mm≠
((*)((
uöt64_t
)
cuºítThªad
->
mm≠_ˇche
->
vm_°¨t
 - 0x1000), 
VIRT_PAGE_SIZE
, 0, 0, 0, 0, currentThread);

41 
	`¥ötf
("Sèck OvîÊow! KûlögÅhê¥o˚s†%d\n",
cuºítThªad
->
pid
);

42 
cuºítThªad
->
Æive
 = 0;

44 
	`ªmove_ru¬abÀ_kthªad
(&
runQueue
, 
cuºítThªad
);

48 
¸awl
 = cøwl->
vm_√xt
;

52 if(*
±e
 & 
PTE_COW
){

53 
buf
[4096];

55 
phys
 = (
uöt64_t
)
	`mmgr_Æloc_block
();

57 
Áu…_∑ge
 = 
	`PAGE_PHYSICAL_ADDRESS
(&
Áu…ög_addªss
);

59 
	`mem˝y
(
buf
, (c⁄° *)
Áu…_∑ge
, 4096);

60 
	`vmmgr_m≠_∑ge_a·î_∑gög
((
uöt64_t
)
phys
, (uöt64_t)
Áu…ög_addªss
, 1);

61 
	`ªlﬂd_¸3
(
cuºítThªad
->
p¸3
);

63 
	`mem˝y
((*)
Áu…_∑ge
, (c⁄° *)
buf
, 4096);

71 
¥e£¡
 = !(
îr_code
 & 0x1);

72 
rw
 = 
îr_code
 & 0x2;

73 
us
 = 
îr_code
 & 0x4;

74 
ª£rved
 = 
îr_code
 & 0x8;

79 
	`¥ötf
("Page fault! ( ");

80 i‡(
¥e£¡
Ë{
	`¥ötf
("Page Not Present ");}

81 i‡(
rw
Ë{
	`¥ötf
("read-only ");}

82 i‡(
us
Ë{
	`¥ötf
("user-mode ");}

83 i‡(
ª£rved
Ë{
	`¥ötf
("reserved ");}

84 
	`¥ötf
(")át 0x");

85 
	`¥ötf
("%p",
Áu…ög_addªss
);

86 
	`¥ötf
("\n");

87 
	`¥ötf
("Fau…ög in†%p\n",((
uöt64_t
)(
îr_ös
)));

88 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"Page fault! ");

90 
	}
}

92 
	$gíîÆ_¥Ÿe˘i⁄_Áu…_h™dÀr
(
uöt64_t
 
îr_code
){

94 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"General Protection Fault! ");

95 
	}
}

97 
	$wrôe
(c⁄° * 
°r
){

98 
	`¥ötf
("%s",
°r
);

99 
	}
}

101 
	$sys_gëpid
(){

102  
cuºítThªad
->
pid
;

103 
	}
}

105 
	$sys_exô
(){

106 
pid
;

107 
kthªad
* 
k_thªad
;

113 
pid
 = 
cuºítThªad
->pid;

114 
k_thªad
 = 
±abÀ
[
pid
];

115 
	`thªad_˛ónup
(
k_thªad
);

116 
±abÀ
[
pid
] = 
NULL
;

117 
	`‰ì_pid
();

119 
	}
}

121 
	$PushU
(
kthªad
* 
k_thªad
, 
uöt64_t
 
vÆue
){

122 
k_thªad
->
kr•
 -= 0x8;

123 *((
uöt64_t
 *Ë
k_thªad
->
kr•
Ë
vÆue
;

124 
	}
}

126 
	$f‹k_öt
(
kthªad
* 
k_thªad
, 
ªgs
* 
r
){

127 
uöt64_t
 
pid
 = 
k_thªad
->pid;

128 
	`PushU
(
k_thªad
, (
uöt64_t
)0x23);

129 
	`PushU
(
k_thªad
, 
r
->
r•
);

130 
	`PushU
(
k_thªad
, 
r
->
rÊags
);

131 
	`PushU
(
k_thªad
, 
r
->
cs
);

132 
	`PushU
(
k_thªad
, 
r
->
rù
);

133 
	`PushU
(
k_thªad
, 
r
->
ötNo
);

134 
	`PushU
(
k_thªad
, 
r
->
îrCode
);

135 
	`PushU
(
k_thªad
, 
pid
);

136 
	`PushU
(
k_thªad
, 
r
->
rbx
);

137 
	`PushU
(
k_thªad
, 
r
->
rcx
);

138 
	`PushU
(
k_thªad
, 
r
->
rdx
);

139 
	`PushU
(
k_thªad
, 
r
->
rbp
);

140 
	`PushU
(
k_thªad
, 
r
->
rdi
);

141 
	`PushU
(
k_thªad
, 
r
->
rsi
);

142 
	`PushU
(
k_thªad
, 
r
->
r8
);

143 
	`PushU
(
k_thªad
, 
r
->
r9
);

144 
	`PushU
(
k_thªad
, 
r
->
r10
);

145 
	`PushU
(
k_thªad
, 
r
->
r11
);

146 
	`PushU
(
k_thªad
, 
r
->
r12
);

147 
	`PushU
(
k_thªad
, 
r
->
r13
);

148 
	`PushU
(
k_thªad
, 
r
->
r14
);

149 
	`PushU
(
k_thªad
, 
r
->
r15
);

151 
	}
}

153 
	$f‹k
(
ªgs
 *
r
){

154 
kthªad
* 
k_thªad
 = (kthªad*)
	`sub_mÆloc
((kthread),0);

155 
	`mem˝y
((*)
k_thªad
, (c⁄° *)
cuºítThªad
, (
kthªad
));

156 
k_thªad
->
pid
 = 
	`Æloc_pid
();

157 
±abÀ
[
k_thªad
->
pid
] = k_thread;

158 
k_thªad
->
k°ack
 = (*)
	`sub_mÆloc
(1,1);

159 
k_thªad
->
kr•
 = (((
uöt64_t
Ëk_thªad->
k°ack
Ë+ 2*
VIRT_PAGE_SIZE
 -0x8);

160 
k_thªad
->
k°ack
 = (*)(((
uöt64_t
Ëk_thªad->k°ackË+ 2*
VIRT_PAGE_SIZE
 - 0x8);

161 
k_thªad
->
∑ª¡
 = 
cuºítThªad
;

162 
	`f‹k_öt
(
k_thªad
, 
r
);

163 i‡–!
k_thªad
 )

164 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"No mem");

165 
k_thªad
->
¸3
 = (
uöt64_t
)
	`sub_mÆloc
(0, 1);

166 
k_thªad
->
p¸3
 = k_thªad->
¸3
 - (
uöt64_t
)0xFFFFFFFF80000000;

167 
	`˛⁄e_pgdú
(
cuºítThªad
->
¸3
, 
k_thªad
->cr3);

168 
	`c›y_∑ge_èbÀ
(
cuºítThªad
->
¸3
, 
k_thªad
->cr3, 1);

170 
	`add_to_joöQueue
(
cuºítThªad
, 
k_thªad
);

171 
	`ÆŒi°_kthªad
(
k_thªad
);

172 
	`ru¬abÀ_kthªad
(
k_thªad
);

175 
	}
}

177 
	$¶ìp
(
uöt64_t
 
time
){

178 
cuºítThªad
->
¶ìpög
 = 
time
;

179 
	}
}

181 sig√d 
	$d‹ód
(* 
buf
){

182 
__asm__
 
	`__vﬁ©ûe__
("sti");

184 if(
ªadög
 =1 || 
ªadög_föished
 == 0){

190 
ªadög
 = 1;

191 
ªadög_föished
 = 0;

192 
io_buff
 = 
iobuff
;

193 
ªadög
 == 1);

195 
	`mem˝y
(
buf
,
iobuff
, 
	`°æí
(iobuff));

196 
ªadög
 = 0;

197 
ªadög_föished
 = 1;

199 (
	`°æí
(
buf
));

200 
	}
}

202 
	$ãmp
(){

204 
	}
}

205 
	$waô
(){

206 
__asm__
 
	`__vﬁ©ûe__
("sti");

209 
	`ãmp
();

211 vﬁ©ûê
kthªad
* 
√xt
 = (vﬁ©ûêkthªad*)
cuºítThªad
->
hód
.next;

212 if(
√xt
 !
NULL
)

218 
	}
}

220 
	$do_execve
(* 
«me
){

221 * 
°¨t
 = 
	`èrfs_ªad
(
«me
);

223 if–!
°¨t
 ){

227 
	`maö_execve
(
«me
);

228 
	`ScheduÀ
();

231 
	}
}

233 
	$¥öt_¥o˚ss
(){

234 
kthªad
* 
k_thªad
;

235 
uöt16_t
 
i
;

236 * 
mode
;

237 
	`¥ötf
("Name PID Mode\n");

238 
i
=2; 
±abÀ
[i] != 0; i++){

240 
k_thªad
 = 
±abÀ
[
i
];

241 if(
k_thªad
->
kî√l_thªad
 == 1)

242 
mode
 = "Kernel";

243 if(
k_thªad
->
kî√l_thªad
 == 0)

244 
mode
 = "User";

245 
	`¥ötf
("%† %d %s\n",
k_thªad
->
«me
, k_thªad->
pid
, 
mode
);

247 
	}
}

249 
	$do_˛s
(){

250 
	`˛s
();

251 
	}
}

	@sys/isr.s

1 .
cuºítThªad


2 .
tss


3 .
is_scheduÀr_⁄


4 .
ru¬abÀ_kthªad


5 .
√xt_ru¬abÀ_kthªad


6 .
do_execve


8 .
Æign
 8

10 .
ma¸o
 
PUSHAQ


11 #Savê
ªgi°îs
 
to
 
the
 
°ack
.

13 
pushq
 %
øx
 #ßvê
cuºít
Ñax

14 
pushq
 %
rbx
 #ßvê
cuºít
Ñbx

15 
pushq
 %
rcx
 #ßvê
cuºít
Ñcx

16 
pushq
 %
rdx
 #ßvê
cuºít
Ñdx

17 
pushq
 %
rbp
 #ßvê
cuºít
Ñbp

18 
pushq
 %
rdi
 #ßvê
cuºít
Ñdi

19 
pushq
 %
rsi
 #ßvê
cuºít
Ñsi

20 
pushq
 %
r8
 #ßvê
cuºít
Ñ8

21 
pushq
 %
r9
 #ßvê
cuºít
Ñ9

22 
pushq
 %
r10
 #ßvê
cuºít
Ñ10

23 
pushq
 %
r11
 #ßvê
cuºít
Ñ11

24 
pushq
 %
r12
 #ßvê
cuºít
Ñ12

25 
pushq
 %
r13
 #ßvê
cuºít
Ñ13

26 
pushq
 %
r14
 #ßvê
cuºít
Ñ14

27 
pushq
 %
r15
 #ßvê
cuºít
Ñ15

29 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


31 .
Æign
 8

33 .
ma¸o
 
POPAQ


34 #Re°‹ê
ªgi°îs
 
‰om
 
the
 
°ack
.

36 
p›q
 %
r15
 #ª°‹ê
cuºít
Ñ15

37 
p›q
 %
r14
 #ª°‹ê
cuºít
Ñ14

38 
p›q
 %
r13
 #ª°‹ê
cuºít
Ñ13

39 
p›q
 %
r12
 #ª°‹ê
cuºít
Ñ12

40 
p›q
 %
r11
 #ª°‹ê
cuºít
Ñ11

41 
p›q
 %
r10
 #ª°‹ê
cuºít
Ñ10

42 
p›q
 %
r9
 #ª°‹ê
cuºít
Ñ9

43 
p›q
 %
r8
 #ª°‹ê
cuºít
Ñ8

44 
p›q
 %
rsi
 #ª°‹ê
cuºít
Ñsi

45 
p›q
 %
rdi
 #ª°‹ê
cuºít
Ñdi

46 
p›q
 %
rbp
 #ª°‹ê
cuºít
Ñbp

47 
p›q
 %
rdx
 #ª°‹ê
cuºít
Ñdx

48 
p›q
 %
rcx
 #ª°‹ê
cuºít
Ñcx

49 
p›q
 %
rbx
 #ª°‹ê
cuºít
Ñbx

50 
p›q
 %
øx
 #ª°‹ê
cuºít
Ñax

52 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


55 .
ãxt


56 .
globÆ
 
_i§0


57 .
globÆ
 
_i§1


58 .
globÆ
 
_i§13


59 .
globÆ
 
_i§14


60 .
globÆ
 
_i§80


61 .
Áu…_h™dÀr


62 .
sys_exô


63 .
ScheduÀ


65 #0: 
Divide
 
By
 
Zîo
 
Ex˚±i⁄


66 
_i§0
:

67 
˛i


68 
pushq
 
$0x0


69 
pushq
 
$0x0


70 
jmp
 
i§_comm⁄_°ub


72 #1: 
Debug
 
Ex˚±i⁄


73 
_i§1
:

74 
˛i


75 
pushq
 
$0x0


76 
pushq
 
$0x1


77 
jmp
 
i§_comm⁄_°ub


79 #13: 
GíîÆ
 
PrŸe˘i⁄
 
Fau…


80 
_i§13
:

81 
˛i


82 
pushq
 
$0x0


83 
pushq
 
$0xD


84 
jmp
 
i§_comm⁄_°ub


86 #14: 
Page
 
Áu…
 
ex˚±i⁄


87 
_i§14
:

88 
˛i


89 
addq
 
$0x8
, %
r•


90 
pushq
 
$0x0


91 
pushq
 
$0xE


92 
jmp
 
i§_comm⁄_°ub


94 #80: 
So·w¨e
 
I¡îru±


95 
_i§80
:

96 
˛i


97 #cmpq 
$0x7
, %
øx


98 #j√ .
exô_t


99 #ˇŒq 
do_execve


100 #ˇŒq 
ScheduÀ


102 .
exô_t
:

103 
cmpq
 
$0x1
, %
øx


104 
j√
 .
n‹mÆ2


105 
ˇŒq
 
sys_exô


106 
ˇŒq
 
ScheduÀ


107 #Codê
should
 
√vî
  
hîe


108 .
n‹mÆ2
:

109 
pushq
 
$0x0


110 
pushq
 
$0x80


111 
jmp
 
i§_comm⁄_°ub


114 
i§_comm⁄_°ub
:

115 
PUSHAQ


116 
movq
 %
r•
, %
rdi
 #Push 
us
 
the
 
°ack


117 
ˇŒq
 
Áu…_h™dÀr
 #A 
•ecül
 
ˇŒ
, 
¥e£rves
 
the
 'eip' 

119 
movq
 %
øx
, 0x70(%
r•
)

121 
cmp
 
$0x1
, (
is_scheduÀr_⁄
)

122 
j√
 .
n‹mÆ


125 
movq
 (
cuºítThªad
), %
øx


126 
cmpq
 
$0x0
, 0x8(%
øx
)

127 
je
 .
u£r_move_r•_i§
 #Thê
cuºít
 
thªad
 
is
 
a
 
u£r
Åhread

129 #Thi†
a˘i⁄
 
is
, 
the
 
cuºít
 
thªad
 i†
a
 
kî√l
Åhread

130 #It†
íough
 
we
 
ju°
 
move
 
the
 
°ack
 
poöãr
 
öto
Åhê"r•" 
fõld
 
of
 
kthªad


131 #movq (
cuºítThªad
), %
øx


132 #movq %
r•
, (%
øx
)

133 
Àa
 (%
r•
), %
øx


134 
movq
 (
cuºítThªad
), %
rdi


135 
movq
 %
øx
, (%
rdi
)

136 
jmp
 .
move_r•_n‹mÆ_i§


138 #Thê
cuºít
 
thªad
 
is
 
a
 
i£r
Åhªad. 
We
 
√ed
 
to
 
w‹k
 
wôh
 
the
 
kî√l
 
°ack


139 #Wê
ˇ¡
 
wrôe
 
ö
 
the
 
u£r
 
°ack
 
beˇu£
 
⁄
 
™
 
öãºu±
,Åhê
RSP
 i¿thê
TSS
 
gës
 
lﬂded


140 #Sÿ
I
 
¸óã
 
a
 
kî√l
 
°ack
 
óch
 
u£r
 
™d
 dÿ
push
 
p›
 
⁄
 
the
 kernel's stack only.

141 #Thê
u£r
's stack is untouched

142 .
u£r_move_r•_i§
:

143 #movq (
cuºítThªad
), %
øx


144 #movq %
r•
, 0x10(%
øx
)

145 
Àa
 (%
r•
), %
øx


146 
movq
 (
cuºítThªad
), %
rdi


147 
movq
 %
øx
, 0x10(%
rdi
)

149 #usuÆ 
›î©i⁄


150 .
move_r•_n‹mÆ_i§
:

151 #Makê
the
 
cuºít
 
thªad
 
ru¬abÀ
. 
i
.
e
 
add
 
ô
 
to
Åhê
run
 
queue


152 
movq
 (
cuºítThªad
), %
rdi


153 
ˇŒq
 
ru¬abÀ_kthªad


154 #Gë 
the
 
√xt
 
thªad
 
which
 
is
 
to
 
tbe
 
scheduÀd
. 
WARNING
! 
It
 
ˇn
 
be
Åhê
ßme
Åhread

155 #Thê
addªss
 
of
 
the
 
ru¬abÀ
 
thªad
 
is
 
ªtu∫ed
 
ö
Åhê
RAX
 .

156 
ˇŒq
 
√xt_ru¬abÀ_kthªad


157 
cmpq
 
$0x0
, 0x8(%
øx
)

158 
j√
 .
°‹e_tss_n‹m1_i§


159 
Àaq
 (
tss
), %
rbx


160 
Àaq
 0x4(%
rbx
), %rbx

161 
movq
 0x28(%
øx
), %
rcx


162 
movq
 %
rcx
, (%
rbx
)

165 #THE 
MAIN
 
CONTEXT
 
SWITCH


167 .
°‹e_tss_n‹m1_i§
:

168 
movq
 %
øx
, (
cuºítThªad
)

169 #ResŸª 
the
Åhê
vÆue
 
of
 
RSP
 
which
 
was
 
°‹ed
 
bef‹e
 
c⁄ãxt
 
occuªd


170 #Agaö, 
we
 
√ed
 
com∑ris⁄
 
hîe


171 
movq
 (
cuºítThªad
), %
rbx


172 
movq
 %
¸3
, %
rcx


173 
cmpq
 %
rcx
, 0x18(%
rbx
)

174 
je
 .
n‹m_¸3_i§


175 
movq
 0x18(%
rbx
), %
rcx


176 
movq
 %
rcx
, %
¸3


178 .
n‹m_¸3_i§
:

179 
cmp
 
$0x0
, 0x8(%
øx
)

180 
je
 .
u£r_ch™ge_r•
 #Thê
cho£n
 
thªad
 
is
 
a
 
u£r
Åhread

182 #i‡
ô
 
comes
 
hîe
, 
thí
 
the
 
cho£n
 
thªad
 
is
 
a
 
kî√l
Åhªad. 
So
 
°ack
 
poöãr
 is

183 #obèöed 
‰om
 
the
 "r•" 
fõld
. 
i
.
e
Åhê1
°
 
membî
 
ö
Åhê
kthªad


184 
movq
 (%
øx
), %
r•


185 
jmp
 .
n‹mÆ_ch™ge_r•_i§


187 #Thê
cho£n
 
thªad
 
is
 
a
 
u£r
Åhread

188 .
u£r_ch™ge_r•
:

189 #Wê
ª°‹e
 
the
 
°ack
 
poöãr
 
‰om
Åhê"kr•" 
fõld
 
of
Åhê
kthªad


190 
movq
 0x10(%
øx
), %
r•


192 #n‹mÆ 
›î©i⁄
. 
So
, 
hîe
 
íds
 
the
 
c⁄ãxt
 . 
Phew
!!!

193 .
n‹mÆ_ch™ge_r•_i§
:

194 
POPAQ


195 
add
 
$0x10
, %
r•


196 
úëq


198 .
n‹mÆ
:

199 
POPAQ


200 
add
 
$0x10
,%
r•
 #CÀ™†
up
 
the
 
pushed
 
îr‹
 
code
 
™d
Öushed 
ISR
 
numbî


201 
úëq
 #p›†5 
thögs
 
©
 
⁄˚
: 
CS
, 
EIP
, 
EFLAGS
, 
SS
, 
™d
 
ESP
!

	@sys/kb.c

1 
	~<sys/kb.h
>

2 
	~<sys/idt.h
>

3 
	~<°dio.h
>

5 
boﬁ
 
	g_shi·
, 
	g_˘æ
, 
	g_ˇps
, 
	g_Æt
;

6 
úq_ö°Æl_h™dÀr
(, *);

7 
keycode_to_ascii
(
uöt8_t
);

8 
ªadög
;

9 * 
io_buff
;

11 
	gsˇn_code
[] = {

14 
KEY_UNKNOWN
,

15 
KEY_ESCAPE
,

16 
KEY_1
,

17 
KEY_2
,

18 
KEY_3
,

19 
KEY_4
,

20 
KEY_5
,

21 
KEY_6
,

22 
KEY_7
,

23 
KEY_8
,

24 
KEY_9
,

25 
KEY_0
,

26 
KEY_MINUS
,

27 
KEY_EQUAL
,

28 
KEY_BACKSPACE
,

29 
KEY_TAB
,

30 
KEY_Q
,

31 
KEY_W
,

32 
KEY_E
,

33 
KEY_R
,

34 
KEY_T
,

35 
KEY_Y
,

36 
KEY_U
,

37 
KEY_I
,

38 
KEY_O
,

39 
KEY_P
,

40 
KEY_LEFTBRACKET
,

41 
KEY_RIGHTBRACKET
,

42 
KEY_RETURN
,

43 
KEY_LCTRL
,

44 
KEY_A
,

45 
KEY_S
,

46 
KEY_D
,

47 
KEY_F
,

48 
KEY_G
,

49 
KEY_H
,

50 
KEY_J
,

51 
KEY_K
,

52 
KEY_L
,

53 
KEY_SEMICOLON
,

54 
KEY_QUOTE
,

55 
KEY_GRAVE
,

56 
KEY_LSHIFT
,

57 
KEY_BACKSLASH
,

58 
KEY_Z
,

59 
KEY_X
,

60 
KEY_C
,

61 
KEY_V
,

62 
KEY_B
,

63 
KEY_N
,

64 
KEY_M
,

65 
KEY_COMMA
,

66 
KEY_DOT
,

67 
KEY_SLASH
,

68 
KEY_RSHIFT
,

69 
KEY_KP_ASTERISK
,

70 
KEY_RALT
,

71 
KEY_SPACE
,

72 
KEY_CAPSLOCK
,

73 
KEY_F1
,

74 
KEY_F2
,

75 
KEY_F3
,

76 
KEY_F4
,

77 
KEY_F5
,

78 
KEY_F6
,

79 
KEY_F7
,

80 
KEY_F8
,

81 
KEY_F9
,

82 
KEY_F10
,

83 
KEY_KP_NUMLOCK
,

84 
KEY_SCROLLLOCK
,

85 
KEY_HOME
,

86 
KEY_KP_8
,

87 
KEY_PAGEUP
,

88 
KEY_KP_2
,

89 
KEY_KP_3
,

90 
KEY_KP_0
,

91 
KEY_KP_DECIMAL
,

92 
KEY_UNKNOWN
,

93 
KEY_UNKNOWN
,

94 
KEY_UNKNOWN
,

95 
KEY_F11
,

96 
KEY_F12


100 
uöt8_t
 
	$kybrd_˘æ_ªad_°©us
() {

101  
	`öb
 (
KYBRD_CTRL_STATS_REG
);

102 
	}
}

109 
	$kybrd_˘æ_£nd_cmd
(
uöt8_t
 
cmd
) {

112 i‡–(
	`kybrd_˘æ_ªad_°©us
(Ë& 
KYBRD_CTRL_STATS_MASK_IN_BUF
) == 0)

115 
	`outb
 (
KYBRD_CTRL_CMD_REG
, 
cmd
);

116 
	}
}

119 
uöt8_t
 
	$keybrd_íc_ªad_buf
() {

120  
	`öb
 (
KYBRD_ENC_INPUT_BUF
);

121 
	}
}

124 
	$kybrd_íc_£nd_cmd
 (
uöt8_t
 
cmd
) {

127 i‡–(
	`kybrd_˘æ_ªad_°©us
(Ë& 
KYBRD_CTRL_STATS_MASK_IN_BUF
) == 0)

130 
	`outb
 (
KYBRD_ENC_CMD_REG
, 
cmd
);

131 
	}
}

134 
	$keybﬂrd_h™dÀr
(
ªgs
 *
r
){

135 
uöt8_t
 
sˇncode
;

136 
KEYCODE
 
key
;

139 i‡(
	`kybrd_˘æ_ªad_°©us
(Ë& 
KYBRD_CTRL_STATS_MASK_OUT_BUF
) {

141 
sˇncode
 = 
	`keybrd_íc_ªad_buf
();

142 
key
 = 
sˇn_code
[
sˇncode
];

144 if(
sˇncode
 == 0xE0 || scancode == 0xE1){}

147 if(
sˇncode
 & 0x80){

150 
sˇncode
 -= 0x80;

151 
key
 = 
sˇn_code
[
sˇncode
];

152 
key
){

153 
KEY_LCTRL
:

154 
KEY_RCTRL
:

155 
_˘æ
 = 
FALSE
;

158 
KEY_LSHIFT
:

159 
KEY_RSHIFT
:

160 
_shi·
 = 
FALSE
;

163 
KEY_LALT
:

164 
KEY_RALT
:

165 
_Æt
 = 
FALSE
;

174 
key
 = 
sˇn_code
[
sˇncode
];

176 
key
){

177 
KEY_LCTRL
:

178 
KEY_RCTRL
:

179 
_˘æ
 = 
TRUE
;

182 
KEY_LSHIFT
:

183 
KEY_RSHIFT
:

184 
_shi·
 = 
TRUE
;

187 
KEY_LALT
:

188 
KEY_RALT
:

189 
_Æt
 = 
TRUE
;

194 
KEY_CAPSLOCK
:

195 
_ˇps
 = (_ˇpsË? 
FALSE
 : 
TRUE
;

198 
	`wrôe_ch¨
(
TEXT_COLOR
,
	`keycode_to_ascii
(
key
));

199 if(
ªadög
){

201 
	`wrôe_io_buff
(
	`keycode_to_ascii
(
key
));

209 
	}
}

211 
	$keycode_to_ascii
(
uöt8_t
 
code
){

212 
KEYCODE
 
key
 = 
code
;

214 if(
_shi·
 || 
_ˇps
){

215 if(
key
 >= 'a' && key <= 'z')

216 
key
 -= 32;

217 if(
key
 >= '0' && key <= '9'){

218 
key
){

220 
key
 = 
KEY_RIGHTPARENTHESIS
;

223 
key
 = 
KEY_EXCLAMATION
;

226 
key
 = 
KEY_AT
;

229 
key
 = 
KEY_HASH
;

232 
key
 = 
KEY_DOLLAR
;

235 
key
 = 
KEY_PERCENT
;

238 
key
 = 
KEY_CARRET
;

241 
key
 = 
KEY_AMPERSAND
;

244 
key
 = 
KEY_ASTERISK
;

247 
key
 = 
KEY_LEFTPARENTHESIS
;

254 
key
){

255 
KEY_COMMA
:

256 
key
 = 
KEY_LESS
;

258 
KEY_DOT
:

259 
key
 = 
KEY_GREATER
;

261 
KEY_SLASH
:

262 
key
 = 
KEY_QUESTION
;

264 
KEY_SEMICOLON
:

265 
key
 = 
KEY_COLON
;

267 
KEY_QUOTE
:

268 
key
 = 
KEY_QUOTEDOUBLE
;

270 
KEY_LEFTBRACKET
:

271 
key
 = 
KEY_LEFTCURL
;

273 
KEY_RIGHTBRACKET
:

274 
key
 = 
KEY_RIGHTCURL
;

276 
KEY_MINUS
:

277 
key
 = 
KEY_UNDERSCORE
;

279 
KEY_PLUS
:

280 
key
 = 
KEY_EQUAL
;

282 
KEY_BACKSLASH
:

283 
key
 = 
KEY_BAR
;

290  
key
;

291 
	}
}

293 
	$keybﬂrd_ö°Æl
(){

294 
	`úq_ö°Æl_h™dÀr
(1, 
keybﬂrd_h™dÀr
);

295 
	}
}

	@sys/kthread.c

1 
	~<defs.h
>

2 
	~<sys/kthªad.h
>

3 
	~<sys/mm/vmmgr_vútuÆ.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
uöt64_t
 
	gKERN_CS
=0x8;

8 
uöt64_t
 
	gKERN_DS
=0x10;

9 
uöt64_t
 
	gUSER_DS
=0x23;

10 
uöt64_t
 
	gUSER_CS
=0x1B;

11 
Swôch_To_Thªad
(
kthªad
*);

12 
uöt64_t
 
gë_Êag_ªgi°î
();

13 * 
°ack
;

14 
°¨t
(
uöt16_t
);

15 
boﬁ
 
is_scheduÀr_⁄
;

16 
uöt64_t
 
kî√l_pgd
;

18 
	g√xtFªePid
 = 0;

19 
kthªad
* 
	g±abÀ
[100];

21 
	$add_to_±abÀ
(
kthªad
* 
k_thªad
){

22 
±abÀ
[
k_thªad
->
pid
] = k_thread;

23 
	}
}

28 
globÆ_thªad_li°
 
	gÆlThªadLi°
;

33 
Thr_Queue
 
	grunQueue
;

38 
kthªad
* 
	gcuºítThªad
;

40 
	gdebug
;

42 
	$dißbÀ_öãºu±s
(){

43 
__asm__
 
	`__vﬁ©ûe__
 ("cli");

44 
	}
}

46 
	$íabÀ_öãºu±s
(){

47 
__asm__
 
	`__vﬁ©ûe__
 ("sti");

48 
	}
}

50 
	$Æloc_pid
(){

51 
√xtFªePid
++;

52  
√xtFªePid
;

53 
	}
}

55 
	$‰ì_pid
(){

56 
√xtFªePid
--;

57 
	}
}

62 
	$≠≥nd_run_queue
(
Thr_Queue
 *
li°På
, 
kthªad
 *
nodePå
) {

68 
nodePå
->
√xt_ö_ThªadQ
 = 0;

69 i‡(
li°På
->
èû
 == 0) {

70 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
;

71 
nodePå
->
¥ev_ö_ThªadQ
 = 0;

74 
li°På
->
èû
->
√xt_ö_ThªadQ
 = 
nodePå
;

75 
nodePå
->
¥ev_ö_ThªadQ
 = 
li°På
->
èû
;

76 
li°På
->
èû
 = 
nodePå
;

78 
	}
}

80 
	$ö£π_run_queue
(
Thr_Queue
 *
li°På
, 
kthªad
 *
nodePå
) {

81 
nodePå
->
¥ev_ö_ThªadQ
 = 0;

82 i‡(
li°På
->
hód
 == 0) {

83 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
;

84 
nodePå
->
√xt_ö_ThªadQ
 = 0;

86 
li°På
->
hód
->
¥ev_ö_ThªadQ
 = 
nodePå
;

87 
nodePå
->
√xt_ö_ThªadQ
 = 
li°På
->
hód
;

88 
li°På
->
hód
 = 
nodePå
;

90 
	}
}

92 
	$≠≥nd_globÆ_li°_queue
(
globÆ_thªad_li°
 *
li°På
, 
kthªad
 *
nodePå
) {

93 
nodePå
->
√xt_ö_ThªadLi°
 = 0;

94 i‡(
li°På
->
èû
 == 0) {

95 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
;

96 
nodePå
->
¥ev_ö_ThªadLi°
 = 0;

99 
li°På
->
èû
->
√xt_ö_ThªadLi°
 = 
nodePå
;

100 
nodePå
->
¥ev_ö_ThªadLi°
 = 
li°På
->
èû
;

101 
li°På
->
èû
 = 
nodePå
;

103 
	}
}

105 
	$ö£π_globÆ_li°_queue
(
globÆ_thªad_li°
 *
li°På
, 
kthªad
 *
nodePå
) {

106 
nodePå
->
¥ev_ö_ThªadLi°
 = 0;

107 i‡(
li°På
->
hód
 == 0) {

108 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
;

109 
nodePå
->
√xt_ö_ThªadLi°
 = 0;

111 
li°På
->
hód
->
¥ev_ö_ThªadLi°
 = 
nodePå
;

112 
nodePå
->
√xt_ö_ThªadLi°
 = 
li°På
->
hód
;

113 
li°På
->
hód
 = 
nodePå
;

115 
	}
}

118 
	$≠≥nd_joö_queue
(
kthªad
 *
nodePå
, kthªad *
˘hªad
) {

136 
joöQ
 *
¸awl
,*
ãmp
;

137 
¸awl
 = &(
˘hªad
->
hód
);

138 
ãmp
 = (
joöQ
*)
	`sub_mÆloc
((joinQ),0);

139 
ãmp
->
chûd
 = 
nodePå
;

140 
ãmp
->
√xt
 = 
NULL
;

141 
¸awl
->
√xt
){

142 
¸awl
 = cøwl->
√xt
;

144 
¸awl
->
√xt
 = 
ãmp
;

145 
	}
}

147 
	$add_to_joöQueue
(
kthªad
* 
cuºítThªad
, kthªad* 
k_thªad
){

148 
	`≠≥nd_joö_queue
(
k_thªad
, 
cuºítThªad
);

149 
	}
}

155 
	$ªmove_ÆŒi°_kthªad
(
globÆ_thªad_li°
* 
Æl_queue
, 
kthªad
* 
ru¬abÀ
){

156 if(
ru¬abÀ
->
¥ev_ö_ThªadLi°
 != 0)

157 
ru¬abÀ
->
¥ev_ö_ThªadLi°
->
√xt_ö_ThªadLi°
 =Ñunnable->next_in_ThreadList;

159 
Æl_queue
->
hód
 = 
ru¬abÀ
->
√xt_ö_ThªadLi°
;

161 if(
ru¬abÀ
->
√xt_ö_ThªadLi°
 != 0)

162 
ru¬abÀ
->
√xt_ö_ThªadLi°
->
¥ev_ö_ThªadLi°
 =Ñunnable->prev_in_ThreadList;

164 
Æl_queue
->
èû
 = 
ru¬abÀ
->
¥ev_ö_ThªadLi°
;

165 
	}
}

171 
	$ªmove_ru¬abÀ_kthªad
(
Thr_Queue
* 
run_queue
, 
kthªad
* 
ru¬abÀ
){

172 if(
ru¬abÀ
->
¥ev_ö_ThªadQ
 != 0)

173 
ru¬abÀ
->
¥ev_ö_ThªadQ
->
√xt_ö_ThªadQ
 =Ñunnable->next_in_ThreadQ;

175 
run_queue
->
hód
 = 
ru¬abÀ
->
√xt_ö_ThªadQ
;

177 if(
ru¬abÀ
->
√xt_ö_ThªadQ
 != 0)

178 
ru¬abÀ
->
√xt_ö_ThªadQ
->
¥ev_ö_ThªadQ
 =Ñunnable->prev_in_ThreadQ;

180 
run_queue
->
èû
 = 
ru¬abÀ
->
¥ev_ö_ThªadQ
;

183 
	}
}

185 
	$ªmove_chûd
(
kthªad
* 
∑ª¡
, kthªad* 
chûd_node
){

186 
joöQ
 *
tmp
, *
¸awl
;

187 
¸awl
 = &(
∑ª¡
->
hód
);

188 
¸awl
->
√xt
){

189 if(
¸awl
->
√xt
->
chûd
 =
chûd_node
)

191 
¸awl
 = cøwl->
√xt
;

193 
tmp
 = 
¸awl
->
√xt
;

194 
¸awl
->
√xt
 = crawl->next->next;

195 
	`sub_‰ì
(
tmp
);

196 
	}
}

198 
	$thªad_˛ónup
(
kthªad
* 
k_thªad
){

199 
Thr_Queue
* 
run_queue
 = &
runQueue
;

200 
kthªad
 *
∑ª¡_node
;

201 
	`ªmove_ru¬abÀ_kthªad
(
run_queue
, 
k_thªad
);

202 
	`ªmove_ÆŒi°_kthªad
(&
ÆlThªadLi°
, 
k_thªad
);

203 
∑ª¡_node
 = 
k_thªad
->
∑ª¡
;

204 if(
∑ª¡_node
)

205 
	`ªmove_chûd
(
∑ª¡_node
, 
k_thªad
);

207 
	}
}

213 
kthªad
* 
	$√xt_ru¬abÀ_kthªad
(){

214 
Thr_Queue
* 
run_queue
 = &
runQueue
;

215 
kthªad
* 
¸awl
 = 
run_queue
->
hód
;

216 
kthªad
* 
ru¬abÀ
=0;

218 
¸awl
){

219 if((
¸awl
->
¶ìpög
 =0Ë&& cøwl->
Æive
)

221 
¸awl
 = cøwl->
√xt_ö_ThªadQ
;

223 
ru¬abÀ
 = 
¸awl
;

224 if(!
ru¬abÀ
)

225 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"NULL!!");

226 
	`ªmove_ru¬abÀ_kthªad
(
run_queue
,
ru¬abÀ
);

227  
ru¬abÀ
;

228 
	}
}

234 
	$ScheduÀ
()

236 
	`dißbÀ_öãºu±s
();

237 
kthªad
* 
ru¬abÀ
;

240 
ru¬abÀ
 = 
	`√xt_ru¬abÀ_kthªad
();

248 if(!
ru¬abÀ
)

249 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"NothingÅo schedule");

254 
	`Swôch_To_Thªad
(
ru¬abÀ
);

255 
	`íabÀ_öãºu±s
();

256 
	}
}

259 
	$Push
(
kthªad
* 
k_thªad
, 
uöt64_t
 
vÆue
)

261 
k_thªad
->
r•
 -= 0x8;

262 *((
uöt64_t
 *Ë
k_thªad
->
r•
Ë
vÆue
;

263 
	}
}

265 
	$Push_GíîÆ_Regi°îs
(
kthªad
* 
k_thªad
){

270 
	`Push
(
k_thªad
, 0);

271 
	`Push
(
k_thªad
, 0);

272 
	`Push
(
k_thªad
, 0);

273 
	`Push
(
k_thªad
, 0);

274 
	`Push
(
k_thªad
, 0);

275 
	`Push
(
k_thªad
, 0);

276 
	`Push
(
k_thªad
, 0);

277 
	`Push
(
k_thªad
, 0);

278 
	`Push
(
k_thªad
, 0);

279 
	`Push
(
k_thªad
, 0);

280 
	`Push
(
k_thªad
, 0);

281 
	`Push
(
k_thªad
, 0);

282 
	`Push
(
k_thªad
, 0);

283 
	`Push
(
k_thªad
, 0);

284 
	`Push
(
k_thªad
, 0);

286 
	}
}

292 
boﬁ
 
	$is_öãºu±_⁄
(){

293 
uöt64_t
 
rÊags
 = 
	`gë_Êag_ªgi°î
();

294  (
rÊags
 & (1<<9));

295 
	}
}

301 
	$Exô_thªad
(
uöt16_t
 
exô_code
){

302 
kthªad
* 
cuºít
 = 
cuºítThªad
;

304 if(
	`is_öãºu±_⁄
())

305 
	`dißbÀ_öãºu±s
();

307 
cuºít
->
exôCode
 = 
exô_code
;

308 
cuºít
->
Æive
 = 
FALSE
;

309 
	`ScheduÀ
();

310 
	}
}

317 
	$Launch_Thªad
()

319 
	`íabÀ_öãºu±s
();

320 
	}
}

325 
	$thªad_exô
()

327 
	`Exô_thªad
(0);

328 
	}
}

334 
	$IdÀ
(
uöt16_t
 
¨g
){

336 
TRUE
)

337 
	`Yõld
();

338 
	}
}

340 
	$Hñlo
(
uöt16_t
 
¨g
){

341 
i
=0;

342 
TRUE
){

343 
i
++;

344 if(
i
%1000 == 0)

345 
	`¥ötf
("Hello zzz");

347 
	`Yõld
();

348 
	}
}

350 
	$W‹ld
(
uöt16_t
 
¨g
){

351 
i
=0;

352 
TRUE
){

353 
i
++;

354 if(
i
%1000 == 0)

355 
	`¥ötf
("World ");

357 
	`Yõld
();

358 
	}
}

360 
	$öô_thªad_queue
(
Thr_Queue
 *
node
){

361 
node
->
hód
 =Çode->
èû
 = 
NULL
;

362 
	}
}

364 
	$Inô_Thªad
(
kthªad
* 
k_thªad
,c⁄° * 
«me
, * 
°ackPage
, 
uöt16_t
 
¥io
, 
boﬁ
 
dëached
){

365 
kthªad
* 
ow√r
 = 
dëached
 ? (kthªad*)0: 
cuºítThªad
;

366 
k_thªad
->
°ackPage
 = stackPage;

367 
k_thªad
->
r•
 = ((
uöt64_t
Ëk_thªad->
°ackPage
Ë+ 
VIRT_PAGE_SIZE
;

368 
k_thªad
->
¥i‹ôy
 = 
¥io
;

370 
k_thªad
->
ow√r
 = owner;

371 
k_thªad
->
¶ìpög
 = 0;

372 
k_thªad
->
ªfCou¡
 = 
dëached
 ? 1 : 2;

373 
k_thªad
->
kî√l_thªad
 = 1;

374 
k_thªad
->
Æive
 = 
TRUE
;

375 
k_thªad
->
no_°ack_∑ges
 = 1;

376 
k_thªad
->
«me
 =Çame;

377 
k_thªad
->
p¸3
 = 
	`gë_¸3_ªgi°î
();

378 
k_thªad
->
¸3
 = (
uöt64_t
)
kî√l_pgd
;

379 
	`öô_thªad_queue
(&(
k_thªad
->
joöQueue
));

380 
k_thªad
->
pid
 = 
	`Æloc_pid
();

381 
	}
}

394 
	$£tup_kthªad
(
kthªad
* 
k_thªad
, 
thªad_func
 
°¨tFunc
, 
uöt16_t
 
¨g
){

396 
	`Push
(
k_thªad
, 
¨g
);

398 
	`Push
(
k_thªad
, (
uöt64_t
Ë&
thªad_exô
);

400 
	`Push
(
k_thªad
, (
uöt64_t
Ë
°¨tFunc
);

417 
	`Push
(
k_thªad
, (
uöt64_t
)
KERN_DS
);

422 
	`Push
(
k_thªad
, (
uöt64_t
)(k_thªad->
r•
 + 0x8));

425 
	`Push
(
k_thªad
, (
uöt64_t
)0);

428 
	`Push
(
k_thªad
, (
uöt64_t
)
KERN_CS
);

431 
	`Push
(
k_thªad
, (
uöt64_t
Ë&
Launch_Thªad
);

439 
	`Push
(
k_thªad
, (
uöt64_t
)0);

440 
	`Push
(
k_thªad
, (
uöt64_t
)0);

446 
	`Push_GíîÆ_Regi°îs
(
k_thªad
);

448 
	}
}

455 
	$Yõld
(){

456 
	`dißbÀ_öãºu±s
();

457 
kthªad
* 
cuºít
 = 
	`Gë_Cuºít
();

458 
	`ru¬abÀ_kthªad
(
cuºít
);

459 
	`íabÀ_öãºu±s
();

460 
	`ScheduÀ
();

461 
	}
}

466 
Kî√l_Thªad
* 
	$Gë_Cuºít
()

468  
cuºítThªad
;

469 
	}
}

471 
	$ru¬abÀ_kthªad
(
kthªad
* 
k_thªad
){

472 
	`≠≥nd_run_queue
(&
runQueue
, 
k_thªad
);

473 
	}
}

475 
	$ÆŒi°_kthªad
(
kthªad
* 
k_thªad
){

476 
	`≠≥nd_globÆ_li°_queue
(&
ÆlThªadLi°
, 
k_thªad
);

477 
	}
}

480 
kthªad
* 
	$¸óã_kthªad
(c⁄° * 
«me
, 
¥io
, 
boﬁ
 
dëached
){

481 
kthªad
* 
k_thªad
;

482 * 
°ackPage
 = 0;

483 
k_thªad
 = (
kthªad
*)
	`sub_mÆloc
(0,1);

484 if–!
k_thªad
 )

485  
NULL
;

486 
°ackPage
 = (*)
	`sub_mÆloc
(0,1);

487 if–!
°ackPage
 ){

488 
	`sub_‰ì
(
°ackPage
);

489  
NULL
;

495 
	`Inô_Thªad
(
k_thªad
, 
«me
, 
°ackPage
, 
¥io
, 
dëached
);

498 
	`≠≥nd_globÆ_li°_queue
(&
ÆlThªadLi°
, 
k_thªad
);

500  
k_thªad
;

503 
	}
}

505 
	$scheduÀr_öô
(){

506 
kthªad
* 
maö_thªad
 = (kthªad*)
	`sub_mÆloc
(0,1);

507 * 
°ackPage
 = (*)
°ack
;

508 
	`Inô_Thªad
(
maö_thªad
,"maö",(*)
°ackPage
, 
PRIORITY_NORMAL
, 
TRUE
);

509 
cuºítThªad
 = 
maö_thªad
;

510 
	`≠≥nd_globÆ_li°_queue
(&
ÆlThªadLi°
, 
maö_thªad
);

512 
	`°¨t_kthªad
(
°¨t
, "Sèπ", 0, 
PRIORITY_NORMAL
, 
TRUE
);

515 
is_scheduÀr_⁄
 = 1;

516 
	`ScheduÀ
();

518 
	}
}

520 
kthªad
* 
	$°¨t_kthªad
(
thªad_func
 
°¨tFunc
, c⁄° * 
«me
, 
uöt16_t
 
¨g
, uöt16_à
¥i‹ôy
, 
boﬁ
 
dëached
){

521 
kthªad
* 
k_thªad
 = 
	`¸óã_kthªad
(
«me
, 
¥i‹ôy
, 
dëached
);

522 
	`add_to_±abÀ
(
k_thªad
);

523 if(!
k_thªad
)

524  
NULL
;

525 
	`£tup_kthªad
(
k_thªad
, 
°¨tFunc
, 
¨g
);

526 
	`dißbÀ_öãºu±s
();

527 
	`ru¬abÀ_kthªad
(
k_thªad
);

528 
	`íabÀ_öãºu±s
();

529  
k_thªad
;

530 
	}
}

	@sys/kthread.s

1 .
cuºítThªad


2 .
KERN_CS


3 .
KERN_DS


4 .
USER_CS


5 .
USER_CS


6 .
tss


8 .
Æign
 8

10 .
ma¸o
 
PUSHAQ


11 #Savê
ªgi°îs
 
to
 
the
 
°ack
.

13 
pushq
 %
øx
 #ßvê
cuºít
Ñax

14 
pushq
 %
rbx
 #ßvê
cuºít
Ñbx

15 
pushq
 %
rcx
 #ßvê
cuºít
Ñcx

16 
pushq
 %
rdx
 #ßvê
cuºít
Ñdx

17 
pushq
 %
rbp
 #ßvê
cuºít
Ñbp

18 
pushq
 %
rdi
 #ßvê
cuºít
Ñdi

19 
pushq
 %
rsi
 #ßvê
cuºít
Ñsi

20 
pushq
 %
r8
 #ßvê
cuºít
Ñ8

21 
pushq
 %
r9
 #ßvê
cuºít
Ñ9

22 
pushq
 %
r10
 #ßvê
cuºít
Ñ10

23 
pushq
 %
r11
 #ßvê
cuºít
Ñ11

24 
pushq
 %
r12
 #ßvê
cuºít
Ñ12

25 
pushq
 %
r13
 #ßvê
cuºít
Ñ13

26 
pushq
 %
r14
 #ßvê
cuºít
Ñ14

27 
pushq
 %
r15
 #ßvê
cuºít
Ñ15

29 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


31 .
Æign
 8

33 .
ma¸o
 
POPAQ


34 #Re°‹ê
ªgi°îs
 
‰om
 
the
 
°ack
.

36 
p›q
 %
r15
 #ª°‹ê
cuºít
Ñ15

37 
p›q
 %
r14
 #ª°‹ê
cuºít
Ñ14

38 
p›q
 %
r13
 #ª°‹ê
cuºít
Ñ13

39 
p›q
 %
r12
 #ª°‹ê
cuºít
Ñ12

40 
p›q
 %
r11
 #ª°‹ê
cuºít
Ñ11

41 
p›q
 %
r10
 #ª°‹ê
cuºít
Ñ10

42 
p›q
 %
r9
 #ª°‹ê
cuºít
Ñ9

43 
p›q
 %
r8
 #ª°‹ê
cuºít
Ñ8

44 
p›q
 %
rsi
 #ª°‹ê
cuºít
Ñsi

45 
p›q
 %
rdi
 #ª°‹ê
cuºít
Ñdi

46 
p›q
 %
rbp
 #ª°‹ê
cuºít
Ñbp

47 
p›q
 %
rdx
 #ª°‹ê
cuºít
Ñdx

48 
p›q
 %
rcx
 #ª°‹ê
cuºít
Ñcx

49 
p›q
 %
rbx
 #ª°‹ê
cuºít
Ñbx

50 
p›q
 %
øx
 #ª°‹ê
cuºít
Ñax

52 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


54 .
ãxt


55 .
globÆ
 
Swôch_To_Thªad


56 .
globÆ
 
gë_Êag_ªgi°î


57 .
cuºíThªad


59 #Thi†
is
 
a
 
HACK
. 
I
 
am
 
ª
-
‹deög
 
the
 
°ack
 
to
 
suµ‹t
á  
‰om


60 #IRETQ 
ö°ru˘i⁄
. 
The
 
IRETQ
 
ex≥˘s
 
the
 
°ack
 
to
 
be
 
ö
Åhê
fﬁlowög
 
Áshi⁄
.

61 #A·î 
my
 
hack
 
the
 
°ack
 
wûl
 
be
 
as
 
fﬁlows
.

67 #Thu†
whí
 
™
 
IRETQ
 
ö°ru˘i⁄
 
h≠≥ns
, 
ô
 
wûl
 
p›
 
RIP
, 
KERN_CS
, 
RFLAGS
, 
RSP
 
™d
 KERN_CS

68 #ö 
the
 
‹dî
 
which
 
was
 
míti⁄ed
.

70 
Swôch_To_Thªad
:

71 
pushq
 %
øx


72 
Àaq
 (
cuºítThªad
), %
øx


73 
movq
 (%
øx
), %rax

74 
cmpq
 
$0x0
, 0x8(%
øx
)

75 
je
 .
u£r_ds


76 
p›q
 %
øx


77 
pushq
 
KERN_DS


78 
jmp
 .
ªsume


79 .
u£r_ds
:

80 
p›q
 %
øx


81 
pushq
 
USER_DS


82 .
ªsume
:

83 
pushq
 %
r•


84 
pushq
 %
øx


85 #Thi†
gës
 
the
  
addªss
 
pushed
 
by
Åhê
CPU
 
⁄
 
ª˚ùt
 
of
 
™
 
öãºu±
.

86 #Why 
we
 
¨e
 
addög
 
by
 0x18, 
is
 
th©
, 
the
 
°ack
 
bef‹e
Åhê
fﬁlowög
 
move
 
wûl
 
be
 
as
 
fﬁlows
.

87 #Rëu∫ 
addªss
 
pushed
 
by
 
the
 
CPU


90 #RAX 
___r•
.

91 #Thus, 
addög
 0x18 
to
 
RSP
 
wûl
 
move
Åÿ
the
 RSPÅÿthê
°¨t
 
of
Åhê 
addªss
 
so
 
th©


92 #®
move
 
‰om
 
th©
 
poöt
 
wûl
 
„tch
 
the
  
addªss


93 
movq
 0x18(%
r•
), %
øx


94 #Thê
fﬁlowög
 
ö°ru˘i⁄
 
moves
 
the
  
addªss
 
to
Åhê
bŸtom
 
of
Åhê
°ack
.

95 
movq
 %
øx
, -0x10(%
r•
)

96 #Re°‹ög 
the
 
c⁄ã¡s
 
of
 
RAX


97 
movq
 %
r•
, %
øx


98 
add
 
$0x8
, %
r•


99 
pushfq


100 
pushq
 %
øx


101 
Àaq
 (
cuºítThªad
), %
øx


102 
movq
 (%
øx
), %rax

103 
cmpq
 
$0x0
, 0x8(%
øx
)

104 
je
 .
u£r_cs


105 
p›q
 %
øx


106 
pushq
 
KERN_CS


107 
jmp
 .
ªsume1


108 .
u£r_cs
:

109 
p›q
 %
øx


110 
pushq
 
USER_CS


111 .
ªsume1
:

112 
sub
 
$0x8
, %
r•


113 
pushq
 
$0x0


114 
pushq
 
$0x0


115 
PUSHAQ


116 
cmpq
 
$0x0
, 0x8(%
rdi
)

117 
j√
 .
°‹e_tss_n‹m


118 
pushq
 %
rbx


119 
Àaq
 (
tss
), %
øx


120 
Àaq
 0x4(%
øx
), %rax

121 
movq
 0x28(%
rdi
), %
rbx


122 
movq
 %
rbx
, (%
øx
)

123 
p›q
 %
rbx


124 .
°‹e_tss_n‹m
:

126 #Thi†
is
 
the
 
°ack
 
ˇ±uª
 
bef‹e
 
a
 
c⁄ãxt
 .

134 #AŒ 
the
 15 
ªgi°îs___r•


135 
movq
 (
cuºítThªad
), %
øx


136 #Savög 
the
 
RSP
 thê
r•
 
membî
 
of
Åhê
cuºít
 
thªad
's kthread structure.

137 
movq
 %
r•
, (%
øx
)

140 #THE 
CONTEXT
 
SWITCH
!!!!!!!

142 
movq
 %
rdi
 , (
cuºítThªad
)

143 
movq
 (
cuºítThªad
), %
rbx


144 
movq
 %
¸3
, %
rcx


145 
cmpq
 %
rcx
, 0x18(%
rbx
)

146 
je
 .
n‹m_¸31


147 
movq
 0x18(%
rbx
), %
rcx


148 
movq
 %
rcx
, %
¸3


150 .
n‹m_¸31
:

151 #Re°‹ög 
the
 
√w
 
thªad
's RSP (i.e where itÜeft off )

152 
movq
 (
cuºítThªad
), %
rbx


153 
cmp
 
$0x1
, 0x8(%
rbx
)

154 
je
 .
kîn_ch™ge_r•_sched


155 
movq
 0x10(%
rdi
), %
r•


156 
jmp
 .
n‹m_move_r•_sched


158 .
kîn_ch™ge_r•_sched
:

159 
movq
 (%
rdi
), %
r•


161 .
n‹m_move_r•_sched
:

162 
POPAQ


163 #CÀ™ög 
up
 
the
 
Áke
 0x0's weÖushed ( bothát setup_threadánd before context switch.

164 
add
 
$0x10
, %
r•


166 #Goög 
back
 
to
 
whîe
 
we
 
À·
 
off


168 
pushq
 %
øx


169 
movq
 0x20(%
r•
), %
øx


170 
cmpq
 
$0x40013b
, (%
øx
)

171 
j√
 .
‹d1


172 
ã°
 %
rbx
, %rbx

173 .
‹d1
:

174 
p›q
 %
øx


176 
úëq


178 
gë_Êag_ªgi°î
:

179 
pushfq


180 
p›q
 %
øx


181 
ªtq


	@sys/main.c

1 
	~<defs.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<sys/gdt.h
>

5 
	~<sys/idt.h
>

6 
	~<sys/úq.h
>

7 
	~<sys/kb.h
>

8 
	~<sys/timî.h
>

9 
	~<sys/mm/ªgi⁄s.h
>

10 
	~<sys/mm/mmgr.h
>

11 
	~<sys/mm/vmmgr_vútuÆ.h
>

12 
	~<sys/kthªad.h
>

13 
	~<ñf.h
>

14 
	~<sys/shñl.h
>

18 
	~<defs.h
>

20 
boﬁ
 
gë_∑gög_°©us
();

21 
vmmgr_∑ge_Æloˇt‹_öô
();

22 
boﬁ
 
	gis_scheduÀr_⁄
 = 0;

23 * 
	gkphys‰ì
 = 0;

24 
swôch_to_u£r
();

25 
do_exec
(*);

27 
	$hñlo_ö_u£r_mode
(){

28 
	}
}

30 
	$£t_kî√l_°ack
(
uöt64_t
 
°ack
)

32 
tss
.
r•0
 = 
°ack
;

33 
	}
}

35 
	$°¨t
(
uöt16_t
 
¨g
)

68 
	`do_exec
("bin/shell");

74 
TRUE
)

75 
	`Yõld
();

77 
	}
}

79 
	#INITIAL_STACK_SIZE
 4096

	)

80 
	g°ack
[
INITIAL_STACK_SIZE
];

81 
uöt32_t
* 
	glﬂdî_°ack
;

82 
kînmem
, 
physba£
;

83 
tss_t
 
	gtss
;

85 
	$boŸ
()

88 *
ãmp1
, *
ãmp2
;

89 
uöt32_t
* 
moduÀp
;

90 * 
phys‰ì
;

91 
	`__asm__
(

94 :"=g"(
lﬂdî_°ack
)

95 :"r"(&
°ack
[
INITIAL_STACK_SIZE
])

97 
	`£tup_tss
();

98 
	`ªlﬂd_gdt
();

99 
	`ªlﬂd_idt
();

100 
	`úq_ö°Æl
();

101 
	`timî_ö°Æl
();

102 
	`keybﬂrd_ö°Æl
();

103 
	`__asm__
("sti");

104 
moduÀp
 = (
uöt32_t
*)((*)(
uöt64_t
)
lﬂdî_°ack
[3] + (uöt64_t)&
kînmem
 - (uöt64_t)&
physba£
);

105 
phys‰ì
 = (*)(
uöt64_t
)
lﬂdî_°ack
[4];

106 
kphys‰ì
 = 
phys‰ì
;

107 
	`mm_phy_öô
(
moduÀp
);

108 
	`vmmgr_öô
();

109 
	`vmmgr_∑ge_Æloˇt‹_öô
();

110 
	`˛s
();

111 
	`scheduÀr_öô
();

118 
ãmp1
 = "!!!!! sèπ(Ëªtu∫ed !!!!!", 
ãmp2
 = (*)0xb8000;

119 *
ãmp1
;

120 
ãmp1
 +1, 
ãmp2
 += 2

121 Ë*
ãmp2
 = *
ãmp1
;

123 
	}
}

	@sys/mm/mmgr.c

1 
	~<defs.h
>

2 
	~<°dio.h
>

3 
	~<sys/mm/mmgr.h
>

4 
	~<sys/mm/ªgi⁄s.h
>

5 
	~<°dlib.h
>

14 
sm≠_t
 
	gsys_tŸÆ_mem‹y
[10];

15 
uöt64_t
 
	gtŸÆ_mem_cou¡î
 = 0;

20 
sm≠_t
 
	gsys_ußbÀ_mem‹y
[10];

21 
uöt64_t
 
	gußbÀ_mem_cou¡î
 = 0;

39 
uöt64_t
 
	gmmgr_ußbÀ_mem‹y_size
=0;

42 
uöt64_t
 
	gmmgr_u£d_blocks
=0;

45 
uöt64_t
 
	gmmgr_max_blocks
=0;

61 
uöt64_t
 
	gmmgr_mem‹y_m≠
[1200];

63 
uöt64_t
 
	$gë_tŸÆ_blocks
(){

64  
mmgr_max_blocks
;

65 
	}
}

67 
uöt64_t
 
	$gë_u£d_blocks
(){

68  
mmgr_u£d_blocks
;

69 
	}
}

71 
uöt64_t
 
	$gë_tŸÆ_ußbÀ_mem‹y
(){

72  
mmgr_ußbÀ_mem‹y_size
;

73 
	}
}

75 
uöt64_t
 
	$gë_tŸÆ_ußbÀ_blocks
(){

76  (
	`gë_tŸÆ_blocks
(Ë- 
	`gë_u£d_blocks
());

77 
	}
}

78 
	$¥öt_tŸÆ_sy°em_mem‹y
(){

79 
uöt16_t
 
i
;

80 
i
=0; i<
tŸÆ_mem_cou¡î
; i++){

81 
	`¥ötf
("Ba£ %x\tLígth %x\ây≥ %d\n",
sys_tŸÆ_mem‹y
[
i
].
ba£
,sys_tŸÆ_mem‹y[i].
Àngth
,sys_tŸÆ_mem‹y[i].
ty≥
);

83 
	}
}

86 
	$¥öt_ußbÀ_sy°em_mem‹y
(){

87 
uöt16_t
 
i
;

88 
i
=0; i<
ußbÀ_mem_cou¡î
; i++){

89 
	`¥ötf
("Ba£ %x\tLígth %x\ây≥ %d\n",
sys_ußbÀ_mem‹y
[
i
].
ba£
,sys_ußbÀ_mem‹y[i].
Àngth
,sys_ußbÀ_mem‹y[i].
ty≥
);

91 
	`¥ötf
("\n\¿TŸabÀ ußbÀ mem‹y o‡thêsy°em = %d\tTŸÆÇumbî o‡block†%d\n",
	`gë_tŸÆ_ußbÀ_mem‹y
(),
	`gë_tŸÆ_blocks
());

92 
	}
}

99 
ölöe
 
	$mmgr_£t_block
 (
bô
) {

100 
mmgr_mem‹y_m≠
[
bô
 / 64] |= (1 << (bit % 64));

101 
	}
}

107 
ölöe
 
boﬁ
 
	$mmgr_is_block_‰ì
 (
bô
) {

108  
mmgr_mem‹y_m≠
[
bô
 / 64] & (1 << (bit % 64));

109 
	}
}

114 
ölöe
 
	$mmgr_un£t_block
 (
bô
) {

115 
mmgr_mem‹y_m≠
[
bô
 / 64] &= ~ (1 << (bit % 64));

116 
	}
}

118 
	$mmgr_¥öt_mem‹y_°©us
(){

119 
	`¥ötf
("\nTŸÆ ußbÀ mem‹y = %d\n",
	`gë_tŸÆ_ußbÀ_mem‹y
());

120 
	`¥ötf
("TŸÆÇumbî o‡block†%d\n",
	`gë_tŸÆ_blocks
());

121 
	`¥ötf
("TŸÆÇumbî o‡u£d block†%d\n",
	`gë_u£d_blocks
());

122 
	`¥ötf
("TŸÆÇumbî o‡ußbÀ block†%d\n\n",
	`gë_tŸÆ_ußbÀ_blocks
());

123 
	}
}

132 
	$mmgr_gë_fú°_‰ì
(){

133 
uöt32_t
 
i
,
j
;

134 
uöt64_t
 
bô
;

135 
i
=0; i< (
	`gë_tŸÆ_blocks
() / 64); i++){

136 if(
mmgr_mem‹y_m≠
[
i
] != 0xFFFFFFFFFFFFFFFF){

137 
j
=0; j<64; j++){

138 
bô
 = 1<<
j
;

139 if–!(
mmgr_mem‹y_m≠
[
i
] & 
bô
) )

140  
i
*64 + 
j
;

145 
	}
}

148 
	$mmgr_gë_fú°_ønge_‰ì
(
size
){

149 
uöt32_t
 
i
,
j
,
cou¡
;

150 
uöt64_t
 
bô
;

151 
i
=0; i< (
	`gë_tŸÆ_blocks
() / 64); i++){

152 if(
mmgr_mem‹y_m≠
[
i
] != 0xFFFFFFFFFFFFFFFF){

153 
j
=0; j<64; j++){

154 
bô
 = 1<<
j
;

155 if(!(
mmgr_mem‹y_m≠
[
i
] & 
bô
)){

156 
uöt32_t
 
ãmp_bô
 = 
i
*64;

157 
uöt32_t
 
‰ì
 = 0;

158 
ãmp_bô
 +
j
;

159 
cou¡
=0; cou¡<
size
; count++){

160 if–!(
	`mmgr_is_block_‰ì
(
ãmp_bô
 + 
cou¡
)) )

161 
‰ì
++;

163 
j
=j+(
cou¡
);

166 if(
‰ì
 =
size
)

167  ((
i
*64)+
j
);

174 
	}
}

180 * 
	$mmgr_Æloc_block
(){

181 
uöt64_t
 
∑ge_‰ame
;

182 if(
	`gë_tŸÆ_ußbÀ_blocks
() <= 0){

183 
	`¥ötf
("Total usable blocks isÜessÅhan orÉqualÅo 0\n");

184  
NULL
;

187 
∑ge_‰ame
 = 
	`mmgr_gë_fú°_‰ì
();

189 if(
∑ge_‰ame
 == -1){

190 
	`¥ötf
("NotábleÅo findá matching frame\n");

191  
NULL
;

194 
	`mmgr_£t_block
(
∑ge_‰ame
);

195 
mmgr_u£d_blocks
++;

198  ((*)(
∑ge_‰ame
 * 
PHY_PAGE_SIZE
));

199 
	}
}

201 * 
	$mmgr_Æloc_size_blocks
(
size
){

202 
uöt64_t
 
∑ge_‰ame
;

203 
i
;

204 if(
	`gë_tŸÆ_ußbÀ_blocks
(Ë<
size
){

205 
	`¥ötf
("Total usable blocks isÜessÅhan orÉqualÅo 0\n");

206  
NULL
;

209 
∑ge_‰ame
 = 
	`mmgr_gë_fú°_ønge_‰ì
(
size
);

210 if(
∑ge_‰ame
 == -1){

211 
	`¥ötf
("NotábleÅo findá matching frame\n");

212  
NULL
;

215 
i
=0; i<
size
; i++){

216 
	`mmgr_£t_block
(
∑ge_‰ame
 + 
i
);

219 
mmgr_u£d_blocks
 +
size
;

221  ((*)(
∑ge_‰ame
 * 
PHY_PAGE_SIZE
));

222 
	}
}

225 
	$mmgr_‰ì_block
(*
p
){

226 
∑ge_‰ame
 = (((
uöt64_t
)
p
)/
BLOCK_SIZE
);

227 if(
p
 =
NULL
){

228 
	`¥ötf
("You can't freeá NULLÖointer!\n");

231 
	`mmgr_un£t_block
(
∑ge_‰ame
);

232 
mmgr_u£d_blocks
--;

234 
	}
}

236 
	$mmgr_‰ì_size_blocks
(*
p
, 
size
){

237 
∑ge_‰ame
 = (((
uöt64_t
)
p
)/
BLOCK_SIZE
);

238 
i
;

239 if(
p
 =
NULL
){

240 
	`¥ötf
("You can't freeá NULLÖointer!\n");

243 
i
=0; i<
size
; i++)

244 
	`mmgr_un£t_block
(
∑ge_‰ame
 + 
i
);

245 
mmgr_u£d_blocks
 -
size
;

247 
	}
}

254 
	$mmgr_phy_öô_ªgi⁄s
(
uöt64_t
 
ba£
, uöt64_à
Àngth
){

255 
uöt64_t
 
block_no
 = 
ba£
 / 
BLOCK_SIZE
;

256 
uöt64_t
 
blocks
 = 
Àngth
 / 
BLOCK_SIZE
;

257 ; 
blocks
>0; blocks--){

258 
	`mmgr_un£t_block
(
block_no
++);

259 
mmgr_u£d_blocks
--;

272 
	}
}

280 
	$mmgr_phy_deöô_ªgi⁄s
(
uöt64_t
 
ba£
, uöt64_à
Àngth
){

281 
uöt64_t
 
block_no
 = 
ba£
 / 
BLOCK_SIZE
;

282 
uöt64_t
 
blocks
 = 
Àngth
 / 
BLOCK_SIZE
;

283 ; 
blocks
>0; blocks--){

284 
	`mmgr_£t_block
(
block_no
++);

285 
mmgr_u£d_blocks
++;

287 
	`mmgr_£t_block
(0);

288 
	}
}

289 
	$mmgr_syncwôh_kî√l
(){

290 
uöt16_t
 
i
;

291 
i
=512; i< ((
MY_KERNEL_SIZE
*256)); i++){

292 
	`mmgr_£t_block
(
i
);

293 
mmgr_u£d_blocks
 += 1;

295 
	}
}

297 
	$mm_phy_öô
(
uöt32_t
* 
moduÀp
){

298 
sm≠_t
 *
sm≠
;

299 
uöt16_t
 
i
;

300 
moduÀp
[0] != 0x9001) modulep += modulep[1]+2;

301 
sm≠
 = (
sm≠_t
*)(
moduÀp
+2); smap < (smap_t*)((*)modulep+modulep[1]+2*4); ++smap) {

302 if(
sm≠
->
Àngth
 != 0){

303 
sys_tŸÆ_mem‹y
[
tŸÆ_mem_cou¡î
].
ba£
 = 
sm≠
->base;

304 
sys_tŸÆ_mem‹y
[
tŸÆ_mem_cou¡î
].
Àngth
 = 
sm≠
->length;

305 
sys_tŸÆ_mem‹y
[
tŸÆ_mem_cou¡î
].
ty≥
 = 
sm≠
->type;

306 if(
sm≠
->
ty≥
 =
MM_PHY_USABLE
){

307 
mmgr_ußbÀ_mem‹y_size
 +
sm≠
->
Àngth
;

308 
sys_ußbÀ_mem‹y
[
ußbÀ_mem_cou¡î
].
ba£
 = 
sm≠
->base;

309 
sys_ußbÀ_mem‹y
[
ußbÀ_mem_cou¡î
].
Àngth
 = 
sm≠
->length;

310 
sys_ußbÀ_mem‹y
[
ußbÀ_mem_cou¡î
].
ty≥
 = 
sm≠
->type;

311 
ußbÀ_mem_cou¡î
++;

313 
tŸÆ_mem_cou¡î
++;

316 
mmgr_max_blocks
 = (
mmgr_ußbÀ_mem‹y_size
/(
BLOCK_SIZE
));

317 
mmgr_u£d_blocks
 = 
mmgr_max_blocks
;

318 
mmgr_ußbÀ_mem‹y_size
 = mmgr_ußbÀ_mem‹y_size/(
MEGA_BYTE
);

321 
	`mem£t
(
mmgr_mem‹y_m≠
,0xF,((
mmgr_max_blocks
)/64));

323 
i
=0; i<
ußbÀ_mem_cou¡î
; i++){

324 
	`mmgr_phy_öô_ªgi⁄s
(
sys_ußbÀ_mem‹y
[
i
].
ba£
,sys_ußbÀ_mem‹y[i].
Àngth
);

334 
i
=0; i< 1024; i++){

335 
	`mmgr_£t_block
(
i
);

336 
mmgr_u£d_blocks
 += 1;

339 
	}
}

342 
ölöe
 
uöt16_t
 
	$mmgr_gë_block_cou¡
(){

344 
	}
}

	@sys/mm/myalloc.c

1 
	~<°dio.h
>

2 
	~<sys/mm/mmgr.h
>

3 
	~<sys/mm/vmmgr_vútuÆ.h
>

4 
	~<defs.h
>

15 
mëad©a_block
 *
	tt_block
;

17 
	smëad©a_block
{

18 
t_block
 
	m√xt
;

19 
uöt16_t
 
	msize
;

20 
uöt16_t
 
	m‰ì
;

24 
t_block
 
	gba£
 = 
NULL
;

25 
t_block
 
	gœ°
 = 
NULL
;

27 
	#Æign
(
x
) (((x-1)>>3)<<3)+8

29 

	)

30 
	#ALLOC_BLOCK_SIZE
 ((
mëad©a_block
))

31 

	)

33 
t_block
 
	$föd_block
(
t_block
 *
œ°
, 
uöt16_t
 
size
){

34 
t_block
 
b
 = 
ba£
;

35 
b
 && !(b->
‰ì
 && (b->
size
 >= size))){

36 *
œ°
 = 
b
;

37 
b
 = b->
√xt
;

39  
b
;

40 
	}
}

43 
t_block
 
	$exãnd_hóp
(
t_block
 
œ°
, 
uöt16_t
 
size
){

44 
t_block
 
b
;

45 
b
=
	`vmmgr_Æloc_∑ge
(0);

46 if(!
b
)

47 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"No memory!");

48 
b
->
size
 = 0x1000;

49 
b
->
√xt
 = 
NULL
;

50 if(
œ°
)

51 
œ°
->
√xt
 = 
b
;

52 
b
->
‰ì
 = 0;

53  (
b
);

54 
	}
}

56 
	$sub_‰ì
(* 
p
){

57 
t_block
 
b
;

58 
b
 = (
t_block
)((
uöt64_t
)
p
 - 
ALLOC_BLOCK_SIZE
);

59 
b
->
‰ì
 = 1;

60 
	}
}

62 
	$•lô_block
(
t_block
 
b
,
uöt16_t
 
size
){

63 
uöt16_t
 
tŸ_size
 = 
size
 + 
ALLOC_BLOCK_SIZE
;

64 
t_block
 
√w
;

65 
√w
 = (
t_block
)(
b
 + 1 + 
tŸ_size
/
ALLOC_BLOCK_SIZE
);

66 
√w
->
√xt
 = 
b
->next;

67 
√w
->
size
 = 
b
->sizê- 
tŸ_size
;

68 
√w
->
‰ì
 = 1;

69 
b
->
size
 = size;

70 
b
->
√xt
 = 
√w
;

72 
	}
}

75 * 
	$sub_mÆloc
(
uöt16_t
 
size
, 
boﬁ
 
Æign
){

76 
t_block
 
b
;

77 
uöt16_t
 
s
;

78 if(
Æign
){

79 * 
addr
 = (*)
	`vmmgr_Æloc_∑ge
(
size
);

80  
addr
;

83 
s
 = 
	`Æign
(
size
);

84 if(
ba£
){

85 
œ°
 = 
ba£
;

86 
b
 = 
	`föd_block
(&
œ°
,
s
);

87 if(
b
){

89 if((
b
->
size
 - 
s
Ë>(
ALLOC_BLOCK_SIZE
 + 4))

90 
	`•lô_block
(
b
,
s
);

91 
b
->
‰ì
 = 0;

95 
b
 = 
	`exãnd_hóp
(
œ°
,
s
);

96 if(!
b
)

97  
NULL
;

101 
b
 = 
	`exãnd_hóp
(
œ°
,
s
);

102 if(!
b
)

103 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"No Memory!");

104 
ba£
 = 
b
;

105 
	`•lô_block
(
b
,
s
);

107  (*)((
uöt64_t
)
b
 + 
ALLOC_BLOCK_SIZE
);

109 
	}
}

	@sys/mm/paging.c

1 
	~<defs.h
>

2 
	~<°dio.h
>

4 
boﬁ
 
	$gë_∑gög_°©us
() {

5 
uöt64_t
 
¸0
;

7 
	`__asm__
("movq %%cr0, %0;"

8 :"Ù"(
¸0
)

12  (
¸0
 & 0x80000000Ë? 
TRUE
 : 
FALSE
;

13 
	}
}

15 
uöt64_t
 
	$gë_¸0_ªgi°î
(){

16 
uöt64_t
 
¸0
;

17 
	`__asm__
("movq %%cr0, %0;"

18 :"Ù"(
¸0
)

22  
¸0
;

23 
	}
}

26 
uöt64_t
 
	$gë_¸4_ªgi°î
(){

27 
uöt64_t
 
¸4
;

28 
	`__asm__
("movq %%cr4, %0;"

29 :"Ù"(
¸4
)

33  
¸4
;

34 
	}
}

36 
uöt64_t
 
	$gë_¸3_ªgi°î
(){

37 
uöt64_t
 
¸3
;

38 
	`__asm__
("movq %%cr3, %0;"

39 :"Ù"(
¸3
)

43  
¸3
;

44 
	}
}

45 
	$pmmngr_lﬂd_PDBR
 (
uöt64_t
* 
addr
) {

53 
	}
}

	@sys/mm/paging.s

1 .
	gãxt


3 .
globÆ
 
vmmgr_lﬂd_pml4


5 
	gvmmgr_lﬂd_pml4
:

6 
movq
 %
rdi
, %
øx


7 
	gmovq
 %
	gøx
, %
¸3


8 
	gªtq


	@sys/mm/slob.c

1 
	~<°dio.h
>

2 
	~<sys/mm/mmgr.h
>

3 
	~<sys/mm/vmmgr_vútuÆ.h
>

4 
	~<defs.h
>

6 
	#SLOB_UNIT
 (
¶ob_t
)

	)

7 
	#SLOB_UNITS
(
size
Ë(((sizeË+ 
SLOB_UNIT
 - 1Ë/ SLOB_UNIT)

	)

8 
	#SLOB_ALIGN
 8

	)

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

11 
	#ALIGN
(
x
, 
a
Ë
	`__ALIGN_KERNEL
((x), (a))

	)

13 
	s¶ob_block
{

14 
	munôs
;

15 
¶ob_block
 *
	m√xt
;

17 
¶ob_block
 
	t¶ob_t
;

19 
	sbigblock
{

20 
	m‹dî
;

21 *
	m∑ges
;

22 
bigblock
 *
	m√xt
;

24 
bigblock
 
	tbigblock_t
;

26 
¶ob_t
 
	g¨ía
 = { .
√xt
 = &
¨ía
, .
	gunôs
 = 1};

27 
¶ob_t
 *
	g¶ob‰ì
 = &
¨ía
;

30 
	$¶ob_‰ì
(*
block
, 
size
){

31 
¶ob_t
* 
cur
, *
b
 = (¶ob_t*)
block
;

32 if(!
block
)

34 if(
size
)

35 
b
->
unôs
 = 
	`SLOB_UNITS
(
size
);

37 
cur
 = 
¶ob‰ì
; !((
b
 > curË&& (b < cur->
√xt
)); cur = cur->next){

38 if(
cur
 >cur->
√xt
 && (
b
 > cur || b < cur->next))

42 i‡(
b
 + b->
unôs
 =
cur
->
√xt
) {

43 
b
->
unôs
 +
cur
->
√xt
->units;

44 
b
->
√xt
 = 
cur
->next->next;

47 
b
->
√xt
 = 
cur
->next;

49 i‡(
cur
 + cur->
unôs
 =
b
) {

50 
cur
->
unôs
 +
b
->units;

51 
cur
->
√xt
 = 
b
->next;

54 
cur
->
√xt
 = 
b
;

56 
¶ob‰ì
 = 
cur
;

57 
	}
}

59 *
	$¶ob_Æloc
(
size
, 
Æign
){

60 
¶ob_t
 *
¥ev
, *
cur
, *
Æig√d
 = 0;

61 
dñè
 = 0;

62 
unôs
 = 
	`SLOB_UNITS
(
size
);

64 
¥ev
 = 
¶ob‰ì
;

65 
cur
 = 
¥ev
->
√xt
; ;Örev = cur, cur = cur->next){

66 if(
Æign
){

67 
Æig√d
 = (
¶ob_t
 *)
	`ALIGN
((
uöt64_t
)
cur
, 
Æign
);

68 
dñè
 = 
Æig√d
 - 
cur
;

70 if(
cur
->
unôs
 >unô†+ 
dñè
){

71 if(
dñè
){

72 
Æig√d
->
unôs
 = 
cur
->unô†- 
dñè
;

73 
Æig√d
->
√xt
 = 
cur
->next;

74 
cur
->
√xt
 = 
Æig√d
;

75 
cur
->
unôs
 = 
dñè
;

76 
¥ev
 = 
cur
;

77 
cur
 = 
Æig√d
;

79 if(
cur
->
unôs
 == units)

80 
¥ev
->
√xt
 = 
cur
->next;

82 
¥ev
->
√xt
 = 
cur
 + 
unôs
;

83 
¥ev
->
√xt
->
unôs
 = 
cur
->units - units;

84 
¥ev
->
√xt
->√xà
cur
->next;

85 
cur
->
unôs
 = units;

88 
¶ob‰ì
 = 
¥ev
;

89  
cur
;

91 if(
cur
 =
¶ob‰ì
){

92 if(
size
 == 4096)

94 
cur
 = (
¶ob_t
*)
	`vmmgr_Æloc_∑ge
(0);

95 
	`¶ob_‰ì
(
cur
,4096);

96 if(!
cur
)

101 
	}
}

	@sys/mm/vmmgr_page_allocator.c

1 
	~<°dio.h
>

2 
	~<defs.h
>

3 
	~<sys/mm/mmgr.h
>

4 
	#VIRT_PAGE_SIZE
 4096

	)

6 
uöt64_t
 
	gvmmgr_mem‹y_m≠
[ (
MY_KERNEL_SIZE
*1024*1024)/(4096*64*10) ];

8 
uöt64_t
 
	gvmmgr_max_blocks
=0;

9 
uöt64_t
 
	gvmmgr_u£d_blocks
=0;

10 
uöt64_t
 
	gvmmgr_ußbÀ_mem‹y_size
;

12 
uöt64_t
 
	$vmmgr_gë_tŸÆ_blocks
(){

13  
vmmgr_max_blocks
;

14 
	}
}

16 
uöt64_t
 
	$vmmgr_gë_u£d_blocks
(){

17  
vmmgr_u£d_blocks
;

18 
	}
}

20 
uöt64_t
 
	$vmmgr_gë_tŸÆ_ußbÀ_mem‹y
(){

21  
vmmgr_ußbÀ_mem‹y_size
;

22 
	}
}

24 
uöt64_t
 
	$vmmgr_gë_tŸÆ_ußbÀ_blocks
(){

25  (
	`vmmgr_gë_tŸÆ_blocks
(Ë- 
	`vmmgr_gë_u£d_blocks
());

26 
	}
}

32 
ölöe
 
	$vmmgr_£t_block
 (
bô
) {

33 
vmmgr_mem‹y_m≠
[
bô
 / 64] |= (1 << (bit % 64));

34 
	}
}

40 
ölöe
 
boﬁ
 
	$vmmgr_is_block_‰ì
 (
bô
) {

41  
vmmgr_mem‹y_m≠
[
bô
 / 64] & (1 << (bit % 64));

42 
	}
}

47 
ölöe
 
	$vmmgr_un£t_block
 (
bô
) {

48 
vmmgr_mem‹y_m≠
[
bô
 / 64] &= ~ (1 << (bit % 64));

49 
	}
}

58 
	$vmmgr_gë_fú°_‰ì
(){

59 
uöt32_t
 
i
,
j
;

60 
uöt64_t
 
bô
;

61 
i
=0; i< (
	`vmmgr_gë_tŸÆ_blocks
() / 64); i++){

62 if(
vmmgr_mem‹y_m≠
[
i
] != 0xFFFFFFFFFFFFFFFF){

63 
j
=0; j<64; j++){

64 
bô
 = 1<<
j
;

65 if–!(
vmmgr_mem‹y_m≠
[
i
] & 
bô
) )

66  
i
*64 + 
j
;

71 
	}
}

77 * 
	$vmmgr_Æloc_block
(){

78 
uöt64_t
 
∑ge_‰ame
;

79 if(
	`vmmgr_gë_tŸÆ_ußbÀ_blocks
() <= 0){

80 
	`¥ötf
("Total usable blocks isÜessÅhan orÉqualÅo 0\n");

81  
NULL
;

84 
∑ge_‰ame
 = 
	`vmmgr_gë_fú°_‰ì
();

85 if(
∑ge_‰ame
 == -1){

86 
	`¥ötf
("NotábleÅo findá matching frame\n");

87  
NULL
;

90 
	`vmmgr_£t_block
(
∑ge_‰ame
);

91 
vmmgr_u£d_blocks
++;

94  ((*)(
∑ge_‰ame
 * 
PHY_PAGE_SIZE
));

95 
	}
}

97 
	$vmmgr_‰ì_block
(*
p
){

98 
∑ge_‰ame
 = (((
uöt64_t
)
p
)/
BLOCK_SIZE
);

99 if(
p
 =
NULL
){

100 
	`¥ötf
("You can't freeá NULLÖointer!\n");

103 
	`vmmgr_un£t_block
(
∑ge_‰ame
);

104 
vmmgr_u£d_blocks
--;

106 
	}
}

108 * 
	$vmmgr_∑ge_Æloc
(){

109 * 
blk
 = 
	`vmmgr_Æloc_block
();

110  (*)((
uöt64_t
)
blk
 + 0xFFFFFFFF81400000);

111 
	}
}

113 
	$vmmgr_¥öt_°©s
(){

114 
	`¥ötf
("TŸÆ ußbÀ mem‹y sizê%d\n",
	`vmmgr_gë_tŸÆ_ußbÀ_mem‹y
());

115 
	`¥ötf
("MaxÇumbî o‡block†%d\n",
	`vmmgr_gë_tŸÆ_blocks
());

116 
	`¥ötf
("TŸÆÇumbî o‡u£d block†%d\n",
	`vmmgr_gë_u£d_blocks
());

117 
	`¥ötf
("TŸÆÇumbî o‡‰ì block†%d\n",
	`vmmgr_gë_tŸÆ_ußbÀ_blocks
());

118 
	}
}

120 
	$vmmgr_∑ge_Æloˇt‹_öô
(){

121 
uöt64_t
 
i
;

122 
i
 = 0xFFFFFFFF81400000; i < 0xFFFFFFFF82C00000; i+=
BLOCK_SIZE
)

123 
vmmgr_max_blocks
++;

124 
vmmgr_ußbÀ_mem‹y_size
 = (
vmmgr_max_blocks
 * 
VIRT_PAGE_SIZE
)/(
KILO_BYTE
*KILO_BYTE);

125 
	`vmmgr_¥öt_°©s
();

126 
	}
}

	@sys/mm/vmmgr_pde.c

1 
	~<sys/mm/vmmgr_pde.h
>

3 
ölöe
 
	$pd_íåy_add_©åib
(
pd_íåy
 *
e
, 
uöt64_t
 
©åib
){

4 *
e
 |
©åib
;

5 
	}
}

7 
ölöe
 
	$pd_íåy_dñ_©åib
(
pd_íåy
 *
e
, 
uöt64_t
 
©åib
){

8 *
e
 &(~
©åib
);

9 
	}
}

16 
ölöe
 
	$pd_íåy_£t_‰ame
(
pd_íåy
 *
e
, 
uöt64_t
 
addr
){

17 *
e
 = (*ê& ~
PDE_FRAME
Ë| 
addr
;

18 
	}
}

20 
ölöe
 
boﬁ
 
	$pd_íåy_is_¥e£¡
(
pd_íåy
 
e
){

21  ( 
e
 & 
PDE_PRESENT
 );

22 
	}
}

24 
ölöe
 
boﬁ
 
	$pd_íåy_is_wrôabÀ
(
pd_íåy
 
e
){

25  ( 
e
 & 
PDE_WRITABLE
 );

26 
	}
}

28 
ölöe
 
uöt32_t
 
	$pd_íåy_p‚
(
pd_íåy
 
e
){

29  ( 
e
 & 
PDE_FRAME
 );

30 
	}
}

32 
ölöe
 
boﬁ
 
	$pd_íåy_is_u£r
 (
pd_íåy
 
e
) {

33  
e
 & 
PDE_USER
;

34 
	}
}

36 
ölöe
 
boﬁ
 
	$pd_íåy_is_4mb
 (
pd_íåy
 
e
) {

37  
e
 & 
PDE_4MB
;

38 
	}
}

	@sys/mm/vmmgr_pdpe.c

1 
	~<sys/mm/vmmgr_pd≥.h
>

3 
ölöe
 
	$pd≥_íåy_add_©åib
(
pd≥_íåy
 *
e
, 
uöt64_t
 
©åib
){

4 *
e
 |
©åib
;

5 
	}
}

7 
ölöe
 
	$pd≥_íåy_dñ_©åib
(
pd≥_íåy
 *
e
, 
uöt64_t
 
©åib
){

8 *
e
 &(~
©åib
);

9 
	}
}

16 
ölöe
 
	$pd≥_íåy_£t_‰ame
(
pd≥_íåy
 *
e
, 
uöt64_t
 
addr
){

17 *
e
 = (*ê& ~
PDPE_FRAME
Ë| 
addr
;

18 
	}
}

20 
ölöe
 
boﬁ
 
	$pd≥_íåy_is_¥e£¡
(
pd≥_íåy
 
e
){

21  ( 
e
 & 
PDPE_PRESENT
 );

22 
	}
}

24 
ölöe
 
boﬁ
 
	$pd≥_íåy_is_wrôabÀ
(
pd≥_íåy
 
e
){

25  ( 
e
 & 
PDPE_WRITABLE
 );

26 
	}
}

28 
ölöe
 
uöt32_t
 
	$pd≥_íåy_p‚
(
pd≥_íåy
 
e
){

29  ( 
e
 & 
PDPE_FRAME
 );

30 
	}
}

32 
ölöe
 
boﬁ
 
	$pd≥_íåy_is_u£r
 (
pd≥_íåy
 
e
) {

33  ( 
e
 & 
PDPE_USER
 );

34 
	}
}

36 
ölöe
 
boﬁ
 
	$pd≥_íåy_is_4mb
 (
pd≥_íåy
 
e
) {

37  ( 
e
 & 
PDPE_4MB
 );

38 
	}
}

	@sys/mm/vmmgr_pml4.c

1 
	~<sys/mm/vmmgr_pml4.h
>

2 
	~<defs.h
>

4 
ölöe
 
	$pml4e_íåy_add_©åib
(
pml4e_íåy
 *
e
, 
uöt64_t
 
©åib
){

5 *
e
 |
©åib
;

6 
	}
}

8 
ölöe
 
	$pml4e_íåy_dñ_©åib
(
pml4e_íåy
 *
e
, 
uöt64_t
 
©åib
){

9 *
e
 &(~
©åib
);

10 
	}
}

17 
ölöe
 
	$pml4e_íåy_£t_‰ame
(
pml4e_íåy
 *
e
, 
uöt64_t
 
addr
){

18 *
e
 = (*ê& ~
PML4E_FRAME
Ë| 
addr
;

19 
	}
}

21 
ölöe
 
boﬁ
 
	$pml4e_íåy_is_¥e£¡
(
pml4e_íåy
 
e
){

22  ( 
e
 & 
PML4E_PRESENT
 );

23 
	}
}

25 
ölöe
 
boﬁ
 
	$pml4e_íåy_is_wrôabÀ
(
pml4e_íåy
 
e
){

26  ( 
e
 & 
PML4E_WRITABLE
 );

27 
	}
}

29 
ölöe
 
uöt32_t
 
	$pml4e_íåy_p‚
(
pml4e_íåy
 
e
){

30  ( 
e
 & 
PML4E_FRAME
 );

31 
	}
}

33 
ölöe
 
boﬁ
 
	$pml4e_íåy_is_u£r
 (
pml4e_íåy
 
e
) {

34  
e
 & 
PML4E_USER
;

35 
	}
}

37 
ölöe
 
boﬁ
 
	$pml4e_íåy_is_4mb
 (
pml4e_íåy
 
e
) {

38  
e
 & 
PML4E_4MB
;

39 
	}
}

	@sys/mm/vmmgr_pte.c

1 
	~<sys/mm/vmmgr_±e.h
>

3 
ölöe
 
	$±_íåy_add_©åib
(
±_íåy
 *
e
, 
uöt64_t
 
©åib
){

4 *
e
 |
©åib
;

5 
	}
}

7 
ölöe
 
	$±_íåy_dñ_©åib
(
±_íåy
 *
e
, 
uöt64_t
 
©åib
){

8 *
e
 &~
©åib
;

9 
	}
}

11 
ölöe
 
	$±_íåy_£t_‰ame
(
±_íåy
 *
e
, 
uöt64_t
 
addr
){

12 *
e
 = ((*ê& ~
PTE_FRAME
Ë| 
addr
);

13 
	}
}

15 
ölöe
 
boﬁ
 
	$±_íåy_is_¥e£¡
(
±_íåy
 
e
){

16  (
e
 & 
PTE_PRESENT
);

17 
	}
}

19 
ölöe
 
boﬁ
 
	$±_íåy_is_wrôabÀ
(
±_íåy
 
e
){

20  (
e
 & 
PTE_WRITABLE
);

21 
	}
}

23 
ölöe
 
uöt32_t
 
	$±_íåy_p‚
(
±_íåy
 
e
){

24  (
e
 & 
PTE_FRAME
);

25 
	}
}

27 
ölöe
 
boﬁ
 
	$±_íåy_is_ac˚s£d
(
±_íåy
 
e
){

28  (
e
 & 
PTE_ACCESSED
);

29 
	}
}

31 
ölöe
 
boﬁ
 
	$±_íåy_is_u£r
(
±_íåy
 
e
){

32  (
e
 & 
PTE_USER
);

33 
	}
}

35 
ölöe
 
boﬁ
 
	$±_íåy_is_dúty
(
±_íåy
 
e
){

36  (
e
 & 
PTE_DIRTY
);

37 
	}
}

	@sys/mm/vmmgr_virtual.c

1 
	~<sys/mm/vmmgr_vútuÆ.h
>

2 
	~<sys/mm/mmgr.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<defs.h
>

7 
	#RECURSIVE_ENTRY
 0xFFFFFF7FBFDFE000

	)

8 
	#RECURSIVE_PAGE_TABLE_ENTRY
 0xFFFFFF0000000000

	)

9 
	#RECURSIVE_PAGE_DIRECTORY_ENTRY
 0xFFFFFF7F80000000

	)

10 
	#RECURSIVE_PAGE_POINTER_ENTRY
 0xFFFFFF7fBFC00000

	)

12 
vmmgr_lﬂd_pml4
(
uöt64_t
);

13 
kînmem
, 
physba£
;

14 * 
kphys‰ì
;

15 
uöt64_t
 
	gbump_addr
 = 0;

16 
uöt64_t
 
	gbump_°¨t
 = 0;

17 
uöt64_t
 
	gkî√l_pgd
 = 0;

18 
uöt64_t
 
	gvút_ba£
 = 0xFFFFFFFF80000000;

19 
uöt16_t
 
	g¥ev_no_∑ges
 = 0;

21 
pde
* 
	g_cur_pde_dúe˘‹y
=0;

24 
pd≥
* 
	g_cur_pd≥_dúe˘‹y
=0;

27 
pml4
* 
	g_cur_pml4_dúe˘‹y
=0;

30 
pml4
* 
	g_cur_pml4_ba£_poöãr
=0;

32 
pml4
* 
	g_cur_pml4_ba£_poöãr_pg
=’ml4*)
RECURSIVE_ENTRY
;

41 
±_íåy
* 
	$vmmgr_±abÀ_lookup_íåy
(
±e
* 
p
, 
vútuÆ_addr
 
addr
){

42 if(
p
){

43  &(
p
->
íåy
[ 
	`PAGE_TABLE_OFFSET
(
addr
) ]);

45  
NULL
;

46 
	}
}

48 
pd_íåy
* 
	$vmmgr_∑ge_dúe˘‹y_lookup_íåy
(
pde
* 
p
, 
vútuÆ_addr
 
addr
){

49 if(
p
){

50  &(
p
->
íåy
[ 
	`PAGE_DIRECTORY_OFFSET
(
addr
) ]);

52  
NULL
;

53 
	}
}

56 
pd≥_íåy
* 
	$vmmgr_∑ge_poöãr_dúe˘‹y_lookup_íåy
(
pd≥
* 
p
, 
vútuÆ_addr
 
addr
){

57 if(
p
){

58  &(
p
->
íåy
[ 
	`PAGE_POINTER_OFFSET
(
addr
) ]);

60  
NULL
;

61 
	}
}

63 
pml4e_íåy
* 
	$vmmgr_pml4_dúe˘‹y_lookup_íåy
(
pml4
* 
p
, 
vútuÆ_addr
 
addr
){

64 if(
p
){

65  &(
p
->
íåy
[ 
	`PAGE_PML4_OFFSET
(
addr
) ]);

67  
NULL
;

68 
	}
}

70 
ölöe
 
	$vmmgr_swôch_pml4_dúe˘‹y
(
pml4
* 
p
){

71 if(!
p
){

72 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Page directoryÅo be switchedÇot found\n");

75 
_cur_pml4_dúe˘‹y
 = 
p
;

76 
	`vmmgr_lﬂd_pml4
–((
uöt64_t
)
p
 ));

77 
	}
}

79 
pml4
* 
	$vmmgr_gë_cuºít_pml4_dúe˘‹y
(){

80  
_cur_pml4_dúe˘‹y
;

81 
	}
}

83 
	$öô_bump_addr
(){

85 
bump_addr
 = (
uöt64_t
)((uöt64_t)0xFFFFFFFF80000000 + (uöt64_t)
kphys‰ì
);

86 
	}
}

87 
ölöe
 * 
	$vmmgr_Æloc_∑ge
(
uöt16_t
 
∑ge
){

88 
bump_addr
 = (bump_add∏+ 
VIRT_PAGE_SIZE
 + VIRT_PAGE_SIZE*
¥ev_no_∑ges
);

89 
¥ev_no_∑ges
 = 
∑ge
;

90  (*)
bump_addr
;

91 
	}
}

93 
ölöe
 
	$vmmgr_‰ì_∑ge
(){

94 
	}
}

96 
	$£t_pml4_íåy_ªcurs
(
pml4e_íåy
* 
e
, 
pml4
* 
pml4_dú
, 
boﬁ
 
is_u£r
){

97 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_PRESENT
);

98 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_WRITABLE
);

99 if(
is_u£r
)

100 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_USER
);

101 
	`pml4e_íåy_£t_‰ame
(
e
, (
uöt64_t
)(
pml4_dú
));

102 
	}
}

105 
	$£t_∑ge_íåy
(
±_íåy
* 
e
, 
uöt64_t
 
phys
, 
boﬁ
 
is_u£r
){

106 
	`pml4e_íåy_add_©åib
(
e
, 
PTE_PRESENT
);

107 
	`pml4e_íåy_add_©åib
(
e
, 
PTE_WRITABLE
);

108 if(
is_u£r
)

109 
	`pml4e_íåy_add_©åib
(
e
, 
PTE_USER
);

110 
	`pml4e_íåy_£t_‰ame
(
e
, 
phys
);

111 
	}
}

113 
	$£t_pml4_íåy
(
pml4e_íåy
* 
e
, 
pd≥
* 
pd≥_dú
, 
boﬁ
 
is_u£r
){

114 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_PRESENT
);

115 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_WRITABLE
);

116 if(
is_u£r
)

117 
	`pml4e_íåy_add_©åib
(
e
, 
PML4E_USER
);

118 
	`pml4e_íåy_£t_‰ame
(
e
, (
uöt64_t
)(
pd≥_dú
));

119 
	}
}

121 
	$£t_pd≥_íåy
(
pd≥_íåy
* 
e1
, 
pde
* 
pde_dú
, 
boﬁ
 
is_u£r
){

122 
	`pd≥_íåy_add_©åib
(
e1
, 
PDPE_PRESENT
);

123 
	`pd≥_íåy_add_©åib
(
e1
, 
PDPE_WRITABLE
);

124 if(
is_u£r
)

125 
	`pd≥_íåy_add_©åib
(
e1
, 
PDPE_USER
);

126 
	`pd≥_íåy_£t_‰ame
(
e1
, (
uöt64_t
)(
pde_dú
));

127 
	}
}

129 
	$£t_pde_íåy
(
pd_íåy
* 
e2
, 
±e
* 
±e_dú
, 
boﬁ
 
is_u£r
){

130 
	`pd_íåy_add_©åib
(
e2
, 
PDE_PRESENT
);

131 
	`pd_íåy_add_©åib
(
e2
, 
PDE_WRITABLE
);

132 if(
is_u£r
)

133 
	`pd_íåy_add_©åib
(
e2
, 
PDE_USER
);

134 
	`pd_íåy_£t_‰ame
(
e2
, (
uöt64_t
)(
±e_dú
));

135 
	}
}

137 
pml4e_íåy
* 
	$gë_pml4e_off£t_ªcur£
(
vútuÆ_addr
 
vút
){

138 
pml4
* 
pml4_dú
 = 
_cur_pml4_ba£_poöãr_pg
;

139 
pml4e_íåy
* 
e
 = (pml4e_íåy*)((
uöt64_t
)
pml4_dú
 + (uöt64_t)(8*(
	`PAGE_PML4_OFFSET
(
vút
))));

140  
e
;

141 
	}
}

143 
pd≥_íåy
* 
	$gë_pd≥_off£t_ªcur£
(
vútuÆ_addr
 
vút
){

144 
pd≥
* 
pd≥_dú1
 = (pd≥*)
RECURSIVE_PAGE_POINTER_ENTRY
;

145 
uöt64_t
 
pd≥_off£t
 = (((uöt64_t)(
pd≥_dú1
Ë>> 12Ë+ (
	`PAGE_PML4_OFFSET
(
vút
)));

146 
pd≥_íåy
* 
pd≥_íåy1
 = (pd≥_íåy*)(((
uöt64_t
)(
pd≥_off£t
Ë<< 12Ë+ (uöt64_t)((8*(
	`PAGE_POINTER_OFFSET
(
vút
)))));

147  
pd≥_íåy1
;

148 
	}
}

150 
pd_íåy
* 
	$gë_pde_off£t_ªcur£
(
vútuÆ_addr
 
vút
){

151 
pde
* 
pde_dú1
 = (pde*)
RECURSIVE_PAGE_DIRECTORY_ENTRY
;

152 
uöt64_t
 
pde_off£t
 = (((uöt64_t)(
pde_dú1
Ë>> 21Ë+ (
	`PAGE_PML4_OFFSET
(
vút
)));

153 
pde_off£t
 = (pde_offset<<21);

154 
pde_off£t
 = (((
uöt64_t
)’de_off£tË>> 12Ë+ (
	`PAGE_POINTER_OFFSET
(
vút
)));

155 
pd_íåy
* 
pde_íåy1
 = (pd_íåy*)(((
uöt64_t
)(
pde_off£t
Ë<< 12Ë+ (uöt64_t)((8*(
	`PAGE_DIRECTORY_OFFSET
(
vút
)))));

156  
pde_íåy1
;

157 
	}
}

159 
	$£t_phys_vút_ªcur£
(
uöt64_t
 
phys
, 
vútuÆ_addr
 
vút
, 
boﬁ
 
is_u£r
){

160 
±e
 *
±e_dú1
;

161 
uöt64_t
 
±e_off£t
;

162 
±_íåy
* 
±e_íåy1
;

163 
±e_dú1
 = (
±e
*)
RECURSIVE_PAGE_TABLE_ENTRY
;

164 
±e_off£t
 = (((
uöt64_t
)(
±e_dú1
Ë>> 30Ë+ (
	`PAGE_PML4_OFFSET
(
vút
)));

165 
±e_off£t
 = (pte_offset<<30);

166 
±e_off£t
 = (((
uöt64_t
)’ã_off£tË>> 21Ë+ (
	`PAGE_POINTER_OFFSET
(
vút
)));

167 
±e_off£t
 = (pte_offset<<21);

168 
±e_off£t
 = (((
uöt64_t
)’ã_off£tË>> 12Ë+ (
	`PAGE_DIRECTORY_OFFSET
(
vút
)));

169 
±e_íåy1
 = (
±_íåy
*)(((
uöt64_t
)(
±e_off£t
Ë<< 12Ë+ (uöt64_t)((8*(
	`PAGE_TABLE_OFFSET
(
vút
)))));

171 
	`£t_∑ge_íåy
(
±e_íåy1
, 
phys
, 
is_u£r
);

173 
	}
}

175 
±_íåy
* 
	$gë_±e_ªcur£
(
vútuÆ_addr
 
vút
){

176 
±e
 *
±e_dú1
;

177 
uöt64_t
 
±e_off£t
;

178 
±_íåy
* 
±e_íåy1
;

179 
±e_dú1
 = (
±e
*)
RECURSIVE_PAGE_TABLE_ENTRY
;

180 
±e_off£t
 = (((
uöt64_t
)(
±e_dú1
Ë>> 30Ë+ (
	`PAGE_PML4_OFFSET
(
vút
)));

181 
±e_off£t
 = (pte_offset<<30);

182 
±e_off£t
 = (((
uöt64_t
)’ã_off£tË>> 21Ë+ (
	`PAGE_POINTER_OFFSET
(
vút
)));

183 
±e_off£t
 = (pte_offset<<21);

184 
±e_off£t
 = (((
uöt64_t
)’ã_off£tË>> 12Ë+ (
	`PAGE_DIRECTORY_OFFSET
(
vút
)));

185 
±e_íåy1
 = (
±_íåy
*)(((
uöt64_t
)(
±e_off£t
Ë<< 12Ë+ (uöt64_t)((8*(
	`PAGE_TABLE_OFFSET
(
vút
)))));

186  
±e_íåy1
;

188 
	}
}

189 
	$˛⁄e_pgdú
(
uöt64_t
 
∑ª¡_pml4
, uöt64_à
chûd_pml4
){

190 
uöt16_t
 
i
;

191 
pml4e_íåy
* 
µml4
 = (pml4e_íåy*)
∑ª¡_pml4
;

192 
pml4e_íåy
* 
˝ml4
 = (pml4e_íåy*)
chûd_pml4
;

193 
i
=0; i<512; i++){

194 
˝ml4
[
i
] = 
µml4
[i];

196 
˝ml4
[510] = (
uöt64_t
)cpml4 - 0xFFFFFFFF80000000;

197 
˝ml4
[510] = cpml4[510] | 
PTE_USER
 | 
PTE_PRESENT
 | 
PTE_WRITABLE
;

199 
	}
}

201 
	$c›y_∑ge_èbÀ
(
uöt64_t
 
∑ª¡_pml4
, uöt64_à
chûd_pml4
, 
boﬁ
 
is_u£r
){

202 
uöt16_t
 
i
,
j
,
k
,
l
;

203 
pde
* 
pde_dú
;

204 
±e
* 
±e_dú
;

205 
pd≥
* 
pd≥_dú
;

206 
pd_íåy
 *
pd
, *
pde_dú_beg
;

207 
±_íåy
* 
pg
, *
±e_dú_beg
;

208 
pml4e_íåy
* 
µml4
 = (pml4e_íåy*)
∑ª¡_pml4
;

209 
pd≥_íåy
 *
µd≥
, *
pd≥_dú_beg
;

210 
pml4e_íåy
* 
˝ml4
 = (pml4e_íåy*)
chûd_pml4
;

211 
i
=0; 
µml4
[i] !
NULL
; i++){

212 
pd≥_dú
 = (
pd≥
*)
	`sub_mÆloc
(0,1);

213 
pd≥_dú_beg
 = (
pd≥_íåy
*)
pd≥_dú
;

214 
	`mem£t
(
pd≥_dú
, 0, (
pd≥
));

215 
pd≥
* 
pd≥_dú_phy
 = (pd≥*)((
uöt64_t
)
pd≥_dú
 - (uint64_t)0xFFFFFFFF80000000);

216 if(! 
pd≥_dú
 ){

217 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDPE\n");

220 
	`£t_pml4_íåy
(&
˝ml4
[
i
],
pd≥_dú_phy
, 
is_u£r
);

223 
µd≥
 = (
pd≥_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
µml4
[
i
]);

224 
µd≥
 = (
pd≥_íåy
*)((
uöt64_t
Ìpd≥ + 
vút_ba£
);

225 
j
=0; 
µd≥
[j] !
NULL
; j++){

226 
pde_dú
 = (
pde
*)
	`sub_mÆloc
(0,1);

227 
pde_dú_beg
 = (
pd_íåy
*)
pde_dú
;

228 
	`mem£t
(
pde_dú
, 0, (
pde
));

229 
pde
* 
pde_dú_phy
 = (pde*)((
uöt64_t
)
pde_dú
 - (uint64_t)0xFFFFFFFF80000000);

230 if–!
pde_dú
 ){

231 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDE\n");

234 
	`£t_pd≥_íåy
((
pd≥_íåy
*)&
pd≥_dú_beg
[
j
],
pde_dú_phy
, 
is_u£r
);

237 
pd
 = (
pd_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
µd≥
[
j
]);

238 
pd
 = (
pd_íåy
*)((
uöt64_t
Ìd + 
vút_ba£
);

239 
k
=0; k < 512; k++){

240 if(
pd
[
k
]){

241 
±e_dú
 = (
±e
*)
	`sub_mÆloc
(0,1);

242 
±e_dú_beg
 = (
±_íåy
*)
±e_dú
;

243 
	`mem£t
(
±e_dú
, 0, (pte_dir));

244 
±e
* 
±e_dú_phy
 = (±e*)((
uöt64_t
)
±e_dú
 - (uint64_t)0xFFFFFFFF80000000);

245 if–!
±e_dú
 ){

246 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PTE\n");

249 
	`£t_pde_íåy
((
pd_íåy
*)&
pde_dú_beg
[
k
],
±e_dú_phy
, 
is_u£r
);

250 
	`mem˝y
((*)
±e_dú
, (c⁄° *)(
vút_ba£
 + (
uöt64_t
)
	`PAGE_PHYSICAL_ADDRESS
(&
pd
[
k
])), (
±e
));

251 
pg
 = (
±_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
pd
[
k
]);

252 
pg
 = (
pd_íåy
*)((
uöt64_t
Ìg + 
vút_ba£
);

253 
l
=0;Ü<512;Ü++){

254 
	`±_íåy_dñ_©åib
(&
±e_dú_beg
[
l
], 
PTE_WRITABLE
);

255 
	`±_íåy_dñ_©åib
(&
pg
[
l
], 
PTE_WRITABLE
);

256 
	`±_íåy_add_©åib
(&
pg
[
l
], 
PTE_COW
);

257 
	`±_íåy_add_©åib
(&
±e_dú_beg
[
l
], 
PTE_COW
);

264 
	}
}

268 
	$˛ór_∑ge_èbÀs
(
uöt64_t
 
∑ª¡_pml4
){

269 
uöt16_t
 
i
,
j
,
k
;

270 
pd_íåy
 *
pd
, *
pd_phy
;

271 
±_íåy
 *
pg
, *
pg_phy
;

272 
pml4e_íåy
* 
µml4
 = (pml4e_íåy*)
∑ª¡_pml4
;

273 
pd≥_íåy
 *
µd≥
, *
µd≥_phy
;

274 
i
=0; 
µml4
[i] !
NULL
; i++){

277 
µd≥_phy
 = (
pd≥_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
µml4
[
i
]);

278 
µd≥
 = (
pd≥_íåy
*)((
uöt64_t
)
µd≥_phy
 + 
vút_ba£
);

279 
µml4
[
i
] = 0;

280 
j
=0; 
µd≥
[j] !
NULL
; j++){

282 
pd_phy
 = (
pd_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
µd≥
[
j
]);

283 
pd
 = (
pd_íåy
*)((
uöt64_t
)
pd_phy
 + 
vút_ba£
);

284 
µd≥
[
j
] = 0;

285 
k
=0; k < 512; k++){

286 if(
pd
[
k
]){

287 
pg_phy
 = (
±_íåy
*)
	`PAGE_PHYSICAL_ADDRESS
(&
pd
[
k
]);

288 
pg
 = (
±_íåy
*)((
uöt64_t
)
pg_phy
 + 
vút_ba£
);

289 
	`mem£t
(
pg
, 0, 
VIRT_PAGE_SIZE
);

290 
pd
[
k
] = 0;

296 
	}
}

299 
	$vmmgr_m≠_∑ge_a·î_∑gög
(
uöt64_t
 
phys
, uöt64_à
vút
, 
boﬁ
 
is_u£r
){

300 
pd≥
 *
pd≥_dú
;

301 
pd_íåy
* 
pde_íåy1
;

302 
pd≥_íåy
* 
pd≥_íåy1
;

304 
pml4e_íåy
* 
e
 = 
	`gë_pml4e_off£t_ªcur£
(
vút
);

306 if–!(*
e
 & 
PML4E_PRESENT
) ){

307 
pd≥_dú
 = (
pd≥
*)
	`sub_mÆloc
(0,1);

308 
	`mem£t
(
pd≥_dú
, 0, (
pd≥
));

309 
pd≥
* 
pd≥_dú_phy
 = (pd≥*)((
uöt64_t
)
pd≥_dú
 - (uint64_t)0xFFFFFFFF80000000);

310 if(! 
pd≥_dú
 ){

311 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDPE\n");

314 
	`£t_pml4_íåy
(
e
,
pd≥_dú_phy
, 
is_u£r
);

317 
pd≥_íåy1
 = 
	`gë_pd≥_off£t_ªcur£
(
vút
);

319 if–!(*
pd≥_íåy1
 & 
PDPE_PRESENT
) ){

320 
pde
* 
pde_dú
 = (pde*)
	`sub_mÆloc
(0,1);

321 
	`mem£t
(
pde_dú
, 0, (
pde
));

322 
pde
* 
pde_dú_phy
 = (pde*)((
uöt64_t
)
pde_dú
 - (uint64_t)0xFFFFFFFF80000000);

323 if–!
pde_dú
 ){

324 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDE\n");

327 
	`£t_pd≥_íåy
(
pd≥_íåy1
,
pde_dú_phy
, 
is_u£r
);

330 
pde_íåy1
 = 
	`gë_pde_off£t_ªcur£
(
vút
);

332 if–!(*
pde_íåy1
 & 
PDE_PRESENT
) ){

333 
±e
* 
±e_dú
 = (±e*)
	`sub_mÆloc
(0,1);

334 
	`mem£t
(
±e_dú
, 0, (pte_dir));

335 
±e
* 
±e_dú_phy
 = (±e*)((
uöt64_t
)
±e_dú
 - (uint64_t)0xFFFFFFFF80000000);

336 if–!
±e_dú
 ){

337 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PTE\n");

340 
	`£t_pde_íåy
(
pde_íåy1
,
±e_dú_phy
, 
is_u£r
);

343 
	`£t_phys_vút_ªcur£
(
phys
, 
vút
, 
is_u£r
);

345 
	}
}

407 
	$vmmgr_m≠_∑ge
(
uöt64_t
 
phys
, uöt64_à
vút
){

408 
pd≥
* 
pd≥_dú1
;

409 
pde
* 
pde_dú1
;

410 
±e
* 
±e_dú1
;

411 
±_íåy
* 
∑ge
;

412 
pd_íåy
* 
pde_íåy1
;

413 
pd≥_íåy
* 
pd≥_íåy1
;

414 
pml4
* 
pml4_dú
 = (pml4*)
_cur_pml4_ba£_poöãr
;

415 
pml4e_íåy
* 
e
 = 
	`vmmgr_pml4_dúe˘‹y_lookup_íåy
(
pml4_dú
, (
uöt64_t
)
vút
);

417 if–!(*
e
 & 
PML4E_PRESENT
) ){

418 
pd≥
* 
pd≥_dú
 = (pd≥*)
	`mmgr_Æloc_block
();

419 
	`mem£t
(
pd≥_dú
, 0, (
pd≥
));

420 if(! 
pd≥_dú
 ){

421 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDPE\n");

424 
	`£t_pml4_íåy
(
e
,
pd≥_dú
,0);

427 
pd≥_dú1
 = (
pd≥
*)
	`PAGE_PHYSICAL_ADDRESS
(
e
);

428 
pd≥_íåy1
 = 
	`vmmgr_∑ge_poöãr_dúe˘‹y_lookup_íåy
(
pd≥_dú1
, (
uöt64_t
)
vút
);

430 if–!(*
pd≥_íåy1
 & 
PDPE_PRESENT
) ){

431 
pde
* 
pde_dú
 = (pde*)
	`mmgr_Æloc_block
();

432 
	`mem£t
(
pde_dú
, 0, (
pde
));

433 if–!
pde_dú
 ){

434 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PDE\n");

437 
	`£t_pd≥_íåy
(
pd≥_íåy1
,
pde_dú
,0);

440 
pde_dú1
 = (
pde
*)
	`PAGE_PHYSICAL_ADDRESS
(
pd≥_íåy1
);

441 
pde_íåy1
 = 
	`vmmgr_∑ge_dúe˘‹y_lookup_íåy
(
pde_dú1
, (
uöt64_t
)
vút
);

443 if–!(*
pde_íåy1
 & 
PDE_PRESENT
) ){

444 
±e
* 
±e_dú
 = (±e*)
	`mmgr_Æloc_block
();

445 
	`mem£t
(
±e_dú
, 0, (pte_dir));

446 if–!
±e_dú
 ){

447 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whileÅryingÅoállocate PTE\n");

450 
pd_íåy
* 
e2
 = 
	`vmmgr_∑ge_dúe˘‹y_lookup_íåy
(
pde_dú1
, (
uöt64_t
)
vút
);

451 
	`£t_pde_íåy
(
e2
,
±e_dú
,0);

454 
±e_dú1
 = (
±e
*)
	`PAGE_PHYSICAL_ADDRESS
(
pde_íåy1
);

455 
∑ge
 = 
	`vmmgr_±abÀ_lookup_íåy
(
±e_dú1
, (
uöt64_t
)
vút
);

456 
	`±_íåy_£t_‰ame
(
∑ge
, (
uöt64_t
)
phys
);

457 
	`±_íåy_add_©åib
(
∑ge
, 
PTE_PRESENT
);

458 
	`±_íåy_add_©åib
(
∑ge
, 
PTE_WRITABLE
);

460 
	}
}

466 
	$vmmgr_öô
(){

467 
i
;

468 
uöt64_t
 
‰ame
, 
vút
;

470 
pml4
* 
pml4èbÀ
 = (pml4*)
	`mmgr_Æloc_block
();

471 if(!
pml4èbÀ
){

472 
	`PANIC
(
__FUNCTION__
,
__LINE__
,"VMMGR: Out of memory whichÅryingÅoállocateá defaultÖage\n");

475 
	`mem£t
(
pml4èbÀ
,0,(
pml4
));

476 
pml4e_íåy
* 
e
&(
pml4èbÀ
->
íåy
[0x1FE]);

477 
	`£t_pml4_íåy_ªcurs
(
e
, 
pml4èbÀ
, 0);

479 
_cur_pml4_ba£_poöãr
 = 
pml4èbÀ
;

482 
i
=0, 
‰ame
=0x200000, 
vút
=(0xFFFFFFFF80000000+(
uöt64_t
)(&
physba£
)); i<
PAGES_PER_TABLE
; i++, føme=‰ame+
PHY_PAGE_SIZE
, vút+=
VIRT_PAGE_SIZE
){

483 
	`vmmgr_m≠_∑ge
(
‰ame
, 
vút
);

485 
i
=0; i<((
MY_KERNEL_SIZE
/2)*
PAGES_PER_TABLE
); i++, 
‰ame
=‰ame+
PHY_PAGE_SIZE
, 
vút
+=
VIRT_PAGE_SIZE
){

486 
	`vmmgr_m≠_∑ge
(
‰ame
, 
vút
);

488 
	`vmmgr_m≠_∑ge
(0xB8000, 0xFFFFFFFF80100000);

489 
	`vmmgr_m≠_∑ge
((
uöt64_t
)
pml4èbÀ
, 0xFFFFFF7FBFDFE000);

490 
kî√l_pgd
 = 0xFFFFFF7FBFDFE000;

491 
	`vmmgr_swôch_pml4_dúe˘‹y
(
pml4èbÀ
);

492 
	`mmgr_syncwôh_kî√l
();

493 
	`öô_bump_addr
();

494 
bump_°¨t
 = 
bump_addr
;

500 
	}
}

	@sys/mmap.c

1 
	~<°dio.h
>

2 
	~<defs.h
>

3 
	~<sys/mm≠.h
>

4 
	~<sys/èsk.h
>

5 
	~<°dlib.h
>

6 
	~<sys/mm/mmgr.h
>

7 
	~<sys/kthªad.h
>

8 
	~<sys/mm/vmmgr_vútuÆ.h
>

11 
	$ö£π_vma
(
vm_¨ó_°ru˘
 *
vma
, 
kthªad
* 
k_thªad
){

13 
vm_¨ó_°ru˘
 *
fú°
 = 
k_thªad
->
mm≠
;

14 
vma
->
vm_√xt
 = 
NULL
;

15 if(!
fú°
){

16 
k_thªad
->
mm≠
 = 
vma
;

19 
k_thªad
->
mm≠_ˇche
->
vm_√xt
 = 
vma
;

21 
k_thªad
->
mm≠_ˇche
 = 
vma
;

22 
	}
}

24 
	$mm≠
(*
addr
, 
uöt32_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
uöt64_t
 
off£t
, 
kthªad
* 
k_thªad
){

25 
uöt64_t
 
√w_±e
;

26 
vm_¨ó_°ru˘
 *
vma
 = (vm_¨ó_°ru˘*)
	`sub_mÆloc
((vm_area_struct),0);

27 
	`mem£t
(
vma
, 0, (
vm_¨ó_°ru˘
));

28 
√w_±e
 = (
uöt64_t
)
	`mmgr_Æloc_block
();

29 
	`vmmgr_m≠_∑ge_a·î_∑gög
(
√w_±e
, (
uöt64_t
)
addr
, 1);

30 
vma
->
«me
 = "Code section";

31 
vma
->
vm_°¨t
 = 
addr
;

32 
vma
->
vm_íd
 = (*)((
uöt64_t
)vma->
vm_°¨t
 + (uint64_t)0x1000);

33 
	`ö£π_vma
(
vma
, 
k_thªad
);

35 
	}
}

	@sys/shell.c

1 
	~<sys/shñl.h
>

2 
	~<defs.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<sys/i§.h
>

6 
	#MAXLINE
 100

	)

8 
uöt32_t
 
do_exec
(*);

9 
	$∑r£löe
(c⁄° *
cmdlöe
, 
cmdlöe_tokís
 *
tok
)

12 
¨øy
[
MAXLINE
];

13 c⁄° 
dñims
[10] = " \t\r\n";

14 *
buf
 = 
¨øy
;

15 *
ídbuf
;

16 
√xt_°r_öd
=0;

18 i‡(
cmdlöe
 =
NULL
) {

19 
	`¥ötf
("Error: commandÜine is NULL\n");

23 (Ë
	`°∫˝y
(
buf
, 
cmdlöe
, 
MAXLINE
);

24 
ídbuf
 = 
buf
 + 
	`°æí
(buf);

26 
tok
->
¨gc
 = 0;

28 
buf
 < 
ídbuf
) {

29 i‡(
buf
 >
ídbuf
) ;

30 
√xt_°r_öd
 = 
	`°r˝¢
(
buf
, 
dñims
);

31 
tok
->
¨gv
[tok->
¨gc
++] = 
buf
;

34 i‡(!
	`°rcmp
(
tok
->
¨gv
[0], "quit")) {

35 
tok
->
buûtös
 = 
BUILTIN_QUIT
;

36 } i‡(!
	`°rcmp
(
tok
->
¨gv
[0], "jobs")) {

37 
tok
->
buûtös
 = 
BUILTIN_JOBS
;

39 
tok
->
buûtös
 = 
BUILTIN_NONE
;

41 
buf
 = bu‡+ 1 + 
√xt_°r_öd
;

44 
	}
}

46 
	$ußge
(){

47 
	`¥ötf
("1. cls - Clear Screen\n");

48 
	`¥ötf
("2.Éxec filename - ExecuteáÖrocess\n");

49 
	`¥ötf
("3.Ös -ÖrintÅhe currentÑunningÖrocess\n");

50 
	}
}

52 
	$exec
(* 
«me
){

53 
uöt16_t
 
ªt
;

54 
ªt
 = 
	`do_exec
(
«me
);

55 if(
ªt
 == 0)

56 
	`¥ötf
("Bad filename or File Not found\n");

57 
	}
}

59 
	$evÆ
(*
cmdlöe
)

61 
cmdlöe_tokís
 
tok
;

62 
uöt16_t
 
i
,
j
;

63 
cmd
[100], 
tmp
[100];

65 
	`∑r£löe
(
cmdlöe
, &
tok
);

66 
i
=0; i< 
tok
.
¨gc
; i++){

67 
	`mem£t
(
cmd
, 0, (cmd));

68 
	`mem£t
(
tmp
, 0, (tmp));

70 
	`°∫˝y
(
tmp
, 
tok
.
¨gv
[
i
], 
	`°æí
(tok.argv[i]));

72 
j
=0; (
tmp
[j] !' ' &&Åmp[j] !'\r' && j < 
	`°æí
(tmp)); j++)

73 
cmd
[
j
] = 
tmp
[j];

75 if(
	`°rcmp
(
cmd
, "cls") == 0)

76 
	`˛s
();

77 if(
	`°rcmp
(
cmd
, "h") == 0)

78 
	`ußge
();

79 if(
	`°rcmp
(
cmd
, "exec") == 0)

80 
	`exec
(
tok
.
¨gv
[1]);

81 if(
	`°rcmp
(
cmd
, "ps") == 0)

82 
	`exec
("bin/ps");

85 i‡(
tok
.
¨gv
[0] =
NULL
) ;

88 
	}
}

93 
	$shñl_maö
()

95 
cmdlöe
[
MAXLINE
];

96 
emô_¥om±
 = 1;

97 
¥om±
[] = "SBUINX> ";

100 
	`mem£t
(
cmdlöe
, 0, (cmdline));

101 
	`˛s
();

102 
	`¥ötf
("Welcome USER. Type h for help\n");

105 i‡(
emô_¥om±
) {

106 
	`¥ötf
("%s", 
¥om±
);

108 
	`d‹ód
(
cmdlöe
);

111 
cmdlöe
[
	`°æí
(cmdline)-1] = '\0';

114 
	`evÆ
(
cmdlöe
);

118 
	}
}

	@sys/stdfns.c

1 
	~<defs.h
>

2 
	~<°dio.h
>

3 
	~<°d¨g.h
>

4 
	~<°dlib.h
>

5 
	~<io.h
>

7 * 
	gvideo_mem‹y
 = (*)
START_MEMORY
;

8 * 
	gtimî_mem‹y
 = (*)
TIMER_MEMORY
;

9 * 
	gkeybﬂrd_mem‹y
 = (*)
KEYBOARD_WARMUP_MEMORY
;

10 * 
io_buff
;

11 
ªadög
;

15 *
	$c⁄vît
(
uöt64_t
 
num
, 
ba£
)

17 
buf
[65];

18 *
±r
;

20 
±r
=&
buf
[(buf)-1];

21 *
±r
='\0';

24 *--
±r
="0123456789abcdef"[
num
%
ba£
];

25 
num
/=
ba£
;

26 }
num
!=0);

27 (
±r
);

28 
	}
}

30 
	$wrôe_time
(
uöt16_t
 
su
, uöt16_à
°
, uöt16_à
mu
, uöt16_à
mt
, uöt16_à
hu
, uöt16_à
ht
)

32 vﬁ©ûê*
video
 = (vﬁ©ûê*)
timî_mem‹y
;

33 
uöt8_t
 
cﬁ‹
 = 
TEXT_COLOR
;

34 *
su_p
, *
°_p
, *
mu_p
, *
mt_p
, *
hu_p
, *
ht_p
;

35 
ht_p
 = 
	`c⁄vît
(
ht
,10);

36 
cﬁ
 = ':';

37 *
video
++ = *
ht_p
;

38 *
video
++ = 
cﬁ‹
;

39 
hu_p
 = 
	`c⁄vît
(
hu
,10);

40 *
video
++ = *
hu_p
;

41 *
video
++ = 
cﬁ‹
;

42 *
video
++ = 
cﬁ
;

43 *
video
++ = 
cﬁ‹
;

44 
mt_p
 = 
	`c⁄vît
(
mt
,10);

45 *
video
++ = *
mt_p
;

46 *
video
++ = 
cﬁ‹
;

47 
mu_p
 = 
	`c⁄vît
(
mu
,10);

48 *
video
++ = *
mu_p
;

49 *
video
++ = 
cﬁ‹
;

50 *
video
++ = 
cﬁ
;

51 *
video
++ = 
cﬁ‹
;

52 
°_p
 = 
	`c⁄vît
(
°
,10);

53 *
video
++ = *
°_p
;

54 *
video
++ = 
cﬁ‹
;

55 
su_p
 = 
	`c⁄vît
(
su
,10);

56 *
video
++ = *
su_p
;

57 *
video
++ = 
cﬁ‹
;

59 
	}
}

61 *
	$mem£t
(*
s
, 
uöt8_t
 
c
, 
uöt32_t
 
n
)

63 * 
p
(*)
s
;

64 
n
--)

65 *
p
++ = ()
c
;

66  
s
;

67 
	}
}

69 
	$wrôe_key
(
cﬁ‹
, 
c
){

70 vﬁ©ûê* 
video
 = (vﬁ©ûê*)
keybﬂrd_mem‹y
;

71 *
video
++ = 
c
;

72 *
video
++ = 
cﬁ‹
;

73 
	}
}

79 
	$wrôe_ch¨
(
cﬁ‹
, 
c
)

81 vﬁ©ûê*
video
 = (vﬁ©ûê*)
video_mem‹y
;

82 vﬁ©ûê
uöt64_t
 
diff
;

83 vﬁ©ûê
uöt64_t
 
cﬁ1
;

84 if(
c
 == '\n' || ()c == 13){

90 
video
 = (video + 0xA0);

91 
diff
 = ()(
video
 - 
START_MEMORY
);

92 
cﬁ1
 = (
diff
/0xA0);

93 
video
 = (vﬁ©ûê*)(
START_MEMORY
 + 0xA0*
cﬁ1
);

96 *
video
++ = 
c
;

97 *
video
++ = 
cﬁ‹
;

99 
video_mem‹y
 = (*)(
video
);

100 
	`upd©e_curs‹
();

101 
	}
}

104 
	$wrôe_io_buff
(
c
)

107 if(
c
 == '\n' || ()c == 13){

108 *
io_buff
++ = 
c
;

110 
ªadög
 = 0;

113 *
io_buff
++ = 
c
;

115 
	}
}

117 
	$°∫˝y
(* 
de°
, c⁄° * 
§c
, 
uöt32_t
 
size
){

118 
uöt32_t
 
i
;

119 
i
=0; i<
size
; i++)

120 
de°
[
i
] = 
§c
[i];

121 
	}
}

133 
	$wrôe_°rög
–
cﬁ‹
, c⁄° *
°rög
 )

135 vﬁ©ûê*
video
 = (vﬁ©ûê*)
video_mem‹y
;

136 vﬁ©ûê
uöt64_t
 
diff
;

137 vﬁ©ûê
uöt64_t
 
cﬁ1
;

139  *
°rög
 !
NULL
 )

141 if(*
°rög
 == '\n'){

147 
video
 = (video + 0xA0);

148 
diff
 = ()(
video
 - 
START_MEMORY
);

149 
cﬁ1
 = (
diff
/0xA0);

150 
video
 = (vﬁ©ûê*)(
START_MEMORY
 + 0xA0*
cﬁ1
);

151 
°rög
++;

154 *
video
++ = *
°rög
++;

155 *
video
++ = 
cﬁ‹
;

159 
video_mem‹y
 = (*)(
video
);

160 
	`upd©e_curs‹
();

161 
	}
}

169 
	$¥ötf
(c⁄° *
fmt
,...){

170 c⁄° *
p
;

172 
uöt64_t
 
addr
;

173 
i
;

175 *
s
;

176 
va_li°
 
¨g_p
;

177 
	`va_°¨t
(
¨g_p
, 
fmt
);

183 
p
=
fmt
; *p ;Ö++){

184 if(*
p
 != '%'){

185 
	`wrôe_ch¨
(0x1F,*
p
);

188 *++
p
){

189 'c': 
i
 = 
	`va_¨g
(
¨g_p
, );

190 
	`wrôe_ch¨
(0x1F,
i
);

192 's': 
s
 = 
	`va_¨g
(
¨g_p
, *);

193 
	`wrôe_°rög
(0x1F,
s
);

195 'd': 
i
 = 
	`va_¨g
(
¨g_p
, );

196 
	`wrôe_°rög
(0x1F,
	`c⁄vît
(
i
,10));

198 'x': 
i
 = 
	`va_¨g
(
¨g_p
, );

199 
	`wrôe_°rög
(0x1F,"0x");

200 
	`wrôe_°rög
(0x1F,
	`c⁄vît
(
i
,16));

202 'p': 
addr
 = 
	`va_¨g
(
¨g_p
, 
uöt64_t
);

205 
	`wrôe_°rög
(0x1F,
	`c⁄vît
(
addr
,16));

210 
	`va_íd
(
¨g_p
);

212 
	}
}

219 
	$˛s
(){

220 
i
;

221 vﬁ©ûê* 
video
 = (vﬁ©ûê*)
START_MEMORY
;

222 
i
=0; i<(
MAX_ROWS
 * 
MAX_COLUMNS
); i++){

223 *
video
++ = 0x20;

224 *
video
++ = 0x0;

226 
video_mem‹y
 = (*)
START_MEMORY
;

227 
	`upd©e_curs‹
();

228 
	}
}

238 
	$upd©e_curs‹
()

240 vﬁ©ûê
uöt64_t
 
diff
 = ()(
video_mem‹y
 - 
START_MEMORY
);

241 vﬁ©ûê* 
video
 = (vﬁ©ûê*)
START_MEMORY
;

242 * 
tmp_video_mem‹y
;

248 
uöt16_t
 
i
;

249 
ãmp_row
;

250 
uöt64_t
 
pos
;

253 
uöt32_t
 
row1
 = (
diff
/80)/2;

254 
uöt32_t
 
cﬁ1
 = ((
diff
 - 
row1
*80*2)/2)%80;

263 if(
row1
 >= 24){

264 
ãmp_row
 = 
row1
 - 24 + 1;

265 
pos
 = 
ãmp_row
*80*2 + 
START_MEMORY
;

266 
	`mem˝y
((*)
video
, (c⁄° *)(
pos
), (24-
ãmp_row
)*80*2);

267 
video_mem‹y
 = (*)(23*80*2 + 
START_MEMORY
);

268 
tmp_video_mem‹y
 = 
video_mem‹y
;

269 
row1
 = 23;

270 
cﬁ1
=0;

271 
i
=0; i<80; i++){

272 *
tmp_video_mem‹y
++ = 0x20;

273 *
tmp_video_mem‹y
++ = 0x0;

277 
posôi⁄
=(
row1
*80Ë+ 
cﬁ1
;

279 
	`outb
(0x3D4, 0x0F);

280 
	`outb
(0x3D5, ()(
posôi⁄
&0xFF));

282 
	`outb
(0x3D4, 0x0E);

283 
	`outb
(0x3D5, ()((
posôi⁄
>>8)&0xFF));

293 
	}
}

295 *
	$mem˝y
(*
de°
, c⁄° *
§c
, 
uöt32_t
 
n
)

297 *
dp
 = 
de°
;

298 c⁄° *
•
 = 
§c
;

299 
n
--){

305 *
dp
++ = *
•
++;

307  
de°
;

308 
	}
}

313 
	$°æí
(c⁄° *
s
){

314 
Àngth
=0;

315 * 
loˇl_s
 = (*)
s
;

316 *
loˇl_s
){

317 
Àngth
++;

318 
loˇl_s
++;

320  
Àngth
;

321 
	}
}

324 
	$PANIC
(c⁄° *
s
, 
uöt16_t
 
löe
, c⁄° * 
°r
){

325 
	`¥ötf
("Kî√»PANICáà%s:%d. REASON: %s",
s
,
löe
,
°r
);

326 
	`¥ötf
("\n...Backtrace of PANIC..\n");

327 
	`¥ötf
("\t.....0x%p\n",
	`__buûtö_ªtu∫_addªss
(0));

331 
	}
}

333 
	$SYS_TRACE
(c⁄° *
s
, 
uöt16_t
 
löe
, c⁄° * 
°r
){

334 
	`¥ötf
("WARNING!!áà%s:%d. REASON: %s",
s
,
löe
,
°r
);

335 
	}
}

337 
uöt32_t
 
	$my_©oi
(*
°r
){

338 
uöt32_t
 
ªs
=0;

339 
uöt16_t
 
i
;

340 
i
=0; 
°r
[i] != '\0'; i++){

342 
ªs
 =Ñes*10 + (
°r
[
i
] - '0');

344  
ªs
;

345 
	}
}

348 
uöt32_t
 
	$my_©oﬁ
(*
°r
){

349 
uöt32_t
 
ªs
=0;

350 
uöt16_t
 
i
;

351 
i
=0; 
°r
[i] != '\0'; i++){

353 
ªs
 =Ñes*8 + (
°r
[
i
] - '0');

355  
ªs
;

356 
	}
}

358 
	$°rcmp
(*
a
, * 
b
){

359 
i
=0, 
equÆs
 = 0;

360 
Àn1
 = 
	`°æí
(
a
);

361 
Àn2
 = 
	`°æí
(
b
);

362 if–
Àn1
 !
Àn2
 )

364 
a
[
i
] !
NULL
){

365 if(
a
[
i
] =
b
[i]){

366 
i
++;

370 
equÆs
 = 1;

374  
equÆs
;

375 
	}
}

377 *
	$°rchr
(c⁄° *
s
, 
c
)

379 *
s
 !()
c
)

380 i‡(!*
s
++)

382  (*)
s
;

383 
	}
}

385 
	$°r˝¢
(c⁄° *
s1
, c⁄° *
s2
)

387 
ªt
=0;

388 *
s1
)

389 if(
	`°rchr
(
s2
,*
s1
))

390  
ªt
;

392 
s1
++,
ªt
++;

393  
ªt
;

394 
	}
}

	@sys/task_switch.s

1 .
hñlo_ö_u£r_mode


3 .
ma¸o
 
PUSHAQ


4 #Savê
ªgi°îs
 
to
 
the
 
°ack
.

6 
pushq
 %
øx
 #ßvê
cuºít
Ñax

7 
pushq
 %
rbx
 #ßvê
cuºít
Ñbx

8 
pushq
 %
rcx
 #ßvê
cuºít
Ñcx

9 
pushq
 %
rdx
 #ßvê
cuºít
Ñdx

10 
pushq
 %
rbp
 #ßvê
cuºít
Ñbp

11 
pushq
 %
rdi
 #ßvê
cuºít
Ñdi

12 
pushq
 %
rsi
 #ßvê
cuºít
Ñsi

13 
pushq
 %
r8
 #ßvê
cuºít
Ñ8

14 
pushq
 %
r9
 #ßvê
cuºít
Ñ9

15 
pushq
 %
r10
 #ßvê
cuºít
Ñ10

16 
pushq
 %
r11
 #ßvê
cuºít
Ñ11

17 
pushq
 %
r12
 #ßvê
cuºít
Ñ12

18 
pushq
 %
r13
 #ßvê
cuºít
Ñ13

19 
pushq
 %
r14
 #ßvê
cuºít
Ñ14

20 
pushq
 %
r15
 #ßvê
cuºít
Ñ15

22 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


24 .
ma¸o
 
POPAQ


25 #Re°‹ê
ªgi°îs
 
‰om
 
the
 
°ack
.

27 
p›q
 %
r15
 #ª°‹ê
cuºít
Ñ15

28 
p›q
 %
r14
 #ª°‹ê
cuºít
Ñ14

29 
p›q
 %
r13
 #ª°‹ê
cuºít
Ñ13

30 
p›q
 %
r12
 #ª°‹ê
cuºít
Ñ12

31 
p›q
 %
r11
 #ª°‹ê
cuºít
Ñ11

32 
p›q
 %
r10
 #ª°‹ê
cuºít
Ñ10

33 
p›q
 %
r9
 #ª°‹ê
cuºít
Ñ9

34 
p›q
 %
r8
 #ª°‹ê
cuºít
Ñ8

35 
p›q
 %
rsi
 #ª°‹ê
cuºít
Ñsi

36 
p›q
 %
rdi
 #ª°‹ê
cuºít
Ñdi

37 
p›q
 %
rbp
 #ª°‹ê
cuºít
Ñbp

38 
p›q
 %
rdx
 #ª°‹ê
cuºít
Ñdx

39 
p›q
 %
rcx
 #ª°‹ê
cuºít
Ñcx

40 
p›q
 %
rbx
 #ª°‹ê
cuºít
Ñbx

41 
p›q
 %
øx
 #ª°‹ê
cuºít
Ñax

43 .
ídm
 #íd 
of
 
ma¸o
 
deföôi⁄


46 .
ãxt


47 .
globÆ
 
swôch_to_u£r


48 .
cuºítThªad


49 .
tss


51 
swôch_to_u£r
:

52 
˛i


53 
movq
 
$0x23
, %
øx
 #USER 
DS
 = 0x20 | 0x3 ( 
DPL
 ) = 0x23

54 
movq
 %
øx
, %
ds


55 
movq
 %
øx
, %
es


56 
movq
 %
øx
, %
fs


57 
movq
 %
øx
, %
gs


58 
Àaq
 (
tss
), %
øx


59 
Àaq
 0x4(%
øx
), %rax

60 
movq
 %
r•
, (%
øx
)

61 
movq
 (
cuºítThªad
), %
øx


62 
pushq
 
$0x23


63 
pushq
 (%
øx
)

64 #pushq 
$0x900000


65 
pushfq


66 
p›q
 %
øx


67 
‹q
 
$0x200
, %
øx


68 
pushq
 %
øx


69 
pushq
 
$0x1B
 #U£∏
CS
 = 0x18 | 0x3 ( 
DPL
 ) = 0x1B

70 
movq
 (
cuºítThªad
), %
øx


71 
Àaq
 0x8(%
øx
), %rax

72 
movq
 (%
øx
), %rax

73 #Àaq 0x8(
cuºítTask
), %
øx


74 
pushq
 %
øx


75 #pushq 
$0x800000


76 
úëq


	@sys/timer.c

1 
	~<defs.h
>

2 
	~<sys/idt.h
>

3 
	~<io.h
>

4 
	~<sys/timî.h
>

5 
	~<°dio.h
>

6 
	~<sys/kthªad.h
>

8 
úq_ö°Æl_h™dÀr
(,*);

9 
Thr_Queue
 
runQueue
;

10 
uöt16_t
 
	gtŸÆ_ticks
 = 0;

11 
uöt16_t
 
	gtŸÆ_ticks_£cs
=0;

12 
uöt16_t
 
	gmös
=0;

13 
uöt16_t
 
	ghours
=0;

14 
uöt16_t
 
	ghours_unôs
=0;

15 
uöt16_t
 
	ghours_ãns
=0;

16 
uöt16_t
 
	gmöuãs_unôs
=0;

17 
uöt16_t
 
	gmöuãs_ãns
=0;

18 
uöt16_t
 
	g£c⁄ds_unôs
=0;

19 
uöt16_t
 
	g£c⁄ds_ãns
=0;

20 
kthªad
* 
cuºítThªad
;

22 
	$timî_h™dÀr
(
ªgs
 *
r
){

23 
Thr_Queue
* 
run_queue
 = &
runQueue
;

24 
kthªad
* 
¸awl
 = 
run_queue
->
hód
;

27 
tŸÆ_ticks
++;

29 if((
tŸÆ_ticks
 % 100) == 0){

30 
tŸÆ_ticks_£cs
++;

31 
¸awl
 && cøw»!
cuºítThªad
){

32 if((
¸awl
->
¶ìpög
 > 0))

33 
¸awl
->
¶ìpög
--;

34 
¸awl
 = cøwl->
√xt_ö_ThªadQ
;

37 if(
tŸÆ_ticks_£cs
 >= 60){

38 
mös
++;

39 
tŸÆ_ticks_£cs
 = 0;

40 if(
mös
 >= 60){

41 
mös
 = 0;

42 
hours
++;

45 
£c⁄ds_unôs
 = (
tŸÆ_ticks_£cs
 % 10);

46 
£c⁄ds_ãns
 = 
tŸÆ_ticks_£cs
 / 10;

47 
möuãs_unôs
 = 
mös
 % 10;

48 
möuãs_ãns
 = 
mös
 / 10;

49 
hours_unôs
 = 
hours
 % 10;

50 
hours_ãns
 = 
hours
 / 10;

52 
	`wrôe_time
(
£c⁄ds_unôs
,
£c⁄ds_ãns
,
möuãs_unôs
,
möuãs_ãns
,
hours_unôs
,
hours_ãns
);

55 
	}
}

63 
	$timî_£tup
(
hz
)

65 
COUNT
 = 1193180 / 
hz
;

66 
lsb
, 
msb
;

74 
	`outb
(0x43, 0x36);

81 
lsb
 = 
COUNT
 & 0xFF;

82 
msb
 = 
COUNT
 >> 8;

83 
	`outb
(0x40, 
lsb
);

84 
	`outb
(0x40, 
msb
);

85 
	}
}

87 
	$timî_ö°Æl
(){

88 
	`timî_£tup
(100);

89 
	`úq_ö°Æl_h™dÀr
(0, 
timî_h™dÀr
);

90 
	}
}

	@/usr/include/elf.h

20 #i‚de‡
_ELF_H


21 
	#_ELF_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


29 
	~<°döt.h
>

32 
uöt16_t
 
	tElf32_HÆf
;

33 
uöt16_t
 
	tElf64_HÆf
;

36 
uöt32_t
 
	tElf32_W‹d
;

37 
öt32_t
 
	tElf32_Sw‹d
;

38 
uöt32_t
 
	tElf64_W‹d
;

39 
öt32_t
 
	tElf64_Sw‹d
;

42 
uöt64_t
 
	tElf32_Xw‹d
;

43 
öt64_t
 
	tElf32_Sxw‹d
;

44 
uöt64_t
 
	tElf64_Xw‹d
;

45 
öt64_t
 
	tElf64_Sxw‹d
;

48 
uöt32_t
 
	tElf32_Addr
;

49 
uöt64_t
 
	tElf64_Addr
;

52 
uöt32_t
 
	tElf32_Off
;

53 
uöt64_t
 
	tElf64_Off
;

56 
uöt16_t
 
	tElf32_Se˘i⁄
;

57 
uöt16_t
 
	tElf64_Se˘i⁄
;

60 
Elf32_HÆf
 
	tElf32_Vîsym
;

61 
Elf64_HÆf
 
	tElf64_Vîsym
;

66 
	#EI_NIDENT
 (16)

	)

70 
	me_idít
[
EI_NIDENT
];

71 
Elf32_HÆf
 
	me_ty≥
;

72 
Elf32_HÆf
 
	me_machöe
;

73 
Elf32_W‹d
 
	me_vîsi⁄
;

74 
Elf32_Addr
 
	me_íåy
;

75 
Elf32_Off
 
	me_phoff
;

76 
Elf32_Off
 
	me_shoff
;

77 
Elf32_W‹d
 
	me_Êags
;

78 
Elf32_HÆf
 
	me_ehsize
;

79 
Elf32_HÆf
 
	me_phítsize
;

80 
Elf32_HÆf
 
	me_phnum
;

81 
Elf32_HÆf
 
	me_shítsize
;

82 
Elf32_HÆf
 
	me_shnum
;

83 
Elf32_HÆf
 
	me_sh°∫dx
;

84 } 
	tElf32_Ehdr
;

88 
	me_idít
[
EI_NIDENT
];

89 
Elf64_HÆf
 
	me_ty≥
;

90 
Elf64_HÆf
 
	me_machöe
;

91 
Elf64_W‹d
 
	me_vîsi⁄
;

92 
Elf64_Addr
 
	me_íåy
;

93 
Elf64_Off
 
	me_phoff
;

94 
Elf64_Off
 
	me_shoff
;

95 
Elf64_W‹d
 
	me_Êags
;

96 
Elf64_HÆf
 
	me_ehsize
;

97 
Elf64_HÆf
 
	me_phítsize
;

98 
Elf64_HÆf
 
	me_phnum
;

99 
Elf64_HÆf
 
	me_shítsize
;

100 
Elf64_HÆf
 
	me_shnum
;

101 
Elf64_HÆf
 
	me_sh°∫dx
;

102 } 
	tElf64_Ehdr
;

108 
	#EI_MAG0
 0

	)

109 
	#ELFMAG0
 0x7‡

	)

111 
	#EI_MAG1
 1

	)

112 
	#ELFMAG1
 'E'

	)

114 
	#EI_MAG2
 2

	)

115 
	#ELFMAG2
 'L'

	)

117 
	#EI_MAG3
 3

	)

118 
	#ELFMAG3
 'F'

	)

121 
	#ELFMAG
 "\177ELF"

	)

122 
	#SELFMAG
 4

	)

124 
	#EI_CLASS
 4

	)

125 
	#ELFCLASSNONE
 0

	)

126 
	#ELFCLASS32
 1

	)

127 
	#ELFCLASS64
 2

	)

128 
	#ELFCLASSNUM
 3

	)

130 
	#EI_DATA
 5

	)

131 
	#ELFDATANONE
 0

	)

132 
	#ELFDATA2LSB
 1

	)

133 
	#ELFDATA2MSB
 2

	)

134 
	#ELFDATANUM
 3

	)

136 
	#EI_VERSION
 6

	)

139 
	#EI_OSABI
 7

	)

140 
	#ELFOSABI_NONE
 0

	)

141 
	#ELFOSABI_SYSV
 0

	)

142 
	#ELFOSABI_HPUX
 1

	)

143 
	#ELFOSABI_NETBSD
 2

	)

144 
	#ELFOSABI_LINUX
 3

	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM
 97

	)

153 
	#ELFOSABI_STANDALONE
 255

	)

155 
	#EI_ABIVERSION
 8

	)

157 
	#EI_PAD
 9

	)

161 
	#ET_NONE
 0

	)

162 
	#ET_REL
 1

	)

163 
	#ET_EXEC
 2

	)

164 
	#ET_DYN
 3

	)

165 
	#ET_CORE
 4

	)

166 
	#ET_NUM
 5

	)

167 
	#ET_LOOS
 0x„00

	)

168 
	#ET_HIOS
 0x„f‡

	)

169 
	#ET_LOPROC
 0xff00

	)

170 
	#ET_HIPROC
 0xfff‡

	)

174 
	#EM_NONE
 0

	)

175 
	#EM_M32
 1

	)

176 
	#EM_SPARC
 2

	)

177 
	#EM_386
 3

	)

178 
	#EM_68K
 4

	)

179 
	#EM_88K
 5

	)

180 
	#EM_860
 7

	)

181 
	#EM_MIPS
 8

	)

182 
	#EM_S370
 9

	)

183 
	#EM_MIPS_RS3_LE
 10

	)

185 
	#EM_PARISC
 15

	)

186 
	#EM_VPP500
 17

	)

187 
	#EM_SPARC32PLUS
 18

	)

188 
	#EM_960
 19

	)

189 
	#EM_PPC
 20

	)

190 
	#EM_PPC64
 21

	)

191 
	#EM_S390
 22

	)

193 
	#EM_V800
 36

	)

194 
	#EM_FR20
 37

	)

195 
	#EM_RH32
 38

	)

196 
	#EM_RCE
 39

	)

197 
	#EM_ARM
 40

	)

198 
	#EM_FAKE_ALPHA
 41

	)

199 
	#EM_SH
 42

	)

200 
	#EM_SPARCV9
 43

	)

201 
	#EM_TRICORE
 44

	)

202 
	#EM_ARC
 45

	)

203 
	#EM_H8_300
 46

	)

204 
	#EM_H8_300H
 47

	)

205 
	#EM_H8S
 48

	)

206 
	#EM_H8_500
 49

	)

207 
	#EM_IA_64
 50

	)

208 
	#EM_MIPS_X
 51

	)

209 
	#EM_COLDFIRE
 52

	)

210 
	#EM_68HC12
 53

	)

211 
	#EM_MMA
 54

	)

212 
	#EM_PCP
 55

	)

213 
	#EM_NCPU
 56

	)

214 
	#EM_NDR1
 57

	)

215 
	#EM_STARCORE
 58

	)

216 
	#EM_ME16
 59

	)

217 
	#EM_ST100
 60

	)

218 
	#EM_TINYJ
 61

	)

219 
	#EM_X86_64
 62

	)

220 
	#EM_PDSP
 63

	)

222 
	#EM_FX66
 66

	)

223 
	#EM_ST9PLUS
 67

	)

224 
	#EM_ST7
 68

	)

225 
	#EM_68HC16
 69

	)

226 
	#EM_68HC11
 70

	)

227 
	#EM_68HC08
 71

	)

228 
	#EM_68HC05
 72

	)

229 
	#EM_SVX
 73

	)

230 
	#EM_ST19
 74

	)

231 
	#EM_VAX
 75

	)

232 
	#EM_CRIS
 76

	)

233 
	#EM_JAVELIN
 77

	)

234 
	#EM_FIREPATH
 78

	)

235 
	#EM_ZSP
 79

	)

236 
	#EM_MMIX
 80

	)

237 
	#EM_HUANY
 81

	)

238 
	#EM_PRISM
 82

	)

239 
	#EM_AVR
 83

	)

240 
	#EM_FR30
 84

	)

241 
	#EM_D10V
 85

	)

242 
	#EM_D30V
 86

	)

243 
	#EM_V850
 87

	)

244 
	#EM_M32R
 88

	)

245 
	#EM_MN10300
 89

	)

246 
	#EM_MN10200
 90

	)

247 
	#EM_PJ
 91

	)

248 
	#EM_OPENRISC
 92

	)

249 
	#EM_ARC_A5
 93

	)

250 
	#EM_XTENSA
 94

	)

251 
	#EM_NUM
 95

	)

257 
	#EM_ALPHA
 0x9026

	)

261 
	#EV_NONE
 0

	)

262 
	#EV_CURRENT
 1

	)

263 
	#EV_NUM
 2

	)

269 
Elf32_W‹d
 
	msh_«me
;

270 
Elf32_W‹d
 
	msh_ty≥
;

271 
Elf32_W‹d
 
	msh_Êags
;

272 
Elf32_Addr
 
	msh_addr
;

273 
Elf32_Off
 
	msh_off£t
;

274 
Elf32_W‹d
 
	msh_size
;

275 
Elf32_W‹d
 
	msh_lök
;

276 
Elf32_W‹d
 
	msh_öfo
;

277 
Elf32_W‹d
 
	msh_addølign
;

278 
Elf32_W‹d
 
	msh_ítsize
;

279 } 
	tElf32_Shdr
;

283 
Elf64_W‹d
 
	msh_«me
;

284 
Elf64_W‹d
 
	msh_ty≥
;

285 
Elf64_Xw‹d
 
	msh_Êags
;

286 
Elf64_Addr
 
	msh_addr
;

287 
Elf64_Off
 
	msh_off£t
;

288 
Elf64_Xw‹d
 
	msh_size
;

289 
Elf64_W‹d
 
	msh_lök
;

290 
Elf64_W‹d
 
	msh_öfo
;

291 
Elf64_Xw‹d
 
	msh_addølign
;

292 
Elf64_Xw‹d
 
	msh_ítsize
;

293 } 
	tElf64_Shdr
;

297 
	#SHN_UNDEF
 0

	)

298 
	#SHN_LORESERVE
 0xff00

	)

299 
	#SHN_LOPROC
 0xff00

	)

300 
	#SHN_BEFORE
 0xff00

	)

302 
	#SHN_AFTER
 0xff01

	)

304 
	#SHN_HIPROC
 0xff1‡

	)

305 
	#SHN_LOOS
 0xff20

	)

306 
	#SHN_HIOS
 0xff3‡

	)

307 
	#SHN_ABS
 0xfff1

	)

308 
	#SHN_COMMON
 0xfff2

	)

309 
	#SHN_XINDEX
 0xfff‡

	)

310 
	#SHN_HIRESERVE
 0xfff‡

	)

314 
	#SHT_NULL
 0

	)

315 
	#SHT_PROGBITS
 1

	)

316 
	#SHT_SYMTAB
 2

	)

317 
	#SHT_STRTAB
 3

	)

318 
	#SHT_RELA
 4

	)

319 
	#SHT_HASH
 5

	)

320 
	#SHT_DYNAMIC
 6

	)

321 
	#SHT_NOTE
 7

	)

322 
	#SHT_NOBITS
 8

	)

323 
	#SHT_REL
 9

	)

324 
	#SHT_SHLIB
 10

	)

325 
	#SHT_DYNSYM
 11

	)

326 
	#SHT_INIT_ARRAY
 14

	)

327 
	#SHT_FINI_ARRAY
 15

	)

328 
	#SHT_PREINIT_ARRAY
 16

	)

329 
	#SHT_GROUP
 17

	)

330 
	#SHT_SYMTAB_SHNDX
 18

	)

331 
	#SHT_NUM
 19

	)

332 
	#SHT_LOOS
 0x60000000

	)

333 
	#SHT_GNU_HASH
 0x6ffffff6

	)

334 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

335 
	#SHT_CHECKSUM
 0x6ffffff8

	)

336 
	#SHT_LOSUNW
 0x6fffffÁ

	)

337 
	#SHT_SUNW_move
 0x6fffffÁ

	)

338 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

339 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

340 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

341 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

342 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

343 
	#SHT_HISUNW
 0x6ffffff‡

	)

344 
	#SHT_HIOS
 0x6ffffff‡

	)

345 
	#SHT_LOPROC
 0x70000000

	)

346 
	#SHT_HIPROC
 0x7ffffff‡

	)

347 
	#SHT_LOUSER
 0x80000000

	)

348 
	#SHT_HIUSER
 0x8ffffff‡

	)

352 
	#SHF_WRITE
 (1 << 0Ë

	)

353 
	#SHF_ALLOC
 (1 << 1Ë

	)

354 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

355 
	#SHF_MERGE
 (1 << 4Ë

	)

356 
	#SHF_STRINGS
 (1 << 5Ë

	)

357 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

358 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

359 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

361 
	#SHF_GROUP
 (1 << 9Ë

	)

362 
	#SHF_TLS
 (1 << 10Ë

	)

363 
	#SHF_MASKOS
 0x0ff00000

	)

364 
	#SHF_MASKPROC
 0xf0000000

	)

365 
	#SHF_ORDERED
 (1 << 30Ë

	)

367 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

371 
	#GRP_COMDAT
 0x1

	)

377 
Elf32_W‹d
 
	m°_«me
;

378 
Elf32_Addr
 
	m°_vÆue
;

379 
Elf32_W‹d
 
	m°_size
;

380 
	m°_öfo
;

381 
	m°_Ÿhî
;

382 
Elf32_Se˘i⁄
 
	m°_shndx
;

383 } 
	tElf32_Sym
;

387 
Elf64_W‹d
 
	m°_«me
;

388 
	m°_öfo
;

389 
	m°_Ÿhî
;

390 
Elf64_Se˘i⁄
 
	m°_shndx
;

391 
Elf64_Addr
 
	m°_vÆue
;

392 
Elf64_Xw‹d
 
	m°_size
;

393 } 
	tElf64_Sym
;

400 
Elf32_HÆf
 
	msi_boundto
;

401 
Elf32_HÆf
 
	msi_Êags
;

402 } 
	tElf32_Symöfo
;

406 
Elf64_HÆf
 
	msi_boundto
;

407 
Elf64_HÆf
 
	msi_Êags
;

408 } 
	tElf64_Symöfo
;

411 
	#SYMINFO_BT_SELF
 0xfff‡

	)

412 
	#SYMINFO_BT_PARENT
 0xff„

	)

413 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

416 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

417 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

418 
	#SYMINFO_FLG_COPY
 0x0004

	)

419 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

422 
	#SYMINFO_NONE
 0

	)

423 
	#SYMINFO_CURRENT
 1

	)

424 
	#SYMINFO_NUM
 2

	)

429 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

430 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

431 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

434 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

435 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

436 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

440 
	#STB_LOCAL
 0

	)

441 
	#STB_GLOBAL
 1

	)

442 
	#STB_WEAK
 2

	)

443 
	#STB_NUM
 3

	)

444 
	#STB_LOOS
 10

	)

445 
	#STB_HIOS
 12

	)

446 
	#STB_LOPROC
 13

	)

447 
	#STB_HIPROC
 15

	)

451 
	#STT_NOTYPE
 0

	)

452 
	#STT_OBJECT
 1

	)

453 
	#STT_FUNC
 2

	)

454 
	#STT_SECTION
 3

	)

455 
	#STT_FILE
 4

	)

456 
	#STT_COMMON
 5

	)

457 
	#STT_TLS
 6

	)

458 
	#STT_NUM
 7

	)

459 
	#STT_LOOS
 10

	)

460 
	#STT_HIOS
 12

	)

461 
	#STT_LOPROC
 13

	)

462 
	#STT_HIPROC
 15

	)

469 
	#STN_UNDEF
 0

	)

474 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

477 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

480 
	#STV_DEFAULT
 0

	)

481 
	#STV_INTERNAL
 1

	)

482 
	#STV_HIDDEN
 2

	)

483 
	#STV_PROTECTED
 3

	)

490 
Elf32_Addr
 
	mr_off£t
;

491 
Elf32_W‹d
 
	mr_öfo
;

492 } 
	tElf32_Rñ
;

501 
Elf64_Addr
 
	mr_off£t
;

502 
Elf64_Xw‹d
 
	mr_öfo
;

503 } 
	tElf64_Rñ
;

509 
Elf32_Addr
 
	mr_off£t
;

510 
Elf32_W‹d
 
	mr_öfo
;

511 
Elf32_Sw‹d
 
	mr_addíd
;

512 } 
	tElf32_Rña
;

516 
Elf64_Addr
 
	mr_off£t
;

517 
Elf64_Xw‹d
 
	mr_öfo
;

518 
Elf64_Sxw‹d
 
	mr_addíd
;

519 } 
	tElf64_Rña
;

523 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

524 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

525 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

527 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

528 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

529 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

535 
Elf32_W‹d
 
	mp_ty≥
;

536 
Elf32_Off
 
	mp_off£t
;

537 
Elf32_Addr
 
	mp_vaddr
;

538 
Elf32_Addr
 
	mp_∑ddr
;

539 
Elf32_W‹d
 
	mp_fûesz
;

540 
Elf32_W‹d
 
	mp_memsz
;

541 
Elf32_W‹d
 
	mp_Êags
;

542 
Elf32_W‹d
 
	mp_Æign
;

543 } 
	tElf32_Phdr
;

547 
Elf64_W‹d
 
	mp_ty≥
;

548 
Elf64_W‹d
 
	mp_Êags
;

549 
Elf64_Off
 
	mp_off£t
;

550 
Elf64_Addr
 
	mp_vaddr
;

551 
Elf64_Addr
 
	mp_∑ddr
;

552 
Elf64_Xw‹d
 
	mp_fûesz
;

553 
Elf64_Xw‹d
 
	mp_memsz
;

554 
Elf64_Xw‹d
 
	mp_Æign
;

555 } 
	tElf64_Phdr
;

559 
	#PT_NULL
 0

	)

560 
	#PT_LOAD
 1

	)

561 
	#PT_DYNAMIC
 2

	)

562 
	#PT_INTERP
 3

	)

563 
	#PT_NOTE
 4

	)

564 
	#PT_SHLIB
 5

	)

565 
	#PT_PHDR
 6

	)

566 
	#PT_TLS
 7

	)

567 
	#PT_NUM
 8

	)

568 
	#PT_LOOS
 0x60000000

	)

569 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

570 
	#PT_GNU_STACK
 0x6474e551

	)

571 
	#PT_GNU_RELRO
 0x6474e552

	)

572 
	#PT_LOSUNW
 0x6fffffÁ

	)

573 
	#PT_SUNWBSS
 0x6fffffÁ

	)

574 
	#PT_SUNWSTACK
 0x6ffffffb

	)

575 
	#PT_HISUNW
 0x6fffffff

	)

576 
	#PT_HIOS
 0x6ffffff‡

	)

577 
	#PT_LOPROC
 0x70000000

	)

578 
	#PT_HIPROC
 0x7ffffff‡

	)

582 
	#PF_X
 (1 << 0Ë

	)

583 
	#PF_W
 (1 << 1Ë

	)

584 
	#PF_R
 (1 << 2Ë

	)

585 
	#PF_MASKOS
 0x0ff00000

	)

586 
	#PF_MASKPROC
 0xf0000000

	)

590 
	#NT_PRSTATUS
 1

	)

591 
	#NT_FPREGSET
 2

	)

592 
	#NT_PRPSINFO
 3

	)

593 
	#NT_PRXREG
 4

	)

594 
	#NT_TASKSTRUCT
 4

	)

595 
	#NT_PLATFORM
 5

	)

596 
	#NT_AUXV
 6

	)

597 
	#NT_GWINDOWS
 7

	)

598 
	#NT_ASRS
 8

	)

599 
	#NT_PSTATUS
 10

	)

600 
	#NT_PSINFO
 13

	)

601 
	#NT_PRCRED
 14

	)

602 
	#NT_UTSNAME
 15

	)

603 
	#NT_LWPSTATUS
 16

	)

604 
	#NT_LWPSINFO
 17

	)

605 
	#NT_PRFPXREG
 20

	)

609 
	#NT_VERSION
 1

	)

616 
Elf32_Sw‹d
 
	md_èg
;

619 
Elf32_W‹d
 
	md_vÆ
;

620 
Elf32_Addr
 
	md_±r
;

621 } 
	md_un
;

622 } 
	tElf32_Dyn
;

626 
Elf64_Sxw‹d
 
	md_èg
;

629 
Elf64_Xw‹d
 
	md_vÆ
;

630 
Elf64_Addr
 
	md_±r
;

631 } 
	md_un
;

632 } 
	tElf64_Dyn
;

636 
	#DT_NULL
 0

	)

637 
	#DT_NEEDED
 1

	)

638 
	#DT_PLTRELSZ
 2

	)

639 
	#DT_PLTGOT
 3

	)

640 
	#DT_HASH
 4

	)

641 
	#DT_STRTAB
 5

	)

642 
	#DT_SYMTAB
 6

	)

643 
	#DT_RELA
 7

	)

644 
	#DT_RELASZ
 8

	)

645 
	#DT_RELAENT
 9

	)

646 
	#DT_STRSZ
 10

	)

647 
	#DT_SYMENT
 11

	)

648 
	#DT_INIT
 12

	)

649 
	#DT_FINI
 13

	)

650 
	#DT_SONAME
 14

	)

651 
	#DT_RPATH
 15

	)

652 
	#DT_SYMBOLIC
 16

	)

653 
	#DT_REL
 17

	)

654 
	#DT_RELSZ
 18

	)

655 
	#DT_RELENT
 19

	)

656 
	#DT_PLTREL
 20

	)

657 
	#DT_DEBUG
 21

	)

658 
	#DT_TEXTREL
 22

	)

659 
	#DT_JMPREL
 23

	)

660 
	#DT_BIND_NOW
 24

	)

661 
	#DT_INIT_ARRAY
 25

	)

662 
	#DT_FINI_ARRAY
 26

	)

663 
	#DT_INIT_ARRAYSZ
 27

	)

664 
	#DT_FINI_ARRAYSZ
 28

	)

665 
	#DT_RUNPATH
 29

	)

666 
	#DT_FLAGS
 30

	)

667 
	#DT_ENCODING
 32

	)

668 
	#DT_PREINIT_ARRAY
 32

	)

669 
	#DT_PREINIT_ARRAYSZ
 33

	)

670 
	#DT_NUM
 34

	)

671 
	#DT_LOOS
 0x6000000d

	)

672 
	#DT_HIOS
 0x6ffff000

	)

673 
	#DT_LOPROC
 0x70000000

	)

674 
	#DT_HIPROC
 0x7ffffff‡

	)

675 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

680 
	#DT_VALRNGLO
 0x6ffffd00

	)

681 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

682 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

683 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

684 
	#DT_CHECKSUM
 0x6ffffdf8

	)

685 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

686 
	#DT_MOVEENT
 0x6ffffdÁ

	)

687 
	#DT_MOVESZ
 0x6ffffdfb

	)

688 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

689 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

691 
	#DT_SYMINSZ
 0x6ffffd„

	)

692 
	#DT_SYMINENT
 0x6ffffdf‡

	)

693 
	#DT_VALRNGHI
 0x6ffffdff

	)

694 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

695 
	#DT_VALNUM
 12

	)

702 
	#DT_ADDRRNGLO
 0x6fff„00

	)

703 
	#DT_GNU_HASH
 0x6fff„f5

	)

704 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

705 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

706 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

707 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

708 
	#DT_CONFIG
 0x6fff„Á

	)

709 
	#DT_DEPAUDIT
 0x6fff„fb

	)

710 
	#DT_AUDIT
 0x6fff„f¯

	)

711 
	#DT_PLTPAD
 0x6fff„fd

	)

712 
	#DT_MOVETAB
 0x6fff„„

	)

713 
	#DT_SYMINFO
 0x6fff„f‡

	)

714 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

715 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

716 
	#DT_ADDRNUM
 11

	)

720 
	#DT_VERSYM
 0x6ffffff0

	)

722 
	#DT_RELACOUNT
 0x6ffffff9

	)

723 
	#DT_RELCOUNT
 0x6fffffÁ

	)

726 
	#DT_FLAGS_1
 0x6ffffffb

	)

727 
	#DT_VERDEF
 0x6ffffff¯

	)

729 
	#DT_VERDEFNUM
 0x6ffffffd

	)

730 
	#DT_VERNEED
 0x6fffff„

	)

732 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

733 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

734 
	#DT_VERSIONTAGNUM
 16

	)

738 
	#DT_AUXILIARY
 0x7ffffffd

	)

739 
	#DT_FILTER
 0x7ffffff‡

	)

740 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

741 
	#DT_EXTRANUM
 3

	)

744 
	#DF_ORIGIN
 0x00000001

	)

745 
	#DF_SYMBOLIC
 0x00000002

	)

746 
	#DF_TEXTREL
 0x00000004

	)

747 
	#DF_BIND_NOW
 0x00000008

	)

748 
	#DF_STATIC_TLS
 0x00000010

	)

752 
	#DF_1_NOW
 0x00000001

	)

753 
	#DF_1_GLOBAL
 0x00000002

	)

754 
	#DF_1_GROUP
 0x00000004

	)

755 
	#DF_1_NODELETE
 0x00000008

	)

756 
	#DF_1_LOADFLTR
 0x00000010

	)

757 
	#DF_1_INITFIRST
 0x00000020

	)

758 
	#DF_1_NOOPEN
 0x00000040

	)

759 
	#DF_1_ORIGIN
 0x00000080

	)

760 
	#DF_1_DIRECT
 0x00000100

	)

761 
	#DF_1_TRANS
 0x00000200

	)

762 
	#DF_1_INTERPOSE
 0x00000400

	)

763 
	#DF_1_NODEFLIB
 0x00000800

	)

764 
	#DF_1_NODUMP
 0x00001000

	)

765 
	#DF_1_CONFALT
 0x00002000

	)

766 
	#DF_1_ENDFILTEE
 0x00004000

	)

767 
	#DF_1_DISPRELDNE
 0x00008000

	)

768 
	#DF_1_DISPRELPND
 0x00010000

	)

771 
	#DTF_1_PARINIT
 0x00000001

	)

772 
	#DTF_1_CONFEXP
 0x00000002

	)

775 
	#DF_P1_LAZYLOAD
 0x00000001

	)

776 
	#DF_P1_GROUPPERM
 0x00000002

	)

783 
Elf32_HÆf
 
	mvd_vîsi⁄
;

784 
Elf32_HÆf
 
	mvd_Êags
;

785 
Elf32_HÆf
 
	mvd_ndx
;

786 
Elf32_HÆf
 
	mvd_˙t
;

787 
Elf32_W‹d
 
	mvd_hash
;

788 
Elf32_W‹d
 
	mvd_aux
;

789 
Elf32_W‹d
 
	mvd_√xt
;

791 } 
	tElf32_Vîdef
;

795 
Elf64_HÆf
 
	mvd_vîsi⁄
;

796 
Elf64_HÆf
 
	mvd_Êags
;

797 
Elf64_HÆf
 
	mvd_ndx
;

798 
Elf64_HÆf
 
	mvd_˙t
;

799 
Elf64_W‹d
 
	mvd_hash
;

800 
Elf64_W‹d
 
	mvd_aux
;

801 
Elf64_W‹d
 
	mvd_√xt
;

803 } 
	tElf64_Vîdef
;

807 
	#VER_DEF_NONE
 0

	)

808 
	#VER_DEF_CURRENT
 1

	)

809 
	#VER_DEF_NUM
 2

	)

812 
	#VER_FLG_BASE
 0x1

	)

813 
	#VER_FLG_WEAK
 0x2

	)

816 
	#VER_NDX_LOCAL
 0

	)

817 
	#VER_NDX_GLOBAL
 1

	)

818 
	#VER_NDX_LORESERVE
 0xff00

	)

819 
	#VER_NDX_ELIMINATE
 0xff01

	)

825 
Elf32_W‹d
 
	mvda_«me
;

826 
Elf32_W‹d
 
	mvda_√xt
;

828 } 
	tElf32_Vîdaux
;

832 
Elf64_W‹d
 
	mvda_«me
;

833 
Elf64_W‹d
 
	mvda_√xt
;

835 } 
	tElf64_Vîdaux
;

842 
Elf32_HÆf
 
	mvn_vîsi⁄
;

843 
Elf32_HÆf
 
	mvn_˙t
;

844 
Elf32_W‹d
 
	mvn_fûe
;

846 
Elf32_W‹d
 
	mvn_aux
;

847 
Elf32_W‹d
 
	mvn_√xt
;

849 } 
	tElf32_Vî√ed
;

853 
Elf64_HÆf
 
	mvn_vîsi⁄
;

854 
Elf64_HÆf
 
	mvn_˙t
;

855 
Elf64_W‹d
 
	mvn_fûe
;

857 
Elf64_W‹d
 
	mvn_aux
;

858 
Elf64_W‹d
 
	mvn_√xt
;

860 } 
	tElf64_Vî√ed
;

864 
	#VER_NEED_NONE
 0

	)

865 
	#VER_NEED_CURRENT
 1

	)

866 
	#VER_NEED_NUM
 2

	)

872 
Elf32_W‹d
 
	mv«_hash
;

873 
Elf32_HÆf
 
	mv«_Êags
;

874 
Elf32_HÆf
 
	mv«_Ÿhî
;

875 
Elf32_W‹d
 
	mv«_«me
;

876 
Elf32_W‹d
 
	mv«_√xt
;

878 } 
	tElf32_Vî«ux
;

882 
Elf64_W‹d
 
	mv«_hash
;

883 
Elf64_HÆf
 
	mv«_Êags
;

884 
Elf64_HÆf
 
	mv«_Ÿhî
;

885 
Elf64_W‹d
 
	mv«_«me
;

886 
Elf64_W‹d
 
	mv«_√xt
;

888 } 
	tElf64_Vî«ux
;

892 
	#VER_FLG_WEAK
 0x2

	)

906 
uöt32_t
 
	ma_ty≥
;

909 
uöt32_t
 
	ma_vÆ
;

913 } 
	ma_un
;

914 } 
	tElf32_auxv_t
;

918 
uöt64_t
 
	ma_ty≥
;

921 
uöt64_t
 
	ma_vÆ
;

925 } 
	ma_un
;

926 } 
	tElf64_auxv_t
;

930 
	#AT_NULL
 0

	)

931 
	#AT_IGNORE
 1

	)

932 
	#AT_EXECFD
 2

	)

933 
	#AT_PHDR
 3

	)

934 
	#AT_PHENT
 4

	)

935 
	#AT_PHNUM
 5

	)

936 
	#AT_PAGESZ
 6

	)

937 
	#AT_BASE
 7

	)

938 
	#AT_FLAGS
 8

	)

939 
	#AT_ENTRY
 9

	)

940 
	#AT_NOTELF
 10

	)

941 
	#AT_UID
 11

	)

942 
	#AT_EUID
 12

	)

943 
	#AT_GID
 13

	)

944 
	#AT_EGID
 14

	)

945 
	#AT_CLKTCK
 17

	)

948 
	#AT_PLATFORM
 15

	)

949 
	#AT_HWCAP
 16

	)

954 
	#AT_FPUCW
 18

	)

957 
	#AT_DCACHEBSIZE
 19

	)

958 
	#AT_ICACHEBSIZE
 20

	)

959 
	#AT_UCACHEBSIZE
 21

	)

963 
	#AT_IGNOREPPC
 22

	)

965 
	#AT_SECURE
 23

	)

969 
	#AT_SYSINFO
 32

	)

970 
	#AT_SYSINFO_EHDR
 33

	)

974 
	#AT_L1I_CACHESHAPE
 34

	)

975 
	#AT_L1D_CACHESHAPE
 35

	)

976 
	#AT_L2_CACHESHAPE
 36

	)

977 
	#AT_L3_CACHESHAPE
 37

	)

984 
Elf32_W‹d
 
	mn_«mesz
;

985 
Elf32_W‹d
 
	mn_descsz
;

986 
Elf32_W‹d
 
	mn_ty≥
;

987 } 
	tElf32_Nhdr
;

991 
Elf64_W‹d
 
	mn_«mesz
;

992 
Elf64_W‹d
 
	mn_descsz
;

993 
Elf64_W‹d
 
	mn_ty≥
;

994 } 
	tElf64_Nhdr
;

999 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1002 
	#ELF_NOTE_GNU
 "GNU"

	)

1008 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1019 
	#ELF_NOTE_ABI
 1

	)

1023 
	#ELF_NOTE_OS_LINUX
 0

	)

1024 
	#ELF_NOTE_OS_GNU
 1

	)

1025 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1026 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1032 
Elf32_Xw‹d
 
	mm_vÆue
;

1033 
Elf32_W‹d
 
	mm_öfo
;

1034 
Elf32_W‹d
 
	mm_poff£t
;

1035 
Elf32_HÆf
 
	mm_ª≥©
;

1036 
Elf32_HÆf
 
	mm_°ride
;

1037 } 
	tElf32_Move
;

1041 
Elf64_Xw‹d
 
	mm_vÆue
;

1042 
Elf64_Xw‹d
 
	mm_öfo
;

1043 
Elf64_Xw‹d
 
	mm_poff£t
;

1044 
Elf64_HÆf
 
	mm_ª≥©
;

1045 
Elf64_HÆf
 
	mm_°ride
;

1046 } 
	tElf64_Move
;

1049 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1050 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1051 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1053 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1054 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1055 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1061 
	#EF_CPU32
 0x00810000

	)

1065 
	#R_68K_NONE
 0

	)

1066 
	#R_68K_32
 1

	)

1067 
	#R_68K_16
 2

	)

1068 
	#R_68K_8
 3

	)

1069 
	#R_68K_PC32
 4

	)

1070 
	#R_68K_PC16
 5

	)

1071 
	#R_68K_PC8
 6

	)

1072 
	#R_68K_GOT32
 7

	)

1073 
	#R_68K_GOT16
 8

	)

1074 
	#R_68K_GOT8
 9

	)

1075 
	#R_68K_GOT32O
 10

	)

1076 
	#R_68K_GOT16O
 11

	)

1077 
	#R_68K_GOT8O
 12

	)

1078 
	#R_68K_PLT32
 13

	)

1079 
	#R_68K_PLT16
 14

	)

1080 
	#R_68K_PLT8
 15

	)

1081 
	#R_68K_PLT32O
 16

	)

1082 
	#R_68K_PLT16O
 17

	)

1083 
	#R_68K_PLT8O
 18

	)

1084 
	#R_68K_COPY
 19

	)

1085 
	#R_68K_GLOB_DAT
 20

	)

1086 
	#R_68K_JMP_SLOT
 21

	)

1087 
	#R_68K_RELATIVE
 22

	)

1089 
	#R_68K_NUM
 23

	)

1095 
	#R_386_NONE
 0

	)

1096 
	#R_386_32
 1

	)

1097 
	#R_386_PC32
 2

	)

1098 
	#R_386_GOT32
 3

	)

1099 
	#R_386_PLT32
 4

	)

1100 
	#R_386_COPY
 5

	)

1101 
	#R_386_GLOB_DAT
 6

	)

1102 
	#R_386_JMP_SLOT
 7

	)

1103 
	#R_386_RELATIVE
 8

	)

1104 
	#R_386_GOTOFF
 9

	)

1105 
	#R_386_GOTPC
 10

	)

1106 
	#R_386_32PLT
 11

	)

1107 
	#R_386_TLS_TPOFF
 14

	)

1108 
	#R_386_TLS_IE
 15

	)

1110 
	#R_386_TLS_GOTIE
 16

	)

1112 
	#R_386_TLS_LE
 17

	)

1114 
	#R_386_TLS_GD
 18

	)

1116 
	#R_386_TLS_LDM
 19

	)

1119 
	#R_386_16
 20

	)

1120 
	#R_386_PC16
 21

	)

1121 
	#R_386_8
 22

	)

1122 
	#R_386_PC8
 23

	)

1123 
	#R_386_TLS_GD_32
 24

	)

1125 
	#R_386_TLS_GD_PUSH
 25

	)

1126 
	#R_386_TLS_GD_CALL
 26

	)

1128 
	#R_386_TLS_GD_POP
 27

	)

1129 
	#R_386_TLS_LDM_32
 28

	)

1131 
	#R_386_TLS_LDM_PUSH
 29

	)

1132 
	#R_386_TLS_LDM_CALL
 30

	)

1134 
	#R_386_TLS_LDM_POP
 31

	)

1135 
	#R_386_TLS_LDO_32
 32

	)

1136 
	#R_386_TLS_IE_32
 33

	)

1138 
	#R_386_TLS_LE_32
 34

	)

1140 
	#R_386_TLS_DTPMOD32
 35

	)

1141 
	#R_386_TLS_DTPOFF32
 36

	)

1142 
	#R_386_TLS_TPOFF32
 37

	)

1144 
	#R_386_NUM
 38

	)

1150 
	#STT_SPARC_REGISTER
 13

	)

1154 
	#EF_SPARCV9_MM
 3

	)

1155 
	#EF_SPARCV9_TSO
 0

	)

1156 
	#EF_SPARCV9_PSO
 1

	)

1157 
	#EF_SPARCV9_RMO
 2

	)

1158 
	#EF_SPARC_LEDATA
 0x800000

	)

1159 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1160 
	#EF_SPARC_32PLUS
 0x000100

	)

1161 
	#EF_SPARC_SUN_US1
 0x000200

	)

1162 
	#EF_SPARC_HAL_R1
 0x000400

	)

1163 
	#EF_SPARC_SUN_US3
 0x000800

	)

1167 
	#R_SPARC_NONE
 0

	)

1168 
	#R_SPARC_8
 1

	)

1169 
	#R_SPARC_16
 2

	)

1170 
	#R_SPARC_32
 3

	)

1171 
	#R_SPARC_DISP8
 4

	)

1172 
	#R_SPARC_DISP16
 5

	)

1173 
	#R_SPARC_DISP32
 6

	)

1174 
	#R_SPARC_WDISP30
 7

	)

1175 
	#R_SPARC_WDISP22
 8

	)

1176 
	#R_SPARC_HI22
 9

	)

1177 
	#R_SPARC_22
 10

	)

1178 
	#R_SPARC_13
 11

	)

1179 
	#R_SPARC_LO10
 12

	)

1180 
	#R_SPARC_GOT10
 13

	)

1181 
	#R_SPARC_GOT13
 14

	)

1182 
	#R_SPARC_GOT22
 15

	)

1183 
	#R_SPARC_PC10
 16

	)

1184 
	#R_SPARC_PC22
 17

	)

1185 
	#R_SPARC_WPLT30
 18

	)

1186 
	#R_SPARC_COPY
 19

	)

1187 
	#R_SPARC_GLOB_DAT
 20

	)

1188 
	#R_SPARC_JMP_SLOT
 21

	)

1189 
	#R_SPARC_RELATIVE
 22

	)

1190 
	#R_SPARC_UA32
 23

	)

1194 
	#R_SPARC_PLT32
 24

	)

1195 
	#R_SPARC_HIPLT22
 25

	)

1196 
	#R_SPARC_LOPLT10
 26

	)

1197 
	#R_SPARC_PCPLT32
 27

	)

1198 
	#R_SPARC_PCPLT22
 28

	)

1199 
	#R_SPARC_PCPLT10
 29

	)

1200 
	#R_SPARC_10
 30

	)

1201 
	#R_SPARC_11
 31

	)

1202 
	#R_SPARC_64
 32

	)

1203 
	#R_SPARC_OLO10
 33

	)

1204 
	#R_SPARC_HH22
 34

	)

1205 
	#R_SPARC_HM10
 35

	)

1206 
	#R_SPARC_LM22
 36

	)

1207 
	#R_SPARC_PC_HH22
 37

	)

1208 
	#R_SPARC_PC_HM10
 38

	)

1209 
	#R_SPARC_PC_LM22
 39

	)

1210 
	#R_SPARC_WDISP16
 40

	)

1211 
	#R_SPARC_WDISP19
 41

	)

1212 
	#R_SPARC_7
 43

	)

1213 
	#R_SPARC_5
 44

	)

1214 
	#R_SPARC_6
 45

	)

1215 
	#R_SPARC_DISP64
 46

	)

1216 
	#R_SPARC_PLT64
 47

	)

1217 
	#R_SPARC_HIX22
 48

	)

1218 
	#R_SPARC_LOX10
 49

	)

1219 
	#R_SPARC_H44
 50

	)

1220 
	#R_SPARC_M44
 51

	)

1221 
	#R_SPARC_L44
 52

	)

1222 
	#R_SPARC_REGISTER
 53

	)

1223 
	#R_SPARC_UA64
 54

	)

1224 
	#R_SPARC_UA16
 55

	)

1225 
	#R_SPARC_TLS_GD_HI22
 56

	)

1226 
	#R_SPARC_TLS_GD_LO10
 57

	)

1227 
	#R_SPARC_TLS_GD_ADD
 58

	)

1228 
	#R_SPARC_TLS_GD_CALL
 59

	)

1229 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1230 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1231 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1232 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1233 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1234 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1235 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1236 
	#R_SPARC_TLS_IE_HI22
 67

	)

1237 
	#R_SPARC_TLS_IE_LO10
 68

	)

1238 
	#R_SPARC_TLS_IE_LD
 69

	)

1239 
	#R_SPARC_TLS_IE_LDX
 70

	)

1240 
	#R_SPARC_TLS_IE_ADD
 71

	)

1241 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1242 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1243 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1244 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1245 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1246 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1247 
	#R_SPARC_TLS_TPOFF32
 78

	)

1248 
	#R_SPARC_TLS_TPOFF64
 79

	)

1250 
	#R_SPARC_NUM
 80

	)

1254 
	#DT_SPARC_REGISTER
 0x70000001

	)

1255 
	#DT_SPARC_NUM
 2

	)

1259 
	#HWCAP_SPARC_FLUSH
 1

	)

1260 
	#HWCAP_SPARC_STBAR
 2

	)

1261 
	#HWCAP_SPARC_SWAP
 4

	)

1262 
	#HWCAP_SPARC_MULDIV
 8

	)

1263 
	#HWCAP_SPARC_V9
 16

	)

1264 
	#HWCAP_SPARC_ULTRA3
 32

	)

1265 
	#HWCAP_SPARC_BLKINIT
 64

	)

1271 
	#EF_MIPS_NOREORDER
 1

	)

1272 
	#EF_MIPS_PIC
 2

	)

1273 
	#EF_MIPS_CPIC
 4

	)

1274 
	#EF_MIPS_XGOT
 8

	)

1275 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1276 
	#EF_MIPS_ABI2
 32

	)

1277 
	#EF_MIPS_ABI_ON32
 64

	)

1278 
	#EF_MIPS_ARCH
 0xf0000000

	)

1282 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1283 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1284 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1285 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1286 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1287 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1288 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1292 
	#E_MIPS_ARCH_1
 0x00000000

	)

1293 
	#E_MIPS_ARCH_2
 0x10000000

	)

1294 
	#E_MIPS_ARCH_3
 0x20000000

	)

1295 
	#E_MIPS_ARCH_4
 0x30000000

	)

1296 
	#E_MIPS_ARCH_5
 0x40000000

	)

1297 
	#E_MIPS_ARCH_32
 0x60000000

	)

1298 
	#E_MIPS_ARCH_64
 0x70000000

	)

1302 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1303 
	#SHN_MIPS_TEXT
 0xff01

	)

1304 
	#SHN_MIPS_DATA
 0xff02

	)

1305 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1306 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1310 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1311 
	#SHT_MIPS_MSYM
 0x70000001

	)

1312 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1313 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1314 
	#SHT_MIPS_UCODE
 0x70000004

	)

1315 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1316 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1317 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1318 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1319 
	#SHT_MIPS_RELD
 0x70000009

	)

1320 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1321 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1322 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1323 
	#SHT_MIPS_SHDR
 0x70000010

	)

1324 
	#SHT_MIPS_FDESC
 0x70000011

	)

1325 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1326 
	#SHT_MIPS_DENSE
 0x70000013

	)

1327 
	#SHT_MIPS_PDESC
 0x70000014

	)

1328 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1329 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1330 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1331 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1332 
	#SHT_MIPS_LINE
 0x70000019

	)

1333 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1334 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1335 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1336 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1337 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1338 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1339 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1340 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1341 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1342 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1343 
	#SHT_MIPS_XLATE
 0x70000024

	)

1344 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1345 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1346 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1347 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1348 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1352 
	#SHF_MIPS_GPREL
 0x10000000

	)

1353 
	#SHF_MIPS_MERGE
 0x20000000

	)

1354 
	#SHF_MIPS_ADDR
 0x40000000

	)

1355 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1356 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1357 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1358 
	#SHF_MIPS_NAMES
 0x02000000

	)

1359 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1365 
	#STO_MIPS_DEFAULT
 0x0

	)

1366 
	#STO_MIPS_INTERNAL
 0x1

	)

1367 
	#STO_MIPS_HIDDEN
 0x2

	)

1368 
	#STO_MIPS_PROTECTED
 0x3

	)

1369 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1372 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1380 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1381 
Elf32_W‹d
 
	mgt_unu£d
;

1382 } 
	mgt_hódî
;

1385 
Elf32_W‹d
 
	mgt_g_vÆue
;

1386 
Elf32_W‹d
 
	mgt_byãs
;

1387 } 
	mgt_íåy
;

1388 } 
	tElf32_g±ab
;

1394 
Elf32_W‹d
 
	mri_g¥mask
;

1395 
Elf32_W‹d
 
	mri_˝rmask
[4];

1396 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1397 } 
	tElf32_RegInfo
;

1403 
	mköd
;

1405 
	msize
;

1406 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1408 
Elf32_W‹d
 
	möfo
;

1409 } 
	tElf_O±i⁄s
;

1413 
	#ODK_NULL
 0

	)

1414 
	#ODK_REGINFO
 1

	)

1415 
	#ODK_EXCEPTIONS
 2

	)

1416 
	#ODK_PAD
 3

	)

1417 
	#ODK_HWPATCH
 4

	)

1418 
	#ODK_FILL
 5

	)

1419 
	#ODK_TAGS
 6

	)

1420 
	#ODK_HWAND
 7

	)

1421 
	#ODK_HWOR
 8

	)

1425 
	#OEX_FPU_MIN
 0x1‡

	)

1426 
	#OEX_FPU_MAX
 0x1f00

	)

1427 
	#OEX_PAGE0
 0x10000

	)

1428 
	#OEX_SMM
 0x20000

	)

1429 
	#OEX_FPDBUG
 0x40000

	)

1430 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1431 
	#OEX_DISMISS
 0x80000

	)

1433 
	#OEX_FPU_INVAL
 0x10

	)

1434 
	#OEX_FPU_DIV0
 0x08

	)

1435 
	#OEX_FPU_OFLO
 0x04

	)

1436 
	#OEX_FPU_UFLO
 0x02

	)

1437 
	#OEX_FPU_INEX
 0x01

	)

1441 
	#OHW_R4KEOP
 0x1

	)

1442 
	#OHW_R8KPFETCH
 0x2

	)

1443 
	#OHW_R5KEOP
 0x4

	)

1444 
	#OHW_R5KCVTL
 0x8

	)

1446 
	#OPAD_PREFIX
 0x1

	)

1447 
	#OPAD_POSTFIX
 0x2

	)

1448 
	#OPAD_SYMBOL
 0x4

	)

1454 
Elf32_W‹d
 
	mhwp_Êags1
;

1455 
Elf32_W‹d
 
	mhwp_Êags2
;

1456 } 
	tElf_O±i⁄s_Hw
;

1460 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1461 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1465 
	#R_MIPS_NONE
 0

	)

1466 
	#R_MIPS_16
 1

	)

1467 
	#R_MIPS_32
 2

	)

1468 
	#R_MIPS_REL32
 3

	)

1469 
	#R_MIPS_26
 4

	)

1470 
	#R_MIPS_HI16
 5

	)

1471 
	#R_MIPS_LO16
 6

	)

1472 
	#R_MIPS_GPREL16
 7

	)

1473 
	#R_MIPS_LITERAL
 8

	)

1474 
	#R_MIPS_GOT16
 9

	)

1475 
	#R_MIPS_PC16
 10

	)

1476 
	#R_MIPS_CALL16
 11

	)

1477 
	#R_MIPS_GPREL32
 12

	)

1479 
	#R_MIPS_SHIFT5
 16

	)

1480 
	#R_MIPS_SHIFT6
 17

	)

1481 
	#R_MIPS_64
 18

	)

1482 
	#R_MIPS_GOT_DISP
 19

	)

1483 
	#R_MIPS_GOT_PAGE
 20

	)

1484 
	#R_MIPS_GOT_OFST
 21

	)

1485 
	#R_MIPS_GOT_HI16
 22

	)

1486 
	#R_MIPS_GOT_LO16
 23

	)

1487 
	#R_MIPS_SUB
 24

	)

1488 
	#R_MIPS_INSERT_A
 25

	)

1489 
	#R_MIPS_INSERT_B
 26

	)

1490 
	#R_MIPS_DELETE
 27

	)

1491 
	#R_MIPS_HIGHER
 28

	)

1492 
	#R_MIPS_HIGHEST
 29

	)

1493 
	#R_MIPS_CALL_HI16
 30

	)

1494 
	#R_MIPS_CALL_LO16
 31

	)

1495 
	#R_MIPS_SCN_DISP
 32

	)

1496 
	#R_MIPS_REL16
 33

	)

1497 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1498 
	#R_MIPS_PJUMP
 35

	)

1499 
	#R_MIPS_RELGOT
 36

	)

1500 
	#R_MIPS_JALR
 37

	)

1501 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1502 
	#R_MIPS_TLS_DTPREL32
 39

	)

1503 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1504 
	#R_MIPS_TLS_DTPREL64
 41

	)

1505 
	#R_MIPS_TLS_GD
 42

	)

1506 
	#R_MIPS_TLS_LDM
 43

	)

1507 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1508 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1509 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1510 
	#R_MIPS_TLS_TPREL32
 47

	)

1511 
	#R_MIPS_TLS_TPREL64
 48

	)

1512 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1513 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1515 
	#R_MIPS_NUM
 51

	)

1519 
	#PT_MIPS_REGINFO
 0x70000000

	)

1520 
	#PT_MIPS_RTPROC
 0x70000001

	)

1521 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1525 
	#PF_MIPS_LOCAL
 0x10000000

	)

1529 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1530 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1531 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1532 
	#DT_MIPS_IVERSION
 0x70000004

	)

1533 
	#DT_MIPS_FLAGS
 0x70000005

	)

1534 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1535 
	#DT_MIPS_MSYM
 0x70000007

	)

1536 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1537 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1538 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1539 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1540 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1541 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1542 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1543 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1544 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1545 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1546 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1547 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1549 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1550 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1552 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1553 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1555 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1557 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1559 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1561 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1563 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1564 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1565 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1566 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1567 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1568 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1569 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1570 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1571 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1572 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1573 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1574 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1576 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1578 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1579 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1580 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1581 
	#DT_MIPS_NUM
 0x32

	)

1585 
	#RHF_NONE
 0

	)

1586 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1587 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1588 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1589 
	#RHF_NO_MOVE
 (1 << 3)

	)

1590 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1591 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1592 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1593 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1594 
	#RHF_PIXIE
 (1 << 8)

	)

1595 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1596 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1597 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1598 
	#RHF_CORD
 (1 << 12)

	)

1599 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1600 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1606 
Elf32_W‹d
 
	ml_«me
;

1607 
Elf32_W‹d
 
	ml_time_°amp
;

1608 
Elf32_W‹d
 
	ml_checksum
;

1609 
Elf32_W‹d
 
	ml_vîsi⁄
;

1610 
Elf32_W‹d
 
	ml_Êags
;

1611 } 
	tElf32_Lib
;

1615 
Elf64_W‹d
 
	ml_«me
;

1616 
Elf64_W‹d
 
	ml_time_°amp
;

1617 
Elf64_W‹d
 
	ml_checksum
;

1618 
Elf64_W‹d
 
	ml_vîsi⁄
;

1619 
Elf64_W‹d
 
	ml_Êags
;

1620 } 
	tElf64_Lib
;

1625 
	#LL_NONE
 0

	)

1626 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1627 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1628 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1629 
	#LL_EXPORTS
 (1 << 3)

	)

1630 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1631 
	#LL_DELTA
 (1 << 5)

	)

1635 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1642 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1643 
	#EF_PARISC_EXT
 0x00020000

	)

1644 
	#EF_PARISC_LSB
 0x00040000

	)

1645 
	#EF_PARISC_WIDE
 0x00080000

	)

1646 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1648 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1649 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1653 
	#EFA_PARISC_1_0
 0x020b

	)

1654 
	#EFA_PARISC_1_1
 0x0210

	)

1655 
	#EFA_PARISC_2_0
 0x0214

	)

1659 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1661 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1665 
	#SHT_PARISC_EXT
 0x70000000

	)

1666 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1667 
	#SHT_PARISC_DOC
 0x70000002

	)

1671 
	#SHF_PARISC_SHORT
 0x20000000

	)

1672 
	#SHF_PARISC_HUGE
 0x40000000

	)

1673 
	#SHF_PARISC_SBP
 0x80000000

	)

1677 
	#STT_PARISC_MILLICODE
 13

	)

1679 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1680 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1684 
	#R_PARISC_NONE
 0

	)

1685 
	#R_PARISC_DIR32
 1

	)

1686 
	#R_PARISC_DIR21L
 2

	)

1687 
	#R_PARISC_DIR17R
 3

	)

1688 
	#R_PARISC_DIR17F
 4

	)

1689 
	#R_PARISC_DIR14R
 6

	)

1690 
	#R_PARISC_PCREL32
 9

	)

1691 
	#R_PARISC_PCREL21L
 10

	)

1692 
	#R_PARISC_PCREL17R
 11

	)

1693 
	#R_PARISC_PCREL17F
 12

	)

1694 
	#R_PARISC_PCREL14R
 14

	)

1695 
	#R_PARISC_DPREL21L
 18

	)

1696 
	#R_PARISC_DPREL14R
 22

	)

1697 
	#R_PARISC_GPREL21L
 26

	)

1698 
	#R_PARISC_GPREL14R
 30

	)

1699 
	#R_PARISC_LTOFF21L
 34

	)

1700 
	#R_PARISC_LTOFF14R
 38

	)

1701 
	#R_PARISC_SECREL32
 41

	)

1702 
	#R_PARISC_SEGBASE
 48

	)

1703 
	#R_PARISC_SEGREL32
 49

	)

1704 
	#R_PARISC_PLTOFF21L
 50

	)

1705 
	#R_PARISC_PLTOFF14R
 54

	)

1706 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1707 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1708 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1709 
	#R_PARISC_FPTR64
 64

	)

1710 
	#R_PARISC_PLABEL32
 65

	)

1711 
	#R_PARISC_PCREL64
 72

	)

1712 
	#R_PARISC_PCREL22F
 74

	)

1713 
	#R_PARISC_PCREL14WR
 75

	)

1714 
	#R_PARISC_PCREL14DR
 76

	)

1715 
	#R_PARISC_PCREL16F
 77

	)

1716 
	#R_PARISC_PCREL16WF
 78

	)

1717 
	#R_PARISC_PCREL16DF
 79

	)

1718 
	#R_PARISC_DIR64
 80

	)

1719 
	#R_PARISC_DIR14WR
 83

	)

1720 
	#R_PARISC_DIR14DR
 84

	)

1721 
	#R_PARISC_DIR16F
 85

	)

1722 
	#R_PARISC_DIR16WF
 86

	)

1723 
	#R_PARISC_DIR16DF
 87

	)

1724 
	#R_PARISC_GPREL64
 88

	)

1725 
	#R_PARISC_GPREL14WR
 91

	)

1726 
	#R_PARISC_GPREL14DR
 92

	)

1727 
	#R_PARISC_GPREL16F
 93

	)

1728 
	#R_PARISC_GPREL16WF
 94

	)

1729 
	#R_PARISC_GPREL16DF
 95

	)

1730 
	#R_PARISC_LTOFF64
 96

	)

1731 
	#R_PARISC_LTOFF14WR
 99

	)

1732 
	#R_PARISC_LTOFF14DR
 100

	)

1733 
	#R_PARISC_LTOFF16F
 101

	)

1734 
	#R_PARISC_LTOFF16WF
 102

	)

1735 
	#R_PARISC_LTOFF16DF
 103

	)

1736 
	#R_PARISC_SECREL64
 104

	)

1737 
	#R_PARISC_SEGREL64
 112

	)

1738 
	#R_PARISC_PLTOFF14WR
 115

	)

1739 
	#R_PARISC_PLTOFF14DR
 116

	)

1740 
	#R_PARISC_PLTOFF16F
 117

	)

1741 
	#R_PARISC_PLTOFF16WF
 118

	)

1742 
	#R_PARISC_PLTOFF16DF
 119

	)

1743 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1744 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1745 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1746 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1747 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1748 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1749 
	#R_PARISC_LORESERVE
 128

	)

1750 
	#R_PARISC_COPY
 128

	)

1751 
	#R_PARISC_IPLT
 129

	)

1752 
	#R_PARISC_EPLT
 130

	)

1753 
	#R_PARISC_TPREL32
 153

	)

1754 
	#R_PARISC_TPREL21L
 154

	)

1755 
	#R_PARISC_TPREL14R
 158

	)

1756 
	#R_PARISC_LTOFF_TP21L
 162

	)

1757 
	#R_PARISC_LTOFF_TP14R
 166

	)

1758 
	#R_PARISC_LTOFF_TP14F
 167

	)

1759 
	#R_PARISC_TPREL64
 216

	)

1760 
	#R_PARISC_TPREL14WR
 219

	)

1761 
	#R_PARISC_TPREL14DR
 220

	)

1762 
	#R_PARISC_TPREL16F
 221

	)

1763 
	#R_PARISC_TPREL16WF
 222

	)

1764 
	#R_PARISC_TPREL16DF
 223

	)

1765 
	#R_PARISC_LTOFF_TP64
 224

	)

1766 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1767 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1768 
	#R_PARISC_LTOFF_TP16F
 229

	)

1769 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1770 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1771 
	#R_PARISC_HIRESERVE
 255

	)

1775 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1776 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1777 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1778 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1779 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1780 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1781 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1782 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1783 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1784 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1785 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1786 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1787 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1788 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1789 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1791 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1792 
	#PT_PARISC_UNWIND
 0x70000001

	)

1796 
	#PF_PARISC_SBP
 0x08000000

	)

1798 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1799 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1800 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1801 
	#PF_HP_CODE
 0x01000000

	)

1802 
	#PF_HP_MODIFY
 0x02000000

	)

1803 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1804 
	#PF_HP_SBP
 0x08000000

	)

1811 
	#EF_ALPHA_32BIT
 1

	)

1812 
	#EF_ALPHA_CANRELAX
 2

	)

1817 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1818 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1822 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1825 
	#STO_ALPHA_NOPV
 0x80

	)

1826 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1830 
	#R_ALPHA_NONE
 0

	)

1831 
	#R_ALPHA_REFLONG
 1

	)

1832 
	#R_ALPHA_REFQUAD
 2

	)

1833 
	#R_ALPHA_GPREL32
 3

	)

1834 
	#R_ALPHA_LITERAL
 4

	)

1835 
	#R_ALPHA_LITUSE
 5

	)

1836 
	#R_ALPHA_GPDISP
 6

	)

1837 
	#R_ALPHA_BRADDR
 7

	)

1838 
	#R_ALPHA_HINT
 8

	)

1839 
	#R_ALPHA_SREL16
 9

	)

1840 
	#R_ALPHA_SREL32
 10

	)

1841 
	#R_ALPHA_SREL64
 11

	)

1842 
	#R_ALPHA_GPRELHIGH
 17

	)

1843 
	#R_ALPHA_GPRELLOW
 18

	)

1844 
	#R_ALPHA_GPREL16
 19

	)

1845 
	#R_ALPHA_COPY
 24

	)

1846 
	#R_ALPHA_GLOB_DAT
 25

	)

1847 
	#R_ALPHA_JMP_SLOT
 26

	)

1848 
	#R_ALPHA_RELATIVE
 27

	)

1849 
	#R_ALPHA_TLS_GD_HI
 28

	)

1850 
	#R_ALPHA_TLSGD
 29

	)

1851 
	#R_ALPHA_TLS_LDM
 30

	)

1852 
	#R_ALPHA_DTPMOD64
 31

	)

1853 
	#R_ALPHA_GOTDTPREL
 32

	)

1854 
	#R_ALPHA_DTPREL64
 33

	)

1855 
	#R_ALPHA_DTPRELHI
 34

	)

1856 
	#R_ALPHA_DTPRELLO
 35

	)

1857 
	#R_ALPHA_DTPREL16
 36

	)

1858 
	#R_ALPHA_GOTTPREL
 37

	)

1859 
	#R_ALPHA_TPREL64
 38

	)

1860 
	#R_ALPHA_TPRELHI
 39

	)

1861 
	#R_ALPHA_TPRELLO
 40

	)

1862 
	#R_ALPHA_TPREL16
 41

	)

1864 
	#R_ALPHA_NUM
 46

	)

1867 
	#LITUSE_ALPHA_ADDR
 0

	)

1868 
	#LITUSE_ALPHA_BASE
 1

	)

1869 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1870 
	#LITUSE_ALPHA_JSR
 3

	)

1871 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1872 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1875 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1876 
	#DT_ALPHA_NUM
 1

	)

1881 
	#EF_PPC_EMB
 0x80000000

	)

1884 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1885 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1889 
	#R_PPC_NONE
 0

	)

1890 
	#R_PPC_ADDR32
 1

	)

1891 
	#R_PPC_ADDR24
 2

	)

1892 
	#R_PPC_ADDR16
 3

	)

1893 
	#R_PPC_ADDR16_LO
 4

	)

1894 
	#R_PPC_ADDR16_HI
 5

	)

1895 
	#R_PPC_ADDR16_HA
 6

	)

1896 
	#R_PPC_ADDR14
 7

	)

1897 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1898 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1899 
	#R_PPC_REL24
 10

	)

1900 
	#R_PPC_REL14
 11

	)

1901 
	#R_PPC_REL14_BRTAKEN
 12

	)

1902 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1903 
	#R_PPC_GOT16
 14

	)

1904 
	#R_PPC_GOT16_LO
 15

	)

1905 
	#R_PPC_GOT16_HI
 16

	)

1906 
	#R_PPC_GOT16_HA
 17

	)

1907 
	#R_PPC_PLTREL24
 18

	)

1908 
	#R_PPC_COPY
 19

	)

1909 
	#R_PPC_GLOB_DAT
 20

	)

1910 
	#R_PPC_JMP_SLOT
 21

	)

1911 
	#R_PPC_RELATIVE
 22

	)

1912 
	#R_PPC_LOCAL24PC
 23

	)

1913 
	#R_PPC_UADDR32
 24

	)

1914 
	#R_PPC_UADDR16
 25

	)

1915 
	#R_PPC_REL32
 26

	)

1916 
	#R_PPC_PLT32
 27

	)

1917 
	#R_PPC_PLTREL32
 28

	)

1918 
	#R_PPC_PLT16_LO
 29

	)

1919 
	#R_PPC_PLT16_HI
 30

	)

1920 
	#R_PPC_PLT16_HA
 31

	)

1921 
	#R_PPC_SDAREL16
 32

	)

1922 
	#R_PPC_SECTOFF
 33

	)

1923 
	#R_PPC_SECTOFF_LO
 34

	)

1924 
	#R_PPC_SECTOFF_HI
 35

	)

1925 
	#R_PPC_SECTOFF_HA
 36

	)

1928 
	#R_PPC_TLS
 67

	)

1929 
	#R_PPC_DTPMOD32
 68

	)

1930 
	#R_PPC_TPREL16
 69

	)

1931 
	#R_PPC_TPREL16_LO
 70

	)

1932 
	#R_PPC_TPREL16_HI
 71

	)

1933 
	#R_PPC_TPREL16_HA
 72

	)

1934 
	#R_PPC_TPREL32
 73

	)

1935 
	#R_PPC_DTPREL16
 74

	)

1936 
	#R_PPC_DTPREL16_LO
 75

	)

1937 
	#R_PPC_DTPREL16_HI
 76

	)

1938 
	#R_PPC_DTPREL16_HA
 77

	)

1939 
	#R_PPC_DTPREL32
 78

	)

1940 
	#R_PPC_GOT_TLSGD16
 79

	)

1941 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1942 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1943 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1944 
	#R_PPC_GOT_TLSLD16
 83

	)

1945 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1946 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1947 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1948 
	#R_PPC_GOT_TPREL16
 87

	)

1949 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1950 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1951 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1952 
	#R_PPC_GOT_DTPREL16
 91

	)

1953 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

1954 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

1955 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

1958 
	#R_PPC_NUM
 95

	)

1962 
	#R_PPC_EMB_NADDR32
 101

	)

1963 
	#R_PPC_EMB_NADDR16
 102

	)

1964 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1965 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1966 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1967 
	#R_PPC_EMB_SDAI16
 106

	)

1968 
	#R_PPC_EMB_SDA2I16
 107

	)

1969 
	#R_PPC_EMB_SDA2REL
 108

	)

1970 
	#R_PPC_EMB_SDA21
 109

	)

1971 
	#R_PPC_EMB_MRKREF
 110

	)

1972 
	#R_PPC_EMB_RELSEC16
 111

	)

1973 
	#R_PPC_EMB_RELST_LO
 112

	)

1974 
	#R_PPC_EMB_RELST_HI
 113

	)

1975 
	#R_PPC_EMB_RELST_HA
 114

	)

1976 
	#R_PPC_EMB_BIT_FLD
 115

	)

1977 
	#R_PPC_EMB_RELSDA
 116

	)

1980 
	#R_PPC_DIAB_SDA21_LO
 180

	)

1981 
	#R_PPC_DIAB_SDA21_HI
 181

	)

1982 
	#R_PPC_DIAB_SDA21_HA
 182

	)

1983 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

1984 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

1985 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

1988 
	#R_PPC_REL16
 249

	)

1989 
	#R_PPC_REL16_LO
 250

	)

1990 
	#R_PPC_REL16_HI
 251

	)

1991 
	#R_PPC_REL16_HA
 252

	)

1995 
	#R_PPC_TOC16
 255

	)

1998 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

1999 
	#DT_PPC_NUM
 1

	)

2002 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2003 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2004 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2005 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2006 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2007 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2008 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2009 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2010 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2011 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2012 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2013 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2014 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2015 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2016 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2017 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2018 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2019 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2021 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2022 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2023 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2024 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2026 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2027 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2028 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2029 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2030 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2031 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2032 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2033 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2035 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2036 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2037 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2038 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2039 
	#R_PPC64_ADDR30
 37

	)

2040 
	#R_PPC64_ADDR64
 38

	)

2041 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2042 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2043 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2044 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2045 
	#R_PPC64_UADDR64
 43

	)

2046 
	#R_PPC64_REL64
 44

	)

2047 
	#R_PPC64_PLT64
 45

	)

2048 
	#R_PPC64_PLTREL64
 46

	)

2049 
	#R_PPC64_TOC16
 47

	)

2050 
	#R_PPC64_TOC16_LO
 48

	)

2051 
	#R_PPC64_TOC16_HI
 49

	)

2052 
	#R_PPC64_TOC16_HA
 50

	)

2053 
	#R_PPC64_TOC
 51

	)

2054 
	#R_PPC64_PLTGOT16
 52

	)

2055 
	#R_PPC64_PLTGOT16_LO
 53

	)

2056 
	#R_PPC64_PLTGOT16_HI
 54

	)

2057 
	#R_PPC64_PLTGOT16_HA
 55

	)

2059 
	#R_PPC64_ADDR16_DS
 56

	)

2060 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2061 
	#R_PPC64_GOT16_DS
 58

	)

2062 
	#R_PPC64_GOT16_LO_DS
 59

	)

2063 
	#R_PPC64_PLT16_LO_DS
 60

	)

2064 
	#R_PPC64_SECTOFF_DS
 61

	)

2065 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2066 
	#R_PPC64_TOC16_DS
 63

	)

2067 
	#R_PPC64_TOC16_LO_DS
 64

	)

2068 
	#R_PPC64_PLTGOT16_DS
 65

	)

2069 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2072 
	#R_PPC64_TLS
 67

	)

2073 
	#R_PPC64_DTPMOD64
 68

	)

2074 
	#R_PPC64_TPREL16
 69

	)

2075 
	#R_PPC64_TPREL16_LO
 70

	)

2076 
	#R_PPC64_TPREL16_HI
 71

	)

2077 
	#R_PPC64_TPREL16_HA
 72

	)

2078 
	#R_PPC64_TPREL64
 73

	)

2079 
	#R_PPC64_DTPREL16
 74

	)

2080 
	#R_PPC64_DTPREL16_LO
 75

	)

2081 
	#R_PPC64_DTPREL16_HI
 76

	)

2082 
	#R_PPC64_DTPREL16_HA
 77

	)

2083 
	#R_PPC64_DTPREL64
 78

	)

2084 
	#R_PPC64_GOT_TLSGD16
 79

	)

2085 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2086 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2087 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2088 
	#R_PPC64_GOT_TLSLD16
 83

	)

2089 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2090 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2091 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2092 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2093 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2094 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2095 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2096 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2097 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2098 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2099 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2100 
	#R_PPC64_TPREL16_DS
 95

	)

2101 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2102 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2103 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2104 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2105 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2106 
	#R_PPC64_DTPREL16_DS
 101

	)

2107 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2108 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2109 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2110 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2111 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2114 
	#R_PPC64_NUM
 107

	)

2117 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2118 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2119 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2120 
	#DT_PPC64_NUM
 3

	)

2126 
	#EF_ARM_RELEXEC
 0x01

	)

2127 
	#EF_ARM_HASENTRY
 0x02

	)

2128 
	#EF_ARM_INTERWORK
 0x04

	)

2129 
	#EF_ARM_APCS_26
 0x08

	)

2130 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2131 
	#EF_ARM_PIC
 0x20

	)

2132 
	#EF_ARM_ALIGN8
 0x40

	)

2133 
	#EF_ARM_NEW_ABI
 0x80

	)

2134 
	#EF_ARM_OLD_ABI
 0x100

	)

2138 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2139 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2140 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2141 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2143 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2144 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2145 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2146 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2149 
	#STT_ARM_TFUNC
 0xd

	)

2152 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2153 
	#SHF_ARM_COMDEF
 0x80000000

	)

2157 
	#PF_ARM_SB
 0x10000000

	)

2161 
	#PT_ARM_EXIDX
 0x70000001

	)

2165 
	#R_ARM_NONE
 0

	)

2166 
	#R_ARM_PC24
 1

	)

2167 
	#R_ARM_ABS32
 2

	)

2168 
	#R_ARM_REL32
 3

	)

2169 
	#R_ARM_PC13
 4

	)

2170 
	#R_ARM_ABS16
 5

	)

2171 
	#R_ARM_ABS12
 6

	)

2172 
	#R_ARM_THM_ABS5
 7

	)

2173 
	#R_ARM_ABS8
 8

	)

2174 
	#R_ARM_SBREL32
 9

	)

2175 
	#R_ARM_THM_PC22
 10

	)

2176 
	#R_ARM_THM_PC8
 11

	)

2177 
	#R_ARM_AMP_VCALL9
 12

	)

2178 
	#R_ARM_SWI24
 13

	)

2179 
	#R_ARM_THM_SWI8
 14

	)

2180 
	#R_ARM_XPC25
 15

	)

2181 
	#R_ARM_THM_XPC22
 16

	)

2182 
	#R_ARM_TLS_DTPMOD32
 17

	)

2183 
	#R_ARM_TLS_DTPOFF32
 18

	)

2184 
	#R_ARM_TLS_TPOFF32
 19

	)

2185 
	#R_ARM_COPY
 20

	)

2186 
	#R_ARM_GLOB_DAT
 21

	)

2187 
	#R_ARM_JUMP_SLOT
 22

	)

2188 
	#R_ARM_RELATIVE
 23

	)

2189 
	#R_ARM_GOTOFF
 24

	)

2190 
	#R_ARM_GOTPC
 25

	)

2191 
	#R_ARM_GOT32
 26

	)

2192 
	#R_ARM_PLT32
 27

	)

2193 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2194 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2195 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2196 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2197 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2198 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2199 
	#R_ARM_GNU_VTENTRY
 100

	)

2200 
	#R_ARM_GNU_VTINHERIT
 101

	)

2201 
	#R_ARM_THM_PC11
 102

	)

2202 
	#R_ARM_THM_PC9
 103

	)

2203 
	#R_ARM_TLS_GD32
 104

	)

2205 
	#R_ARM_TLS_LDM32
 105

	)

2207 
	#R_ARM_TLS_LDO32
 106

	)

2209 
	#R_ARM_TLS_IE32
 107

	)

2211 
	#R_ARM_TLS_LE32
 108

	)

2213 
	#R_ARM_RXPC25
 249

	)

2214 
	#R_ARM_RSBREL32
 250

	)

2215 
	#R_ARM_THM_RPC22
 251

	)

2216 
	#R_ARM_RREL32
 252

	)

2217 
	#R_ARM_RABS22
 253

	)

2218 
	#R_ARM_RPC24
 254

	)

2219 
	#R_ARM_RBASE
 255

	)

2221 
	#R_ARM_NUM
 256

	)

2226 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2227 
	#EF_IA_64_ABI64
 0x00000010

	)

2228 
	#EF_IA_64_ARCH
 0xff000000

	)

2231 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2232 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2233 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2234 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2235 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2238 
	#PF_IA_64_NORECOV
 0x80000000

	)

2241 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2242 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2245 
	#SHF_IA_64_SHORT
 0x10000000

	)

2246 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2249 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2250 
	#DT_IA_64_NUM
 1

	)

2253 
	#R_IA64_NONE
 0x00

	)

2254 
	#R_IA64_IMM14
 0x21

	)

2255 
	#R_IA64_IMM22
 0x22

	)

2256 
	#R_IA64_IMM64
 0x23

	)

2257 
	#R_IA64_DIR32MSB
 0x24

	)

2258 
	#R_IA64_DIR32LSB
 0x25

	)

2259 
	#R_IA64_DIR64MSB
 0x26

	)

2260 
	#R_IA64_DIR64LSB
 0x27

	)

2261 
	#R_IA64_GPREL22
 0x2®

	)

2262 
	#R_IA64_GPREL64I
 0x2b

	)

2263 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2264 
	#R_IA64_GPREL32LSB
 0x2d

	)

2265 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2266 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2267 
	#R_IA64_LTOFF22
 0x32

	)

2268 
	#R_IA64_LTOFF64I
 0x33

	)

2269 
	#R_IA64_PLTOFF22
 0x3®

	)

2270 
	#R_IA64_PLTOFF64I
 0x3b

	)

2271 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2272 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2273 
	#R_IA64_FPTR64I
 0x43

	)

2274 
	#R_IA64_FPTR32MSB
 0x44

	)

2275 
	#R_IA64_FPTR32LSB
 0x45

	)

2276 
	#R_IA64_FPTR64MSB
 0x46

	)

2277 
	#R_IA64_FPTR64LSB
 0x47

	)

2278 
	#R_IA64_PCREL60B
 0x48

	)

2279 
	#R_IA64_PCREL21B
 0x49

	)

2280 
	#R_IA64_PCREL21M
 0x4®

	)

2281 
	#R_IA64_PCREL21F
 0x4b

	)

2282 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2283 
	#R_IA64_PCREL32LSB
 0x4d

	)

2284 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2285 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2286 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2287 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2288 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2289 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2290 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2291 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2292 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2293 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2294 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2295 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2296 
	#R_IA64_SECREL32MSB
 0x64

	)

2297 
	#R_IA64_SECREL32LSB
 0x65

	)

2298 
	#R_IA64_SECREL64MSB
 0x66

	)

2299 
	#R_IA64_SECREL64LSB
 0x67

	)

2300 
	#R_IA64_REL32MSB
 0x6¯

	)

2301 
	#R_IA64_REL32LSB
 0x6d

	)

2302 
	#R_IA64_REL64MSB
 0x6ê

	)

2303 
	#R_IA64_REL64LSB
 0x6‡

	)

2304 
	#R_IA64_LTV32MSB
 0x74

	)

2305 
	#R_IA64_LTV32LSB
 0x75

	)

2306 
	#R_IA64_LTV64MSB
 0x76

	)

2307 
	#R_IA64_LTV64LSB
 0x77

	)

2308 
	#R_IA64_PCREL21BI
 0x79

	)

2309 
	#R_IA64_PCREL22
 0x7®

	)

2310 
	#R_IA64_PCREL64I
 0x7b

	)

2311 
	#R_IA64_IPLTMSB
 0x80

	)

2312 
	#R_IA64_IPLTLSB
 0x81

	)

2313 
	#R_IA64_COPY
 0x84

	)

2314 
	#R_IA64_SUB
 0x85

	)

2315 
	#R_IA64_LTOFF22X
 0x86

	)

2316 
	#R_IA64_LDXMOV
 0x87

	)

2317 
	#R_IA64_TPREL14
 0x91

	)

2318 
	#R_IA64_TPREL22
 0x92

	)

2319 
	#R_IA64_TPREL64I
 0x93

	)

2320 
	#R_IA64_TPREL64MSB
 0x96

	)

2321 
	#R_IA64_TPREL64LSB
 0x97

	)

2322 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2323 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2324 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2325 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2326 
	#R_IA64_DTPREL14
 0xb1

	)

2327 
	#R_IA64_DTPREL22
 0xb2

	)

2328 
	#R_IA64_DTPREL64I
 0xb3

	)

2329 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2330 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2331 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2332 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2333 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2338 
	#R_SH_NONE
 0

	)

2339 
	#R_SH_DIR32
 1

	)

2340 
	#R_SH_REL32
 2

	)

2341 
	#R_SH_DIR8WPN
 3

	)

2342 
	#R_SH_IND12W
 4

	)

2343 
	#R_SH_DIR8WPL
 5

	)

2344 
	#R_SH_DIR8WPZ
 6

	)

2345 
	#R_SH_DIR8BP
 7

	)

2346 
	#R_SH_DIR8W
 8

	)

2347 
	#R_SH_DIR8L
 9

	)

2348 
	#R_SH_SWITCH16
 25

	)

2349 
	#R_SH_SWITCH32
 26

	)

2350 
	#R_SH_USES
 27

	)

2351 
	#R_SH_COUNT
 28

	)

2352 
	#R_SH_ALIGN
 29

	)

2353 
	#R_SH_CODE
 30

	)

2354 
	#R_SH_DATA
 31

	)

2355 
	#R_SH_LABEL
 32

	)

2356 
	#R_SH_SWITCH8
 33

	)

2357 
	#R_SH_GNU_VTINHERIT
 34

	)

2358 
	#R_SH_GNU_VTENTRY
 35

	)

2359 
	#R_SH_TLS_GD_32
 144

	)

2360 
	#R_SH_TLS_LD_32
 145

	)

2361 
	#R_SH_TLS_LDO_32
 146

	)

2362 
	#R_SH_TLS_IE_32
 147

	)

2363 
	#R_SH_TLS_LE_32
 148

	)

2364 
	#R_SH_TLS_DTPMOD32
 149

	)

2365 
	#R_SH_TLS_DTPOFF32
 150

	)

2366 
	#R_SH_TLS_TPOFF32
 151

	)

2367 
	#R_SH_GOT32
 160

	)

2368 
	#R_SH_PLT32
 161

	)

2369 
	#R_SH_COPY
 162

	)

2370 
	#R_SH_GLOB_DAT
 163

	)

2371 
	#R_SH_JMP_SLOT
 164

	)

2372 
	#R_SH_RELATIVE
 165

	)

2373 
	#R_SH_GOTOFF
 166

	)

2374 
	#R_SH_GOTPC
 167

	)

2376 
	#R_SH_NUM
 256

	)

2380 
	#R_390_NONE
 0

	)

2381 
	#R_390_8
 1

	)

2382 
	#R_390_12
 2

	)

2383 
	#R_390_16
 3

	)

2384 
	#R_390_32
 4

	)

2385 
	#R_390_PC32
 5

	)

2386 
	#R_390_GOT12
 6

	)

2387 
	#R_390_GOT32
 7

	)

2388 
	#R_390_PLT32
 8

	)

2389 
	#R_390_COPY
 9

	)

2390 
	#R_390_GLOB_DAT
 10

	)

2391 
	#R_390_JMP_SLOT
 11

	)

2392 
	#R_390_RELATIVE
 12

	)

2393 
	#R_390_GOTOFF32
 13

	)

2394 
	#R_390_GOTPC
 14

	)

2395 
	#R_390_GOT16
 15

	)

2396 
	#R_390_PC16
 16

	)

2397 
	#R_390_PC16DBL
 17

	)

2398 
	#R_390_PLT16DBL
 18

	)

2399 
	#R_390_PC32DBL
 19

	)

2400 
	#R_390_PLT32DBL
 20

	)

2401 
	#R_390_GOTPCDBL
 21

	)

2402 
	#R_390_64
 22

	)

2403 
	#R_390_PC64
 23

	)

2404 
	#R_390_GOT64
 24

	)

2405 
	#R_390_PLT64
 25

	)

2406 
	#R_390_GOTENT
 26

	)

2407 
	#R_390_GOTOFF16
 27

	)

2408 
	#R_390_GOTOFF64
 28

	)

2409 
	#R_390_GOTPLT12
 29

	)

2410 
	#R_390_GOTPLT16
 30

	)

2411 
	#R_390_GOTPLT32
 31

	)

2412 
	#R_390_GOTPLT64
 32

	)

2413 
	#R_390_GOTPLTENT
 33

	)

2414 
	#R_390_PLTOFF16
 34

	)

2415 
	#R_390_PLTOFF32
 35

	)

2416 
	#R_390_PLTOFF64
 36

	)

2417 
	#R_390_TLS_LOAD
 37

	)

2418 
	#R_390_TLS_GDCALL
 38

	)

2420 
	#R_390_TLS_LDCALL
 39

	)

2422 
	#R_390_TLS_GD32
 40

	)

2424 
	#R_390_TLS_GD64
 41

	)

2426 
	#R_390_TLS_GOTIE12
 42

	)

2428 
	#R_390_TLS_GOTIE32
 43

	)

2430 
	#R_390_TLS_GOTIE64
 44

	)

2432 
	#R_390_TLS_LDM32
 45

	)

2434 
	#R_390_TLS_LDM64
 46

	)

2436 
	#R_390_TLS_IE32
 47

	)

2438 
	#R_390_TLS_IE64
 48

	)

2440 
	#R_390_TLS_IEENT
 49

	)

2442 
	#R_390_TLS_LE32
 50

	)

2444 
	#R_390_TLS_LE64
 51

	)

2446 
	#R_390_TLS_LDO32
 52

	)

2448 
	#R_390_TLS_LDO64
 53

	)

2450 
	#R_390_TLS_DTPMOD
 54

	)

2451 
	#R_390_TLS_DTPOFF
 55

	)

2452 
	#R_390_TLS_TPOFF
 56

	)

2454 
	#R_390_20
 57

	)

2455 
	#R_390_GOT20
 58

	)

2456 
	#R_390_GOTPLT20
 59

	)

2457 
	#R_390_TLS_GOTIE20
 60

	)

2460 
	#R_390_NUM
 61

	)

2464 
	#R_CRIS_NONE
 0

	)

2465 
	#R_CRIS_8
 1

	)

2466 
	#R_CRIS_16
 2

	)

2467 
	#R_CRIS_32
 3

	)

2468 
	#R_CRIS_8_PCREL
 4

	)

2469 
	#R_CRIS_16_PCREL
 5

	)

2470 
	#R_CRIS_32_PCREL
 6

	)

2471 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2472 
	#R_CRIS_GNU_VTENTRY
 8

	)

2473 
	#R_CRIS_COPY
 9

	)

2474 
	#R_CRIS_GLOB_DAT
 10

	)

2475 
	#R_CRIS_JUMP_SLOT
 11

	)

2476 
	#R_CRIS_RELATIVE
 12

	)

2477 
	#R_CRIS_16_GOT
 13

	)

2478 
	#R_CRIS_32_GOT
 14

	)

2479 
	#R_CRIS_16_GOTPLT
 15

	)

2480 
	#R_CRIS_32_GOTPLT
 16

	)

2481 
	#R_CRIS_32_GOTREL
 17

	)

2482 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2483 
	#R_CRIS_32_PLT_PCREL
 19

	)

2485 
	#R_CRIS_NUM
 20

	)

2489 
	#R_X86_64_NONE
 0

	)

2490 
	#R_X86_64_64
 1

	)

2491 
	#R_X86_64_PC32
 2

	)

2492 
	#R_X86_64_GOT32
 3

	)

2493 
	#R_X86_64_PLT32
 4

	)

2494 
	#R_X86_64_COPY
 5

	)

2495 
	#R_X86_64_GLOB_DAT
 6

	)

2496 
	#R_X86_64_JUMP_SLOT
 7

	)

2497 
	#R_X86_64_RELATIVE
 8

	)

2498 
	#R_X86_64_GOTPCREL
 9

	)

2500 
	#R_X86_64_32
 10

	)

2501 
	#R_X86_64_32S
 11

	)

2502 
	#R_X86_64_16
 12

	)

2503 
	#R_X86_64_PC16
 13

	)

2504 
	#R_X86_64_8
 14

	)

2505 
	#R_X86_64_PC8
 15

	)

2506 
	#R_X86_64_DTPMOD64
 16

	)

2507 
	#R_X86_64_DTPOFF64
 17

	)

2508 
	#R_X86_64_TPOFF64
 18

	)

2509 
	#R_X86_64_TLSGD
 19

	)

2511 
	#R_X86_64_TLSLD
 20

	)

2513 
	#R_X86_64_DTPOFF32
 21

	)

2514 
	#R_X86_64_GOTTPOFF
 22

	)

2516 
	#R_X86_64_TPOFF32
 23

	)

2518 
	#R_X86_64_NUM
 24

	)

2522 
	#R_MN10300_NONE
 0

	)

2523 
	#R_MN10300_32
 1

	)

2524 
	#R_MN10300_16
 2

	)

2525 
	#R_MN10300_8
 3

	)

2526 
	#R_MN10300_PCREL32
 4

	)

2527 
	#R_MN10300_PCREL16
 5

	)

2528 
	#R_MN10300_PCREL8
 6

	)

2529 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2530 
	#R_MN10300_GNU_VTENTRY
 8

	)

2531 
	#R_MN10300_24
 9

	)

2532 
	#R_MN10300_GOTPC32
 10

	)

2533 
	#R_MN10300_GOTPC16
 11

	)

2534 
	#R_MN10300_GOTOFF32
 12

	)

2535 
	#R_MN10300_GOTOFF24
 13

	)

2536 
	#R_MN10300_GOTOFF16
 14

	)

2537 
	#R_MN10300_PLT32
 15

	)

2538 
	#R_MN10300_PLT16
 16

	)

2539 
	#R_MN10300_GOT32
 17

	)

2540 
	#R_MN10300_GOT24
 18

	)

2541 
	#R_MN10300_GOT16
 19

	)

2542 
	#R_MN10300_COPY
 20

	)

2543 
	#R_MN10300_GLOB_DAT
 21

	)

2544 
	#R_MN10300_JMP_SLOT
 22

	)

2545 
	#R_MN10300_RELATIVE
 23

	)

2547 
	#R_MN10300_NUM
 24

	)

2551 
	#R_M32R_NONE
 0

	)

2552 
	#R_M32R_16
 1

	)

2553 
	#R_M32R_32
 2

	)

2554 
	#R_M32R_24
 3

	)

2555 
	#R_M32R_10_PCREL
 4

	)

2556 
	#R_M32R_18_PCREL
 5

	)

2557 
	#R_M32R_26_PCREL
 6

	)

2558 
	#R_M32R_HI16_ULO
 7

	)

2559 
	#R_M32R_HI16_SLO
 8

	)

2560 
	#R_M32R_LO16
 9

	)

2561 
	#R_M32R_SDA16
 10

	)

2562 
	#R_M32R_GNU_VTINHERIT
 11

	)

2563 
	#R_M32R_GNU_VTENTRY
 12

	)

2565 
	#R_M32R_16_RELA
 33

	)

2566 
	#R_M32R_32_RELA
 34

	)

2567 
	#R_M32R_24_RELA
 35

	)

2568 
	#R_M32R_10_PCREL_RELA
 36

	)

2569 
	#R_M32R_18_PCREL_RELA
 37

	)

2570 
	#R_M32R_26_PCREL_RELA
 38

	)

2571 
	#R_M32R_HI16_ULO_RELA
 39

	)

2572 
	#R_M32R_HI16_SLO_RELA
 40

	)

2573 
	#R_M32R_LO16_RELA
 41

	)

2574 
	#R_M32R_SDA16_RELA
 42

	)

2575 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2576 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2577 
	#R_M32R_REL32
 45

	)

2579 
	#R_M32R_GOT24
 48

	)

2580 
	#R_M32R_26_PLTREL
 49

	)

2581 
	#R_M32R_COPY
 50

	)

2582 
	#R_M32R_GLOB_DAT
 51

	)

2583 
	#R_M32R_JMP_SLOT
 52

	)

2584 
	#R_M32R_RELATIVE
 53

	)

2585 
	#R_M32R_GOTOFF
 54

	)

2586 
	#R_M32R_GOTPC24
 55

	)

2587 
	#R_M32R_GOT16_HI_ULO
 56

	)

2589 
	#R_M32R_GOT16_HI_SLO
 57

	)

2591 
	#R_M32R_GOT16_LO
 58

	)

2592 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2594 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2596 
	#R_M32R_GOTPC_LO
 61

	)

2598 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2600 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2602 
	#R_M32R_GOTOFF_LO
 64

	)

2603 
	#R_M32R_NUM
 256

	)

2606 
	g__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

145 #ifde‡
__STDC__


147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
__BEGIN_NAMESPACE_STD


154 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

156 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_ATFILE


161 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

162 
__c⁄°
 *
__√w
Ë
__THROW
;

165 
__BEGIN_NAMESPACE_STD


170 #i‚de‡
__USE_FILE_OFFSET64


171 
FILE
 *
	`tmpfûe
 ();

173 #ifde‡
__REDIRECT


174 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

176 
	#tmpfûe
 
tmpfûe64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
FILE
 *
	`tmpfûe64
 ();

185 *
	$tm≤am
 (*
__s
Ë
__THROW
;

186 
__END_NAMESPACE_STD


188 #ifde‡
__USE_MISC


191 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

195 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


203 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

204 
__THROW
 
__©åibuã_mÆloc__
;

208 
__BEGIN_NAMESPACE_STD


213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

219 
__END_NAMESPACE_STD


221 #ifde‡
__USE_MISC


228 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

231 #ifde‡
__USE_GNU


238 
	`f˛o£Æl
 ();

242 
__BEGIN_NAMESPACE_STD


243 #i‚de‡
__USE_FILE_OFFSET64


248 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

249 
__c⁄°
 *
__ª°ri˘
 
__modes
);

254 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
);

258 #ifde‡
__REDIRECT


259 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

260 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

261 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

262 
__c⁄°
 *
__ª°ri˘
 
__modes
,

263 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 
__END_NAMESPACE_STD


270 #ifde‡
__USE_LARGEFILE64


271 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
);

273 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
);

278 #ifdef 
__USE_POSIX


280 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

283 #ifdef 
__USE_GNU


286 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

287 
__c⁄°
 *
__ª°ri˘
 
__modes
,

288 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

291 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

296 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

300 
__BEGIN_NAMESPACE_STD


303 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

307 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

308 
__modes
, 
size_t
 
__n
Ë
__THROW
;

309 
__END_NAMESPACE_STD


311 #ifdef 
__USE_BSD


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

322 
__BEGIN_NAMESPACE_STD


327 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

328 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

333 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

335 
	$•rötf
 (*
__ª°ri˘
 
__s
,

336 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

342 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

343 
_G_va_li°
 
__¨g
);

348 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

350 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

351 
_G_va_li°
 
__¨g
Ë
__THROW
;

352 
__END_NAMESPACE_STD


354 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


355 
__BEGIN_NAMESPACE_C99


357 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

359 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

361 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

363 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

364 
__END_NAMESPACE_C99


367 #ifde‡
__USE_GNU


370 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

371 
_G_va_li°
 
__¨g
)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

373 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

374 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

375 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

376 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

377 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

378 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

386 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

387 
_G_va_li°
 
__¨g
)

388 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

389 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

390 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

394 
__BEGIN_NAMESPACE_STD


399 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

400 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

405 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
__END_NAMESPACE_STD


411 #ifdef 
__USE_ISOC99


412 
__BEGIN_NAMESPACE_C99


417 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

418 
_G_va_li°
 
__¨g
)

419 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

425 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

426 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

429 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

431 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

432 
__END_NAMESPACE_C99


436 
__BEGIN_NAMESPACE_STD


441 
	`fgëc
 (
FILE
 *
__°ªam
);

442 
	`gëc
 (
FILE
 *
__°ªam
);

448 
	`gëch¨
 ();

449 
__END_NAMESPACE_STD


453 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

455 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


460 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

461 
	`gëch¨_u∆ocked
 ();

464 #ifde‡
__USE_MISC


471 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

475 
__BEGIN_NAMESPACE_STD


483 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

490 
	`putch¨
 (
__c
);

491 
__END_NAMESPACE_STD


495 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

497 #ifde‡
__USE_MISC


504 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


512 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

513 
	`putch¨_u∆ocked
 (
__c
);

517 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

518 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

520 
	`gëw
 (
FILE
 *
__°ªam
);

523 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

527 
__BEGIN_NAMESPACE_STD


532 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

533 
__wur
;

540 *
	$gës
 (*
__s
Ë
__wur
;

541 
__END_NAMESPACE_STD


543 #ifde‡
__USE_GNU


550 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

551 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

555 #ifdef 
__USE_GNU


566 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

567 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

568 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

569 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

570 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

571 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

579 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

580 
size_t
 *
__ª°ri˘
 
__n
,

581 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

585 
__BEGIN_NAMESPACE_STD


590 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

596 
	`puts
 (
__c⁄°
 *
__s
);

603 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

610 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

611 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

617 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

618 
__END_NAMESPACE_STD


620 #ifde‡
__USE_GNU


627 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

628 
FILE
 *
__ª°ri˘
 
__°ªam
);

631 #ifde‡
__USE_MISC


638 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

639 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

640 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

641 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__BEGIN_NAMESPACE_STD


650 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

655 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

660 
	`ªwöd
 (
FILE
 *
__°ªam
);

661 
__END_NAMESPACE_STD


668 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


669 #i‚de‡
__USE_FILE_OFFSET64


674 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

679 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

681 #ifde‡
__REDIRECT


682 
	`__REDIRECT
 (
f£eko
,

683 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

684 
f£eko64
);

685 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

687 
	#f£eko
 
f£eko64


	)

688 
	#·ñlo
 
·ñlo64


	)

693 
__BEGIN_NAMESPACE_STD


694 #i‚de‡
__USE_FILE_OFFSET64


699 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

704 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

708 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

709 
	`__REDIRECT
 (
f£ços
,

710 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

712 
	#fgëpos
 
fgëpos64


	)

713 
	#f£ços
 
f£ços64


	)

716 
__END_NAMESPACE_STD


718 #ifde‡
__USE_LARGEFILE64


719 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

720 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

721 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

722 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

725 
__BEGIN_NAMESPACE_STD


727 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

729 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

731 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

732 
__END_NAMESPACE_STD


734 #ifde‡
__USE_MISC


736 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

737 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

738 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

742 
__BEGIN_NAMESPACE_STD


747 
	`≥º‹
 (
__c⁄°
 *
__s
);

748 
__END_NAMESPACE_STD


754 
	~<bôs/sys_îæi°.h
>

757 #ifdef 
__USE_POSIX


759 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

762 #ifde‡
__USE_MISC


764 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

768 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

769 
deföed
 
__USE_MISC
)

774 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

780 
	`p˛o£
 (
FILE
 *
__°ªam
);

784 #ifdef 
__USE_POSIX


786 *
	$˘îmid
 (*
__s
Ë
__THROW
;

790 #ifde‡
__USE_XOPEN


792 *
	`cu£rid
 (*
__s
);

796 #ifdef 
__USE_GNU


797 
ob°ack
;

800 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

801 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

802 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

803 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

804 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

805 
_G_va_li°
 
__¨gs
)

806 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

810 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


814 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

818 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

821 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

824 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


828 
	#__√ed_gë›t


	)

829 
	~<gë›t.h
>

834 #ifde‡
__USE_EXTERN_INLINES


835 
	~<bôs/°dio.h
>

837 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


838 
	~<bôs/°dio2.h
>

840 #ifde‡
__LDBL_COMPAT


841 
	~<bôs/°dio-ldbl.h
>

844 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

279 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
, 
__group
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

282 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

283 **
__ª°ri˘
 
__íd±r
, 
__group
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

285 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
,

287 
__group
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

289 #i‚de‡
__°πﬁ_öã∫Æ_deföed


290 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
__group
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

294 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

296 #i‚de‡
__°πoul_öã∫Æ_deföed


297 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
,

299 
__ba£
, 
__group
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

301 
	#__°πoul_öã∫Æ_deföed
 1

	)

303 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


304 #i‚de‡
__°πﬁl_öã∫Æ_deföed


305 
__exãnsi⁄__


306 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

307 **
__ª°ri˘
 
__íd±r
,

308 
__ba£
, 
__group
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

310 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

312 #i‚de‡
__°πouŒ_öã∫Æ_deföed


313 
__exãnsi⁄__


314 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

315 
__ª°ri˘
 
__≈å
,

316 **
__ª°ri˘
 
__íd±r
,

317 
__ba£
, 
__group
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

323 #ifde‡
__USE_EXTERN_INLINES


326 
__BEGIN_NAMESPACE_STD


327 
__ölöe
 

328 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

330  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

331 
	}
}

332 
__ölöe
 

333 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

334 
__ba£
))

336  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

337 
	}
}

338 
__ölöe
 

339 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

340 
__ba£
))

342  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

343 
	}
}

344 
__END_NAMESPACE_STD


346 #ifde‡
__USE_ISOC99


347 
__BEGIN_NAMESPACE_C99


348 
__ölöe
 

349 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

351  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

352 
	}
}

353 #i‚de‡
__LDBL_COMPAT


354 
__ölöe
 

355 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

357  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

358 
	}
}

360 
__END_NAMESPACE_C99


363 #ifde‡
__USE_BSD


364 
__exãnsi⁄__
 
__ölöe
 

365 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

366 
__ba£
))

368  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

369 
	}
}

370 
__exãnsi⁄__
 
__ölöe
 

371 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

372 
__ba£
))

374  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

375 
	}
}

378 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


379 
__BEGIN_NAMESPACE_C99


380 
__exãnsi⁄__
 
__ölöe
 

381 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

382 
__ba£
))

384  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

385 
	}
}

386 
__exãnsi⁄__
 
__ölöe
 

387 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

388 
__ba£
))

390  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

391 
	}
}

392 
__END_NAMESPACE_C99


395 
__BEGIN_NAMESPACE_STD


396 
__ölöe
 

397 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

399  
	`°πod
 (
__≈å
, (**Ë
NULL
);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

404  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__ölöe
 

407 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

409  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

410 
	}
}

411 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


414 
__BEGIN_NAMESPACE_C99


415 
__exãnsi⁄__
 
__ölöe
 

416 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

418  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

419 
	}
}

420 
__END_NAMESPACE_C99


425 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


429 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

432 
	$a64l
 (
__c⁄°
 *
__s
)

433 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

437 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


438 
	~<sys/ty≥s.h
>

445 
	$øndom
 (Ë
__THROW
;

448 
	$§™dom
 (
__£ed
Ë
__THROW
;

454 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

455 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

459 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 #ifde‡
__USE_MISC


467 
	søndom_d©a


469 
öt32_t
 *
Âå
;

470 
öt32_t
 *
Ωå
;

471 
öt32_t
 *
°©e
;

472 
ønd_ty≥
;

473 
ønd_deg
;

474 
ønd_£p
;

475 
öt32_t
 *
íd_±r
;

478 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

479 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

481 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2));

484 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

485 
size_t
 
__°©ñí
,

486 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

487 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

489 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

490 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

491 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 
__BEGIN_NAMESPACE_STD


498 
	$ønd
 (Ë
__THROW
;

500 
	$§™d
 (
__£ed
Ë
__THROW
;

501 
__END_NAMESPACE_STD


503 #ifde‡
__USE_POSIX


505 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

509 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


513 
	$dønd48
 (Ë
__THROW
;

514 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$Ã™d48
 (Ë
__THROW
;

518 
	$ƒ™d48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$mønd48
 (Ë
__THROW
;

523 
	$jønd48
 (
__xsubi
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

527 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

528 *
	$£ed48
 (
__£ed16v
[3])

529 
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #ifde‡
__USE_MISC


536 
	sdønd48_d©a


538 
__x
[3];

539 
__ﬁd_x
[3];

540 
__c
;

541 
__öô
;

542 
__a
;

546 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

547 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	$î™d48_r
 (
__xsubi
[3],

549 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

550 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

553 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

554 *
__ª°ri˘
 
__ªsu…
)

555 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

556 
	$ƒ™d48_r
 (
__xsubi
[3],

557 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

563 *
__ª°ri˘
 
__ªsu…
)

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$jønd48_r
 (
__xsubi
[3],

566 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

567 *
__ª°ri˘
 
__ªsu…
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

572 
__THROW
 
	`__n⁄nuŒ
 ((2));

574 
	$£ed48_r
 (
__£ed16v
[3],

575 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 
	$lc⁄g48_r
 (
__∑øm
[7],

578 
dønd48_d©a
 *
__buf„r
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


586 
	#__mÆloc_™d_ˇŒoc_deföed


	)

587 
__BEGIN_NAMESPACE_STD


589 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

591 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

592 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

593 
__END_NAMESPACE_STD


596 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


597 
__BEGIN_NAMESPACE_STD


600 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

601 
__THROW
 
__©åibuã_mÆloc__
 
__©åibuã_w¨n_unu£d_ªsu…__
;

603 
	$‰ì
 (*
__±r
Ë
__THROW
;

604 
__END_NAMESPACE_STD


606 #ifdef 
__USE_MISC


608 
	$c‰ì
 (*
__±r
Ë
__THROW
;

611 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


612 
	~<Æloˇ.h
>

615 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


617 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

620 #ifde‡
__USE_XOPEN2K


622 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

623 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
__BEGIN_NAMESPACE_STD


628 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

632 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

633 
__END_NAMESPACE_STD


635 #ifdef 
__USE_MISC


638 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

639 
__THROW
 
	`__n⁄nuŒ
 ((1));

642 
__BEGIN_NAMESPACE_STD


646 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

647 
__END_NAMESPACE_STD


649 #ifde‡
__USE_ISOC99


650 
__BEGIN_NAMESPACE_C99


653 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

654 
__END_NAMESPACE_C99


658 
__BEGIN_NAMESPACE_STD


660 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 
__END_NAMESPACE_STD


665 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

666 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

668 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


672 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


678 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

679 
__THROW
 
	`__n⁄nuŒ
 ((2));

682 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

685 #ifdef 
__USE_MISC


689 
	$˛óªnv
 (Ë
__THROW
;

693 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


698 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

708 #i‚de‡
__USE_FILE_OFFSET64


709 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 #ifde‡
__REDIRECT


712 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

713 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

715 
	#mk°emp
 
mk°emp64


	)

718 #ifde‡
__USE_LARGEFILE64


719 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #ifde‡
__USE_BSD


729 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

733 
__BEGIN_NAMESPACE_STD


738 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

739 
__END_NAMESPACE_STD


742 #ifdef 
__USE_GNU


746 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

750 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


756 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

757 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

762 #i‚de‡
__COMPAR_FN_T


763 
	#__COMPAR_FN_T


	)

764 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

766 #ifdef 
__USE_GNU


767 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

771 
__BEGIN_NAMESPACE_STD


774 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

775 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

776 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

780 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

781 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

785 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
__END_NAMESPACE_STD


789 #ifde‡
__USE_ISOC99


790 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__BEGIN_NAMESPACE_STD


799 
div_t
 
	$div
 (
__numî
, 
__díom
)

800 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

801 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

803 
__END_NAMESPACE_STD


805 #ifde‡
__USE_ISOC99


806 
__BEGIN_NAMESPACE_C99


807 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

808 
__díom
)

809 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

810 
__END_NAMESPACE_C99


814 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


821 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

822 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

827 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

828 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 #ifde‡
__USE_MISC


839 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

841 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

842 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

843 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

844 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

845 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

851 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

852 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

853 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

854 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

855 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

856 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

858 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

859 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

860 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

861 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

862 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

863 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

864 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

865 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

870 
__BEGIN_NAMESPACE_STD


873 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

876 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

877 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

880 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

884 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

885 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

887 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

888 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

889 
__THROW
;

890 
__END_NAMESPACE_STD


893 #ifde‡
__USE_SVID


898 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 #ifde‡
__USE_XOPEN_EXTENDED


909 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

910 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

911 **
__ª°ri˘
 
__vÆuï
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

916 #ifde‡
__USE_XOPEN


918 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

924 #ifde‡
__USE_XOPEN2K


926 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

929 #ifde‡
__USE_XOPEN


934 
	$gø¡±
 (
__fd
Ë
__THROW
;

938 
	$u∆ock±
 (
__fd
Ë
__THROW
;

943 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

946 #ifde‡
__USE_GNU


950 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

951 
__THROW
 
	`__n⁄nuŒ
 ((2));

954 
	`gë±
 ();

957 #ifde‡
__USE_BSD


961 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

967 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


968 
	~<bôs/°dlib.h
>

970 #ifde‡
__LDBL_COMPAT


971 
	~<bôs/°dlib-ldbl.h
>

975 #unde‡
__√ed_mÆloc_™d_ˇŒoc


977 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

32 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

33 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

34 
__END_NAMESPACE_STD


36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


37 
__BEGIN_NAMESPACE_C99


38 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

39 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

40 
__END_NAMESPACE_C99


43 #ifdef 
__USE_ISOC99


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

46 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

47 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

48 
__END_NAMESPACE_C99


51 #ifde‡
__USE_GNU


52 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

53 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

54 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

55 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

56 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

57 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

58 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

61 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


62 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

63 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

64 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


65 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

66 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #ifde‡
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

57 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


59 
__STDIO_INLINE
 

60 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

62  
	`_IO_gëc_u∆ocked
 (
__Â
);

63 
	}
}

66 
__STDIO_INLINE
 

67 
	$gëch¨_u∆ocked
 ()

69  
	`_IO_gëc_u∆ocked
 (
°dö
);

70 
	}
}

75 
__STDIO_INLINE
 

76 
	$putch¨
 (
__c
)

78  
	`_IO_putc
 (
__c
, 
°dout
);

79 
	}
}

82 #ifde‡
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

92 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


94 
__STDIO_INLINE
 

95 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

97  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

98 
	}
}

101 
__STDIO_INLINE
 

102 
	$putch¨_u∆ocked
 (
__c
)

104  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

105 
	}
}

109 #ifdef 
__USE_GNU


111 
__STDIO_INLINE
 
_IO_ssize_t


112 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

114  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

115 
	}
}

119 #ifde‡
__USE_MISC


121 
__STDIO_INLINE
 

122 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

124  
	`_IO_„of_u∆ocked
 (
__°ªam
);

125 
	}
}

128 
__STDIO_INLINE
 

129 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

131  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

132 
	}
}

138 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


140 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

141 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

142 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

143 && (
size_t
Ë(
size
) != 0) \

144 ? ({ *
__±r
 = (*Ë(
±r
); \

145 
FILE
 *
__°ªam
 = (
°ªam
); \

146 
size_t
 
__˙t
; \

147 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

148 
__˙t
 > 0; --__cnt) \

150 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

151 i‡(
__c
 =
EOF
) \

153 *
__±r
++ = 
__c
; \

155 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

156 / (
size_t
Ë(
size
); }) \

157 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

158 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

160 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

161 (Ë(
n
), (
size_t
) 0) \

162 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

164 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

165 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

166 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

167 && (
size_t
Ë(
size
) != 0) \

168 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

169 
FILE
 *
__°ªam
 = (
°ªam
); \

170 
size_t
 
__˙t
; \

171 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

172 
__˙t
 > 0; --__cnt) \

173 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

175 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

176 / (
size_t
Ë(
size
); }) \

177 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

178 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

180 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

181 (Ë(
n
), (
size_t
) 0) \

182 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

186 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 #i‡
	`__GNUC_PREREQ
 (4, 0)

65 
	#¥ötf
(...) \

66 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

67 
	#Ârötf
(
°ªam
, ...) \

68 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

69 
	#v¥ötf
(
f‹m©
, 
≠
) \

70 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

71 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

72 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

74 
	#¥ötf
(...) \

75 
	`__buûtö___¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

76 
	#Ârötf
(
°ªam
, ...) \

77 
	`__buûtö___Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

78 
	#v¥ötf
(
f‹m©
, 
≠
) \

79 
	`__buûtö___v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

80 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

81 
	`__buûtö___vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

86 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

87 *
	`__REDIRECT
 (
__gës_Æüs
, (*
__°r
), 
gës
Ë
__wur
;

89 
__Æways_ölöe
 
__wur
 *

90 
	$gës
 (*
__°r
)

92 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

93  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

94  
	`__gës_Æüs
 (
__°r
);

95 
	}
}

97 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

98 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

99 *
	`__REDIRECT
 (
__fgës_Æüs
,

100 (*
__ª°ri˘
 
__s
, 
__n
,

101 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

103 
__Æways_ölöe
 
__wur
 *

104 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

106 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

107 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

108  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

109  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

110 
	}
}

112 #ifde‡
__USE_GNU


113 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

114 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

115 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

116 (*
__ª°ri˘
 
__s
, 
__n
,

117 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

119 
__Æways_ölöe
 
__wur
 *

120 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

122 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

123 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

124  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

125  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

126 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 
	$__LDBL_REDIR1_DECL
 (
__°πﬁd_öã∫Æ
, 
__°πod_öã∫Æ
)

36 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


37 #ifde‡
__USE_MISC


38 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

40 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

41 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

42 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

31 
__Æways_ölöe
 
__wur
 *

32 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

34 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

35  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

37  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

38 
	}
}

41 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

42 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

43 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

44 
size_t
 
__buÊí
), 
±¢ame_r
)

45 
	`__n⁄nuŒ
 ((2));

47 
__Æways_ölöe
 

48 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

50 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1

51 && (!
	`__buûtö_c⁄°™t_p
 (
__buÊí
Ë|| __buÊí > 
	`__bos
 (
__buf
)))

52  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

53  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

54 
	}
}

57 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

58 
__THROW
 
__wur
;

59 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

60 
w˘omb
Ë
__wur
;

62 
__Æways_ölöe
 
__wur
 

63 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

68 
	#__STDLIB_MB_LEN_MAX
 16

	)

69 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


72 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

73  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

74  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

75 
	}
}

78 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

79 
__c⁄°
 *
__ª°ri˘
 
__§c
,

80 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

81 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

82 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

83 
__c⁄°
 *
__ª°ri˘
 
__§c
,

84 
size_t
 
__Àn
), 
mb°owcs
);

86 
__Æways_ölöe
 
size_t


87 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

88 
size_t
 
__Àn
))

90 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

91 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

92 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

93  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

94 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

95  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

96 
	}
}

99 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

100 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

103 (*
__ª°ri˘
 
__d°
,

104 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
wc°ombs
);

107 
__Æways_ölöe
 
size_t


108 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

109 
size_t
 
__Àn
))

111 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

112 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

113  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

114  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

115 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

119 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

120 #ñi‡
__WORDSIZE
 == 64

121 
	t__SQUAD_TYPE
 

	)

122 
	t__UQUAD_TYPE
 

	)

123 
	t__SWORD_TYPE
 

	)

124 
	t__UWORD_TYPE
 

	)

125 
	t__SLONG32_TYPE
 

	)

126 
	t__ULONG32_TYPE
 

	)

127 
	t__S64_TYPE
 

	)

128 
	t__U64_TYPE
 

	)

130 
	t__STD_TYPE
 

	)

134 
	~<bôs/ty≥sizes.h
>

137 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

138 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

139 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

140 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

141 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

142 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

143 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

144 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

145 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

146 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

147 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

148 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

149 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

150 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

151 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

152 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

153 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

154 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

156 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

157 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

158 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

161 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

164 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

167 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

172 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

173 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

176 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

177 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

180 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

181 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

183 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

187 
__off64_t
 
	t__loff_t
;

188 
__quad_t
 *
	t__qaddr_t
;

189 *
	t__ˇddr_t
;

192 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

195 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

198 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

93 #unde‡
__USE_ISOC99


94 #unde‡
__USE_POSIX


95 #unde‡
__USE_POSIX2


96 #unde‡
__USE_POSIX199309


97 #unde‡
__USE_POSIX199506


98 #unde‡
__USE_XOPEN


99 #unde‡
__USE_XOPEN_EXTENDED


100 #unde‡
__USE_UNIX98


101 #unde‡
__USE_XOPEN2K


102 #unde‡
__USE_LARGEFILE


103 #unde‡
__USE_LARGEFILE64


104 #unde‡
__USE_FILE_OFFSET64


105 #unde‡
__USE_BSD


106 #unde‡
__USE_SVID


107 #unde‡
__USE_MISC


108 #unde‡
__USE_ATFILE


109 #unde‡
__USE_GNU


110 #unde‡
__USE_REENTRANT


111 #unde‡
__USE_FORTIFY_LEVEL


112 #unde‡
__FAVOR_BSD


113 #unde‡
__KERNEL_STRICT_NAMES


117 #i‚de‡
_LOOSE_KERNEL_NAMES


118 
	#__KERNEL_STRICT_NAMES


	)

122 
	#__USE_ANSI
 1

	)

131 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


132 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

133 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

135 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

140 #i‡
deföed
 
_BSD_SOURCE
 && \

141 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

142 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

143 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

144 
	#__FAVOR_BSD
 1

	)

148 #ifde‡
_GNU_SOURCE


149 #unde‡
_ISOC99_SOURCE


150 
	#_ISOC99_SOURCE
 1

	)

151 #unde‡
_POSIX_SOURCE


152 
	#_POSIX_SOURCE
 1

	)

153 #unde‡
_POSIX_C_SOURCE


154 
	#_POSIX_C_SOURCE
 200112L

	)

155 #unde‡
_XOPEN_SOURCE


156 
	#_XOPEN_SOURCE
 600

	)

157 #unde‡
_XOPEN_SOURCE_EXTENDED


158 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

159 #unde‡
_LARGEFILE64_SOURCE


160 
	#_LARGEFILE64_SOURCE
 1

	)

161 #unde‡
_BSD_SOURCE


162 
	#_BSD_SOURCE
 1

	)

163 #unde‡
_SVID_SOURCE


164 
	#_SVID_SOURCE
 1

	)

165 #unde‡
_ATFILE_SOURCE


166 
	#_ATFILE_SOURCE
 1

	)

171 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

172 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

173 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

174 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

175 
	#_BSD_SOURCE
 1

	)

176 
	#_SVID_SOURCE
 1

	)

183 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

184 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

185 
	#__USE_ISOC99
 1

	)

190 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

191 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

192 
	#_POSIX_SOURCE
 1

	)

193 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

194 
	#_POSIX_C_SOURCE
 2

	)

195 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

196 
	#_POSIX_C_SOURCE
 199506L

	)

198 
	#_POSIX_C_SOURCE
 200112L

	)

202 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


203 
	#__USE_POSIX
 1

	)

206 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


207 
	#__USE_POSIX2
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

211 
	#__USE_POSIX199309
 1

	)

214 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

215 
	#__USE_POSIX199506
 1

	)

218 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

219 
	#__USE_XOPEN2K
 1

	)

222 #ifdef 
_XOPEN_SOURCE


223 
	#__USE_XOPEN
 1

	)

224 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

225 
	#__USE_XOPEN_EXTENDED
 1

	)

226 
	#__USE_UNIX98
 1

	)

227 #unde‡
_LARGEFILE_SOURCE


228 
	#_LARGEFILE_SOURCE
 1

	)

229 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

230 
	#__USE_XOPEN2K
 1

	)

231 #unde‡
__USE_ISOC99


232 
	#__USE_ISOC99
 1

	)

235 #ifde‡
_XOPEN_SOURCE_EXTENDED


236 
	#__USE_XOPEN_EXTENDED
 1

	)

241 #ifde‡
_LARGEFILE_SOURCE


242 
	#__USE_LARGEFILE
 1

	)

245 #ifde‡
_LARGEFILE64_SOURCE


246 
	#__USE_LARGEFILE64
 1

	)

249 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

250 
	#__USE_FILE_OFFSET64
 1

	)

253 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


254 
	#__USE_MISC
 1

	)

257 #ifdef 
_BSD_SOURCE


258 
	#__USE_BSD
 1

	)

261 #ifdef 
_SVID_SOURCE


262 
	#__USE_SVID
 1

	)

265 #ifdef 
_ATFILE_SOURCE


266 
	#__USE_ATFILE
 1

	)

269 #ifdef 
_GNU_SOURCE


270 
	#__USE_GNU
 1

	)

273 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


274 
	#__USE_REENTRANT
 1

	)

277 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

278 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0 \

279 && (
__GNUC_PREREQ
 (4, 1) \

280 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (4, 0)) \

281 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
__GNUC_PREREQ
 (3, 4) \

282 && 
	g__GNUC_MINOR__
 == 4 \

283 && (
__GNUC_PATCHLEVEL__
 > 2 \

284 || (
__GNUC_PATCHLEVEL__
 =2 && 
__GNUC_RH_RELEASE__
 >= 8))))

285 #i‡
_FORTIFY_SOURCE
 > 1

286 
	#__USE_FORTIFY_LEVEL
 2

	)

288 
	#__USE_FORTIFY_LEVEL
 1

	)

291 
	#__USE_FORTIFY_LEVEL
 0

	)

295 
	#__STDC_IEC_559__
 1

	)

296 
	#__STDC_IEC_559_COMPLEX__
 1

	)

299 
	#__STDC_ISO_10646__
 200009L

	)

307 #unde‡
__GNU_LIBRARY__


308 
	#__GNU_LIBRARY__
 6

	)

312 
	#__GLIBC__
 2

	)

313 
	#__GLIBC_MINOR__
 5

	)

315 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

316 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

319 #i‡
deföed
 
__GNUC__
 \

320 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

321 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

322 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

323 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

327 #i‚de‡
__ASSEMBLER__


328 #i‚de‡
_SYS_CDEFS_H


329 
	~<sys/cdefs.h
>

334 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


335 
	#__USE_LARGEFILE
 1

	)

336 
	#__USE_LARGEFILE64
 1

	)

342 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

343 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__


344 
	#__USE_EXTERN_INLINES
 1

	)

352 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

148 
	#_IO_SKIPWS
 01

	)

149 
	#_IO_LEFT
 02

	)

150 
	#_IO_RIGHT
 04

	)

151 
	#_IO_INTERNAL
 010

	)

152 
	#_IO_DEC
 020

	)

153 
	#_IO_OCT
 040

	)

154 
	#_IO_HEX
 0100

	)

155 
	#_IO_SHOWBASE
 0200

	)

156 
	#_IO_SHOWPOINT
 0400

	)

157 
	#_IO_UPPERCASE
 01000

	)

158 
	#_IO_SHOWPOS
 02000

	)

159 
	#_IO_SCIENTIFIC
 04000

	)

160 
	#_IO_FIXED
 010000

	)

161 
	#_IO_UNITBUF
 020000

	)

162 
	#_IO_STDIO
 040000

	)

163 
	#_IO_DONT_CLOSE
 0100000

	)

164 
	#_IO_BOOLALPHA
 0200000

	)

167 
_IO_jump_t
; 
	g_IO_FILE
;

170 #ifde‡
_IO_MTSAFE_IO


171 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

172 
	~<bôs/°dio-lock.h
>

177 
	t_IO_lock_t
;

183 
	s_IO_m¨kî
 {

184 
_IO_m¨kî
 *
	m_√xt
;

185 
_IO_FILE
 *
	m_sbuf
;

189 
	m_pos
;

191 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

192 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

193 
	mpublic
:

194 
°ªamm¨kî
(
°ªambuf
 *
sb
);

195 ~
°ªamm¨kî
();

196 
ßvög
(Ë{  
	m_•os
 == -2; }

197 
dñè
(
°ªamm¨kî
&);

198 
dñè
();

203 
	e__codecvt_ªsu…


205 
	m__codecvt_ok
,

206 
	m__codecvt_∑πül
,

207 
	m__codecvt_îr‹
,

208 
	m__codecvt_noc⁄v


211 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


214 
	s_IO_codecvt


216 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

217 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

218 
	m__mb°©e_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 *,

221 c⁄° 
	mwch¨_t
 **, *,

223 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

224 
	m__mb°©e_t
 *, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *,

229 c⁄° **, 
	mwch¨_t
 *,

230 
	mwch¨_t
 *, wchar_t **);

231 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

233 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

234 c⁄° *, c⁄° *, 
	m_IO_size_t
);

235 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

237 
_IO_ic⁄v_t
 
	m__cd_ö
;

238 
_IO_ic⁄v_t
 
	m__cd_out
;

242 
	s_IO_wide_d©a


244 
wch¨_t
 *
	m_IO_ªad_±r
;

245 
wch¨_t
 *
	m_IO_ªad_íd
;

246 
wch¨_t
 *
	m_IO_ªad_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_ba£
;

248 
wch¨_t
 *
	m_IO_wrôe_±r
;

249 
wch¨_t
 *
	m_IO_wrôe_íd
;

250 
wch¨_t
 *
	m_IO_buf_ba£
;

251 
wch¨_t
 *
	m_IO_buf_íd
;

253 
wch¨_t
 *
	m_IO_ßve_ba£
;

254 
wch¨_t
 *
	m_IO_backup_ba£
;

256 
wch¨_t
 *
	m_IO_ßve_íd
;

258 
__mb°©e_t
 
	m_IO_°©e
;

259 
__mb°©e_t
 
	m_IO_œ°_°©e
;

260 
_IO_codecvt
 
	m_codecvt
;

262 
wch¨_t
 
	m_sh‹tbuf
[1];

264 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

268 
	s_IO_FILE
 {

269 
	m_Êags
;

270 
	#_IO_fûe_Êags
 
_Êags


	)

274 * 
	m_IO_ªad_±r
;

275 * 
	m_IO_ªad_íd
;

276 * 
	m_IO_ªad_ba£
;

277 * 
	m_IO_wrôe_ba£
;

278 * 
	m_IO_wrôe_±r
;

279 * 
	m_IO_wrôe_íd
;

280 * 
	m_IO_buf_ba£
;

281 * 
	m_IO_buf_íd
;

283 *
	m_IO_ßve_ba£
;

284 *
	m_IO_backup_ba£
;

285 *
	m_IO_ßve_íd
;

287 
_IO_m¨kî
 *
	m_m¨kîs
;

289 
_IO_FILE
 *
	m_chaö
;

291 
	m_fûío
;

293 
	m_blksize
;

295 
	m_Êags2
;

297 
_IO_off_t
 
	m_ﬁd_off£t
;

299 
	#__HAVE_COLUMN


	)

301 
	m_cur_cﬁumn
;

302 sig√d 
	m_vèbÀ_off£t
;

303 
	m_sh‹tbuf
[1];

307 
_IO_lock_t
 *
	m_lock
;

308 #ifde‡
_IO_USE_OLD_IO_FILE


311 
	s_IO_FILE_com∂ëe


313 
_IO_FILE
 
	m_fûe
;

315 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

316 
_IO_off64_t
 
	m_off£t
;

317 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


319 
_IO_codecvt
 *
	m_codecvt
;

320 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 
_IO_FILE
 *
	m_‰ìªs_li°
;

322 *
	m_‰ìªs_buf
;

323 
size_t
 
	m_‰ìªs_size
;

325 *
	m__∑d1
;

326 *
	m__∑d2
;

327 *
	m__∑d3
;

328 *
	m__∑d4
;

329 
size_t
 
	m__∑d5
;

331 
	m_mode
;

333 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

337 #i‚de‡
__˝lu•lus


338 
_IO_FILE
 
	t_IO_FILE
;

341 
	g_IO_FILE_∂us
;

343 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

344 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

345 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

346 #i‚de‡
_LIBC


347 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

348 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

349 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

351 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

352 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

353 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

361 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

369 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

370 
	tsize_t
 
	t__n
);

378 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

381 
	t__io_˛o£_‚
 (*
	t__cookõ
);

384 #ifde‡
_GNU_SOURCE


386 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

387 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

388 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

389 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

394 
__io_ªad_‚
 *
	mªad
;

395 
__io_wrôe_‚
 *
	mwrôe
;

396 
__io_£ek_‚
 *
	m£ek
;

397 
__io_˛o£_‚
 *
	m˛o£
;

398 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

399 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

401 
	g_IO_cookõ_fûe
;

404 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

405 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

409 #ifde‡
__˝lu•lus


413 
__undîÊow
 (
_IO_FILE
 *);

414 
__uÊow
 (
_IO_FILE
 *);

415 
__ovîÊow
 (
_IO_FILE
 *, );

416 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

417 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

418 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

420 #i‡ 
__GNUC__
 >= 3

421 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

423 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

426 
	#_IO_gëc_u∆ocked
(
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

428 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

429 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

430 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

431 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

432 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

433 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

435 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

436 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

438 
	#_IO_gëwc_u∆ocked
(
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

441 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

442 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

443 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

444 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

445 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

446 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

448 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

449 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

451 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

452 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

453 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

454 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

456 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

459 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

460 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

462 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

463 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

464 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

466 #ifde‡
_IO_MTSAFE_IO


467 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

468 
	#_IO_Êockfûe
(
_Â
) \

469 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

470 
	#_IO_fu∆ockfûe
(
_Â
) \

471 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

473 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

474 
	#_IO_Êockfûe
(
_Â
Ë

	)

475 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

476 
	#_IO_·rylockfûe
(
_Â
Ë

	)

477 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

478 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

481 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

482 
_IO_va_li°
, *
__ª°ri˘
);

483 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

484 
_IO_va_li°
);

485 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

486 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

488 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

489 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

491 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

493 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


494 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

495 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

496 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

497 #i‡
__GNUC__
 >= 2

500 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


501 
	~<shlib-com∑t.h
>

502 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

503 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

504 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

505 c⁄° 
_IO_°dö_u£d
;

506 
wók_exã∫
 (
_IO_°dö_u£d
);

509 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


510 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

514 
	#_IO_fwide
(
__Â
, 
__mode
) \

515 ({ 
__ªsu…
 = (
__mode
); \

516 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

518 i‡((
__Â
)->
_mode
 == 0) \

520 (
__Â
)->
_mode
 = -1; \

521 
__ªsu…
 = (
__Â
)->
_mode
; \

523 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

524 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

526 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

527 
__ªsu…
; })

	)

530 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

531 
_IO_va_li°
, *
__ª°ri˘
);

532 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

533 
_IO_va_li°
);

534 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

535 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

538 #ifde‡
__LDBL_COMPAT


539 
	~<bôs/libio-ldbl.h
>

542 #ifde‡
__˝lu•lus


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__∑d1
;

163 
	m__∑d2
;

164 
	m__∑d3
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__wrôî
;

182 } 
	m__d©a
;

184 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

185 
	m__Æign
;

186 } 
	t±hªad_rwlock_t
;

190 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

191 
	m__Æign
;

192 } 
	t±hªad_rwlock©å_t
;

196 #ifde‡
__USE_XOPEN2K


198 vﬁ©ûê
	t±hªad_•ölock_t
;

205 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

206 
	m__Æign
;

207 } 
	t±hªad_b¨rõr_t
;

211 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

212 
	m__Æign
;

213 } 
	t±hªad_b¨rõøâr_t
;

217 #i‡
__WORDSIZE
 == 32

219 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
__GNUC_PREREQ
 (2,97)

140 
	#__Êex¨r
 []

	)

142 #ifde‡
__GNUC__


143 
	#__Êex¨r
 [0]

	)

145 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

146 
	#__Êex¨r
 []

	)

149 
	#__Êex¨r
 [1]

	)

165 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

167 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

168 #ifde‡
__˝lu•lus


169 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

170 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

175 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

176 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

189 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

190 
	#__©åibuã__
(
xyz
Ë

	)

196 #i‡
__GNUC_PREREQ
 (2,96)

197 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

199 
	#__©åibuã_mÆloc__


	)

205 #i‡
__GNUC_PREREQ
 (2,96)

206 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

208 
	#__©åibuã_puª__


	)

214 #i‡
__GNUC_PREREQ
 (3,1)

215 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

216 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

218 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

219 
	#__©åibuã_noölöe__


	)

223 #i‡
__GNUC_PREREQ
 (3,2)

224 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

226 
	#__©åibuã_dïªˇãd__


	)

235 #i‡
__GNUC_PREREQ
 (2,8)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

238 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

245 #i‡
__GNUC_PREREQ
 (2,97)

246 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

247 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

249 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

254 #i‡
__GNUC_PREREQ
 (3,3)

255 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

257 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡
__GNUC_PREREQ
 (3,4)

263 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

264 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

265 #i‡
__USE_FORTIFY_LEVEL
 > 0

266 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

269 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

271 #i‚de‡
__wur


272 
	#__wur


	)

276 #i‡
__GNUC_PREREQ
 (3,2)

277 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

279 
	#__Æways_ölöe
 
__ölöe


	)

286 #i‡!
__GNUC_PREREQ
 (2,8)

287 
	#__exãnsi⁄__


	)

291 #i‡!
__GNUC_PREREQ
 (2,92)

292 
	#__ª°ri˘


	)

298 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


299 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

301 #ifde‡
__GNUC__


302 
	#__ª°ri˘_¨r


	)

304 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

305 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

308 
	#__ª°ri˘_¨r


	)

313 
	~<bôs/w‹dsize.h
>

315 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


316 
	#__LDBL_COMPAT
 1

	)

317 #ifde‡
__REDIRECT


318 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

319 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

320 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

321 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

322 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

323 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

324 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

325 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

326 
	#__LDBL_REDIR_DECL
(
«me
) \

327 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

330 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


331 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

332 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

333 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

334 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

335 
	#__LDBL_REDIR_DECL
(
«me
)

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

24 #i‚def 
_TIME_H


26 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

27 ! 
deföed
 
	g__√ed_time•ec
)

28 
	#_TIME_H
 1

	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 #ifdef 
_TIME_H


37 
	#__√ed_size_t


	)

38 
	#__√ed_NULL


	)

39 
	~<°ddef.h
>

43 
	~<bôs/time.h
>

46 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


47 #i‚de‡
CLK_TCK


48 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

54 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

55 
	#__˛ock_t_deföed
 1

	)

57 
	~<bôs/ty≥s.h
>

59 
__BEGIN_NAMESPACE_STD


61 
__˛ock_t
 
	t˛ock_t
;

62 
	g__END_NAMESPACE_STD


63 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


64 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

68 #unde‡
__√ed_˛ock_t


70 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

71 
	#__time_t_deföed
 1

	)

73 
	~<bôs/ty≥s.h
>

75 
__BEGIN_NAMESPACE_STD


77 
__time_t
 
	ttime_t
;

78 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


80 
	$__USING_NAMESPACE_STD
(
time_t
)

84 #unde‡
__√ed_time_t


86 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

87 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

88 
	#__˛ockid_t_deföed
 1

	)

90 
	~<bôs/ty≥s.h
>

93 
__˛ockid_t
 
	t˛ockid_t
;

96 #unde‡
__˛ockid_time_t


98 #i‡!
deföed
 
__timî_t_deföed
 && \

99 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

100 
	#__timî_t_deföed
 1

	)

102 
	~<bôs/ty≥s.h
>

105 
__timî_t
 
	ttimî_t
;

108 #unde‡
__√ed_timî_t


111 #i‡!
deföed
 
__time•ec_deföed
 && \

112 ((
deföed
 
_TIME_H
 && \

113 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

114 
deföed
 
__√ed_time•ec
)

115 
	#__time•ec_deföed
 1

	)

117 
	~<bôs/ty≥s.h
>

121 
	stime•ec


123 
__time_t
 
tv_£c
;

124 
tv_n£c
;

128 #unde‡
__√ed_time•ec


131 #ifdef 
_TIME_H


132 
__BEGIN_NAMESPACE_STD


134 
	stm


136 
tm_£c
;

137 
tm_mö
;

138 
tm_hour
;

139 
tm_mday
;

140 
tm_m⁄
;

141 
tm_yór
;

142 
tm_wday
;

143 
tm_yday
;

144 
tm_isd°
;

146 #ifdef 
__USE_BSD


147 
tm_gmtoff
;

148 
__c⁄°
 *
tm_z⁄e
;

150 
__tm_gmtoff
;

151 
__c⁄°
 *
__tm_z⁄e
;

154 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


156 
	$__USING_NAMESPACE_STD
(
tm
)

160 #ifde‡
__USE_POSIX199309


162 
	sôimî•ec


164 
time•ec
 
ô_öãrvÆ
;

165 
time•ec
 
ô_vÆue
;

169 
sigevít
;

173 #ifde‡
__USE_XOPEN2K


174 #i‚de‡
__pid_t_deföed


175 
__pid_t
 
	tpid_t
;

176 
	#__pid_t_deföed


	)

181 
__BEGIN_NAMESPACE_STD


184 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

187 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

190 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

191 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

194 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

200 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

201 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

202 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

203 
__END_NAMESPACE_STD


205 #ifde‡
__USE_XOPEN


208 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

209 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

210 
__THROW
;

213 #ifde‡
__USE_GNU


216 
	~<xloˇÀ.h
>

218 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

219 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

220 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

221 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

224 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

225 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 
__BEGIN_NAMESPACE_STD


232 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

236 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
__END_NAMESPACE_STD


239 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


242 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

243 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

247 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

248 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

251 
__BEGIN_NAMESPACE_STD


254 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

257 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

258 
__END_NAMESPACE_STD


260 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


265 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

266 *
__ª°ri˘
 
__buf
Ë
__THROW
;

269 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

270 *
__ª°ri˘
 
__buf
Ë
__THROW
;

275 *
__tz«me
[2];

276 
__daylight
;

277 
__timez⁄e
;

280 #ifdef 
__USE_POSIX


282 *
tz«me
[2];

286 
	$tz£t
 (Ë
__THROW
;

289 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


290 
daylight
;

291 
timez⁄e
;

294 #ifde‡
__USE_SVID


297 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

303 
	#__i¶óp
(
yór
) \

304 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

307 #ifde‡
__USE_MISC


312 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

315 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

318 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

322 #ifde‡
__USE_POSIX199309


327 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

328 
time•ec
 *
__ªmaöög
);

332 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

335 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

338 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

339 
__THROW
;

341 #ifde‡
__USE_XOPEN2K


346 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

347 
__c⁄°
 
time•ec
 *
__ªq
,

348 
time•ec
 *
__ªm
);

351 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

356 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

357 
sigevít
 *
__ª°ri˘
 
__evp
,

358 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

361 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

364 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

365 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

366 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

369 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

370 
__THROW
;

373 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

377 #ifde‡
__USE_XOPEN_EXTENDED


389 
gëd©e_îr
;

398 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

401 #ifde‡
__USE_GNU


412 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

413 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

416 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


26 
	#__FD_ZERO
(
s
) \

28 
__i
; \

29 
fd_£t
 *
__¨r
 = (
s
); \

30 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

31 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

32 } 0)

	)

33 
	#__FD_SET
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] |
	`__FDMASK
(d))

	)

34 
	#__FD_CLR
(
d
, 
s
Ë(
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] &~
	`__FDMASK
(d))

	)

35 
	#__FD_ISSET
(
d
, 
s
Ë((
	`__FDS_BITS
 (s)[
	`__FDELT
(d)] & 
	`__FDMASK
(d)Ë!0)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_ªm_pio2l


	)

12 
	#__°ub___kî√l_söl


	)

13 
	#__°ub___kî√l_è∆


	)

14 
	#__°ub_bdÊush


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_„upd©ìnv


	)

20 
	#__°ub_gëmsg


	)

21 
	#__°ub_gây


	)

22 
	#__°ub_lchmod


	)

23 
	#__°ub_lutimes


	)

24 
	#__°ub_putmsg


	)

25 
	#__°ub_ªvoke


	)

26 
	#__°ub_£éogö


	)

27 
	#__°ub_sigªtu∫


	)

28 
	#__°ub_s°k


	)

29 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


324 #i‚de‡
__˝lu•lus


328 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

329 
__ölöe
 
wöt_t


330 
	`__NTH
 (
	$btowc
 (
__c
))

331 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

332 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

334 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

335 
__ölöe
 

336 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

337 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

338 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

341 
__ölöe
 
size_t


342 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

343 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

344 {  (
__ps
 !
NULL


345 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

348 
__BEGIN_NAMESPACE_C99


351 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

352 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

353 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

357 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

358 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

359 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

360 
__END_NAMESPACE_C99


363 #ifdef 
__USE_GNU


366 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

367 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

368 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

373 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

374 
size_t
 
__nwc
, size_à
__Àn
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

380 #ifde‡
__USE_XOPEN


382 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

386 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

390 
__BEGIN_NAMESPACE_C99


393 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

394 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

396 #ifde‡
__USE_ISOC99


398 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

399 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

400 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

407 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

412 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

413 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

414 
__THROW
;

416 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

419 
__exãnsi⁄__


420 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

421 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

422 
__THROW
;

426 
__exãnsi⁄__


427 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

428 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

429 
__ba£
Ë
__THROW
;

431 
__END_NAMESPACE_C99


433 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


436 
__exãnsi⁄__


437 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

438 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

439 
__THROW
;

443 
__exãnsi⁄__


444 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

445 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

446 
__ba£
Ë
__THROW
;

449 #ifde‡
__USE_GNU


463 
	~<xloˇÀ.h
>

467 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

468 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

469 
__loˇÀ_t
 
__loc
Ë
__THROW
;

471 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

473 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

475 
__exãnsi⁄__


476 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

480 
__exãnsi⁄__


481 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

483 
__ba£
, 
__loˇÀ_t
 
__loc
)

484 
__THROW
;

486 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

488 
__THROW
;

490 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

492 
__THROW
;

494 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

495 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

496 
__loˇÀ_t
 
__loc
Ë
__THROW
;

502 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

503 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

504 
__THROW
;

505 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

507 
__THROW
;

508 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__group
Ë
__THROW
;

512 #i‡!
deföed
 
__wc°ﬁ_öã∫Æ_deföed
 \

513 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

514 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

515 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

516 
__ba£
, 
__group
Ë
__THROW
;

517 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

519 #i‡!
deföed
 
__wc°oul_öã∫Æ_deföed
 \

520 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

521 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

522 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

523 
__ba£
, 
__group
Ë
__THROW
;

524 
	#__wc°oul_öã∫Æ_deföed
 1

	)

526 #i‡!
deföed
 
__wc°ﬁl_öã∫Æ_deföed
 \

527 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

528 
__exãnsi⁄__


529 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

530 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

531 
__ba£
, 
__group
Ë
__THROW
;

532 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

534 #i‡!
deföed
 
__wc°ouŒ_öã∫Æ_deföed
 \

535 && 
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

536 
__exãnsi⁄__


537 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

538 
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **

540 
__ª°ri˘
 
__íd±r
,

541 
__ba£
,

542 
__group
Ë
__THROW
;

543 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

547 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

549 
__BEGIN_NAMESPACE_C99


551 
__ölöe
 

552 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

554 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

555 
__ölöe
 

556 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__ölöe
 

560 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

562 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

563 
__END_NAMESPACE_C99


565 #ifde‡
__USE_GNU


566 
__ölöe
 

567 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

568 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

569 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

570 #i‚de‡
__LDBL_COMPAT


571 
__ölöe
 

572 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

573 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

574 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

576 
__exãnsi⁄__


577 
__ölöe
 

578 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

579 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

580 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

581 
__exãnsi⁄__


582 
__ölöe
 

583 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

584 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

585 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

590 #ifdef 
__USE_GNU


593 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

597 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

598 
__THROW
;

604 #ifdef 
__USE_GNU


607 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

610 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


611 
__BEGIN_NAMESPACE_C99


614 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

621 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

622 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

628 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

631 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

632 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

633 
__THROW
 ;

639 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

640 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

641 
__gnuc_va_li°
 
__¨g
)

647 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

648 
__gnuc_va_li°
 
__¨g
)

652 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

653 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

654 
__gnuc_va_li°
 
__¨g
)

655 
__THROW
 ;

662 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

663 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

669 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

672 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

673 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

674 
__THROW
 ;

676 
__END_NAMESPACE_C99


679 #ifde‡
__USE_ISOC99


680 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 
__END_NAMESPACE_C99


707 
__BEGIN_NAMESPACE_C99


712 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

713 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

719 
wöt_t
 
	`gëwch¨
 ();

726 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

727 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

733 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

741 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

742 
__FILE
 *
__ª°ri˘
 
__°ªam
);

748 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

749 
__FILE
 *
__ª°ri˘
 
__°ªam
);

756 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

757 
__END_NAMESPACE_C99


760 #ifde‡
__USE_GNU


768 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

777 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

785 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

794 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

795 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

804 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

805 
__FILE
 *
__ª°ri˘
 
__°ªam
);

813 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

814 
__FILE
 *
__ª°ri˘
 
__°ªam
);

818 
__BEGIN_NAMESPACE_C99


822 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

823 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

824 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

825 
__END_NAMESPACE_C99


827 #ifde‡
__USE_GNU


828 
	~<xloˇÀ.h
>

832 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

833 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

834 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

835 
__loˇÀ_t
 
__loc
Ë
__THROW
;

844 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


845 
	#__√ed_iswxxx


	)

846 
	~<w˘y≥.h
>

850 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


851 
	~<bôs/wch¨2.h
>

854 #ifde‡
__LDBL_COMPAT


855 
	~<bôs/wch¨-ldbl.h
>

858 
__END_DECLS


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 
__LDBL_REDIR_DECL
 (
fwsˇnf
);

33 
__LDBL_REDIR_DECL
 (
wsˇnf
);

34 
__LDBL_REDIR_DECL
 (
swsˇnf
);

35 
	g__END_NAMESPACE_C99


38 #ifde‡
__USE_ISOC99


39 
__BEGIN_NAMESPACE_C99


40 
__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

41 
__LDBL_REDIR_DECL
 (
vfwsˇnf
);

42 
__LDBL_REDIR_DECL
 (
vwsˇnf
);

43 
__LDBL_REDIR_DECL
 (
vswsˇnf
);

44 
	g__END_NAMESPACE_C99


47 #ifde‡
__USE_GNU


48 
__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

51 
__LDBL_REDIR1_DECL
 (
__wc°ﬁd_öã∫Æ
, 
__wc°od_öã∫Æ
);

53 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


54 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

55 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

56 #i‡
__USE_FORTIFY_LEVEL
 > 1

57 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

58 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

59 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

60 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

33 
__Æways_ölöe
 
wch¨_t
 *

34 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

35 
size_t
 
__n
))

37 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

38  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

39  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

40 
	}
}

43 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

44 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

45 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

46 
__c⁄°
 
wch¨_t
 *
__s2
,

47 
size_t
 
__n
), 
wmemmove
);

49 
__Æways_ölöe
 
wch¨_t
 *

50 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

51 
size_t
 
__n
))

53 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

54  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

55  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

56 
	}
}

59 #ifde‡
__USE_GNU


60 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

61 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

62 
size_t
 
__ns1
Ë
__THROW
;

63 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

64 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

65 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

66 
size_t
 
__n
), 
wmemp˝y
);

68 
__Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

70 
size_t
 
__n
))

72 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
, 
	`__bos0
 (__s1Ë/  (
wch¨_t
));

74  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

75 
	}
}

79 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

80 
size_t
 
__ns
Ë
__THROW
;

81 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

82 
size_t
 
__n
), 
wmem£t
);

84 
__Æways_ölöe
 
wch¨_t
 *

85 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

87 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

88  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

89  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

90 
	}
}

93 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

94 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

95 
size_t
 
__n
Ë
__THROW
;

96 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

97 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

98 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

100 
__Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

103 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

104  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

105  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

106 
	}
}

109 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

110 
size_t
 
__de°Àn
Ë
__THROW
;

111 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

112 
__c⁄°
 
wch¨_t
 *
__§c
),

113 
w˝˝y
);

115 
__Æways_ölöe
 
wch¨_t
 *

116 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

119  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

120  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

121 
	}
}

124 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

125 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

128 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

129 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

130 
size_t
 
__n
), 
wc¢˝y
);

132 
__Æways_ölöe
 
wch¨_t
 *

133 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

137  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

138 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

139  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

144 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

145 
size_t
 
__de°Àn
Ë
__THROW
;

146 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

147 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
), 
w˝n˝y
);

151 
__Æways_ölöe
 
wch¨_t
 *

152 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

155 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| 
	`__bos
 (
__de°
) >= __n))

156  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

157 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

158  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

159 
	}
}

162 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

163 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

166 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

167 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

169 
__Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

180 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢ˇt
);

186 
__Æways_ölöe
 
wch¨_t
 *

187 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

189 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

190  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

191 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

192  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

193 
	}
}

196 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

197 
__Êag
, 
size_t
 
__s_Àn
,

198 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

199 
__THROW
 ;

202 
	#sw¥ötf
(
s
, 
n
, ...) \

203 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

204 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
__VA_ARGS__
) \

205 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

208 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

209 
__Êag
, 
size_t
 
__s_Àn
,

210 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

211 
__gnuc_va_li°
 
__¨g
)

212 
__THROW
 ;

214 
	#vsw¥ötf
(
s
, 
n
, 
fmt
, 
≠
) \

215 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

216 ? 
	`__vsw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (s), 
fmt
, 
≠
) \

217 : 
	`vsw¥ötf
 (
s
, 
n
, 
fmt
, 
≠
))

	)

220 #i‡
__USE_FORTIFY_LEVEL
 > 1

222 
	`__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

223 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

224 
	`__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

226 
	`__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

227 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

228 
__gnuc_va_li°
 
__≠
);

229 
	`__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

230 
__gnuc_va_li°
 
__≠
);

232 
	#w¥ötf
(...) \

233 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

234 
	#fw¥ötf
(
°ªam
, ...) \

235 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

236 
	#vw¥ötf
(
f‹m©
, 
≠
) \

237 
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

238 
	#vfw¥ötf
(
°ªam
, 
f‹m©
, 
≠
) \

239 
	`__vfw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

243 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

246 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

247 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

249 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

250 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

252 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

253 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

254  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 #ifde‡
__USE_GNU


259 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

260 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

261 
__wur
;

262 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

263 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

264 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

265 
__wur
;

267 
__Æways_ölöe
 
__wur
 
wch¨_t
 *

268 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

270 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1

271 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| (
size_t
Ë__¿> 
	`__bos
 (
__s
)))

272  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

273  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

274 
	}
}

278 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

279 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

280 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

281 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

282 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

284 
__Æways_ölöe
 
__wur
 
size_t


285 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

290 
	#__WCHAR_MB_LEN_MAX
 16

	)

291 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


294 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

295  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

296  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

297 
	}
}

300 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

301 
__c⁄°
 **
__ª°ri˘
 
__§c
,

302 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

303 
size_t
 
__d°Àn
Ë
__THROW
;

304 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

305 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

306 
__c⁄°
 **
__ª°ri˘
 
__§c
,

307 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

308 
mb§towcs
);

310 
__Æways_ölöe
 
size_t


311 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

312 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

314 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

315 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

316 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

317  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

318 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

319  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

320 
	}
}

323 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

324 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

325 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

326 
size_t
 
__d°Àn
Ë
__THROW
;

327 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

328 (*
__ª°ri˘
 
__d°
,

329 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

330 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

331 
wc§tombs
);

333 
__Æways_ölöe
 
size_t


334 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

335 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

337 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

338 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

339  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

340  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

341 
	}
}

344 #ifde‡
__USE_GNU


345 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

346 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

347 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

348 
size_t
 
__d°Àn
Ë
__THROW
;

349 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

350 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

351 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

352 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

353 
mb¢πowcs
);

355 
__Æways_ölöe
 
size_t


356 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

357 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

359 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

360 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
)

361 || 
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
)))

362  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

363 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

364  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

365 
	}
}

368 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

369 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

370 
size_t
 
__nwc
, size_à
__Àn
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

372 
__THROW
;

373 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

374 (*
__ª°ri˘
 
__d°
,

375 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

376 
size_t
 
__nwc
, size_à
__Àn
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

379 
__Æways_ölöe
 
size_t


380 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

381 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

383 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1

384 && (!
	`__buûtö_c⁄°™t_p
 (
__Àn
Ë|| __À¿> 
	`__bos
 (
__d°
)))

385  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

386  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

387 
	}
}

	@/usr/include/pthread.h

19 #i‚de‡
_PTHREAD_H


20 
	#_PTHREAD_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	#__√ed_sig£t_t


	)

27 
	~<sig«l.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #ifde‡
__USE_UNIX98


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_GNU


68 
	mPTHREAD_MUTEX_STALLED_NP
,

69 
	mPTHREAD_MUTEX_ROBUST_NP


74 #ifde‡
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__WORDSIZE
 == 64

87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


122 #i‡
__WORDSIZE
 == 64

123 
	#PTHREAD_RWLOCK_INITIALIZER
 \

124 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

129 #ifde‡
__USE_GNU


130 #i‡
__WORDSIZE
 == 64

131 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

133 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, 0 } }

	)

145 
	mPTHREAD_INHERIT_SCHED
,

146 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

147 
	mPTHREAD_EXPLICIT_SCHED


148 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

155 
	mPTHREAD_SCOPE_SYSTEM
,

156 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

157 
	mPTHREAD_SCOPE_PROCESS


158 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

165 
	mPTHREAD_PROCESS_PRIVATE
,

166 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

167 
	mPTHREAD_PROCESS_SHARED


168 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

174 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

178 
	s_±hªad_˛ónup_buf„r


180 (*
	m__routöe
) (*);

181 *
	m__¨g
;

182 
	m__ˇn˚…y≥
;

183 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

189 
	mPTHREAD_CANCEL_ENABLE
,

190 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

191 
	mPTHREAD_CANCEL_DISABLE


192 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

196 
	mPTHREAD_CANCEL_DEFERRED
,

197 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

198 
	mPTHREAD_CANCEL_ASYNCHRONOUS


199 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

201 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

205 
	#PTHREAD_ONCE_INIT
 0

	)

208 #ifde‡
__USE_XOPEN2K


212 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

216 
__BEGIN_DECLS


221 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

222 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

223 *(*
__°¨t_routöe
) (*),

224 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

230 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

238 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

240 #ifde‡
__USE_GNU


243 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

251 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

252 
__c⁄°
 
time•ec
 *
__ab°ime
);

259 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

263 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

274 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

282 *
__dëach°©e
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

287 
__dëach°©e
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

293 
size_t
 *
__gu¨dsize
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

298 
size_t
 
__gu¨dsize
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


304 
__©å
,

305 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

310 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


311 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

314 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


315 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

316 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

319 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


324 
__©å
, *
__ª°ri˘
 
__öhîô
)

325 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

329 
__öhîô
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

335 *
__ª°ri˘
 
__sc›e
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1));

343 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


344 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

351 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

352 *
__°ackaddr
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

356 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

364 
size_t
 
__°acksize
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 #ifde‡
__USE_XOPEN2K


369 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

370 **
__ª°ri˘
 
__°ackaddr
,

371 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

377 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

378 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_GNU


384 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

385 
size_t
 
__˝u£tsize
,

386 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

391 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

392 
size_t
 
__˝u£tsize
,

393 
˝u_£t_t
 *
__˝u£t
)

394 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

400 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

401 
__THROW
 
	`__n⁄nuŒ
 ((2));

409 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

410 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

411 
__THROW
 
	`__n⁄nuŒ
 ((3));

414 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

415 *
__ª°ri˘
 
__pﬁicy
,

416 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

420 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

421 
__THROW
;

424 #ifde‡
__USE_UNIX98


426 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

429 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

432 #ifde‡
__USE_GNU


437 
	$±hªad_yõld
 (Ë
__THROW
;

442 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

443 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

444 
__THROW
 
	`__n⁄nuŒ
 ((3));

447 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

448 
˝u_£t_t
 *
__˝u£t
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3));

462 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

463 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

474 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

478 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

481 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

486 
	`±hªad_ã°ˇn˚l
 ();

495 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

496 
__mask_was_ßved
;

497 } 
__ˇn˚l_jmp_buf
[1];

498 *
__∑d
[4];

499 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

502 #i‚de‡
__˛ónup_f˘_©åibuã


503 
	#__˛ónup_f˘_©åibuã


	)

508 
	s__±hªad_˛ónup_‰ame


510 (*
__ˇn˚l_routöe
) (*);

511 *
__ˇn˚l_¨g
;

512 
__do_ô
;

513 
__ˇn˚l_ty≥
;

516 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


517 #ifde‡
__˝lu•lus


519 ˛as†
	c__±hªad_˛ónup_˛ass


521 (*
__ˇn˚l_routöe
) (*);

522 *
__ˇn˚l_¨g
;

523 
__do_ô
;

524 
__ˇn˚l_ty≥
;

526 
public
:

527 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

528 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

529 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

530 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

531 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

532 &
__ˇn˚l_ty≥
); 
	}
}

533 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

543 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

545 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

549 
	#±hªad_˛ónup_p›
(
execuã
) \

550 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

551 } 0)

	)

553 #ifde‡
__USE_GNU


557 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

559 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

560 
__˛‰ame
.
	`__de„r
 ()

	)

565 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

566 
__˛‰ame
.
	`__ª°‹e
 (); \

567 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

568 } 0)

	)

575 
__ölöe
 

576 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

578 i‡(
__‰ame
->
__do_ô
)

579 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

580 
	}
}

589 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

592 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

593 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

594 .
__do_ô
 = 1 };

	)

598 
	#±hªad_˛ónup_p›
(
execuã
) \

599 
__˛‰ame
.
__do_ô
 = (
execuã
); \

600 } 0)

	)

602 #ifde‡
__USE_GNU


606 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

608 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

609 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

610 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

611 .
__do_ô
 = 1 }; \

612 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

613 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

618 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

619 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

620 
__˛‰ame
.
__do_ô
 = (
execuã
); \

621 } 0)

	)

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

635 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

636 *
__ˇn˚l_¨g
 = (
¨g
); \

637 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

638 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

639 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

641 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

642 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

646 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

647 dÿ{

	)

648 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

649 
__˛ónup_f˘_©åibuã
;

653 
	#±hªad_˛ónup_p›
(
execuã
) \

655 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

656 i‡(
execuã
) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 } 0)

	)

659 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

660 
__˛ónup_f˘_©åibuã
;

662 #ifde‡
__USE_GNU


666 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

668 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

669 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

670 *
__ˇn˚l_¨g
 = (
¨g
); \

671 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) \

672 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

673 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

675 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

676 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

680 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

681 dÿ{

	)

682 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

683 
__˛ónup_f˘_©åibuã
;

688 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

690 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

691 i‡(
execuã
) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	}
} 0)

	)

694 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

695 
__˛ónup_f˘_©åibuã
;

699 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

701 #i‚de‡
SHARED


702 
	`__©åibuã__
 ((
__wók__
))

708 
__jmp_buf_èg
;

709 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

715 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

716 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

717 
__THROW
 
	`__n⁄nuŒ
 ((1));

720 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

721 
__THROW
 
	`__n⁄nuŒ
 ((1));

724 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

731 #ifde‡
__USE_XOPEN2K


733 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

734 
__c⁄°
 
time•ec
 *
__ª°ri˘


735 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

739 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

740 
__THROW
 
	`__n⁄nuŒ
 ((1));

743 #ifde‡
__USE_UNIX98


745 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

746 
__ª°ri˘
 
__muãx
,

747 *
__ª°ri˘
 
__¥io˚ûög
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

752 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

753 
__¥io˚ûög
,

754 *
__ª°ri˘
 
__ﬁd_˚ûög
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

759 #ifde‡
__USE_GNU


761 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

770 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

771 
__THROW
 
	`__n⁄nuŒ
 ((1));

774 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

775 
__THROW
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

779 
__ª°ri˘
 
__©å
,

780 *
__ª°ri˘
 
__psh¨ed
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

785 
__psh¨ed
)

786 
__THROW
 
	`__n⁄nuŒ
 ((1));

788 #ifde‡
__USE_UNIX98


790 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


791 
__©å
, *
__ª°ri˘
 
__köd
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

797 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

802 
__ª°ri˘
 
__©å
,

803 *
__ª°ri˘
 
__¥Ÿocﬁ
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

808 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

809 
__¥Ÿocﬁ
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥io˚ûög
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

819 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

820 
__¥io˚ûög
)

821 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #ifde‡
__USE_GNU


826 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

827 *
__robu°√ss
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__robu°√ss
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

837 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


842 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

843 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


844 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

858 #ifde‡
__USE_XOPEN2K


860 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

861 
__c⁄°
 
time•ec
 *
__ª°ri˘


862 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

867 
__THROW
 
	`__n⁄nuŒ
 ((1));

870 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

871 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 #ifde‡
__USE_XOPEN2K


875 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

876 
__c⁄°
 
time•ec
 *
__ª°ri˘


877 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

881 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

896 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

897 
__ª°ri˘
 
__©å
,

898 *
__ª°ri˘
 
__psh¨ed
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

902 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

903 
__psh¨ed
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

908 
__ª°ri˘
 
__©å
,

909 *
__ª°ri˘
 
__¥ef
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

914 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

923 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


924 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

928 
__THROW
 
	`__n⁄nuŒ
 ((1));

931 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

944 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

945 
	`__n⁄nuŒ
 ((1, 2));

954 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

955 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

956 
__c⁄°
 
time•ec
 *
__ª°ri˘


957 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

962 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

963 
__THROW
 
	`__n⁄nuŒ
 ((1));

966 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

971 
__ª°ri˘
 
__©å
,

972 *
__ª°ri˘
 
__psh¨ed
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

977 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 #ifde‡
__USE_XOPEN2K


981 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

982 
__ª°ri˘
 
__©å
,

983 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

984 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

987 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

988 
__˛ockid_t
 
__˛ock_id
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

993 #ifde‡
__USE_XOPEN2K


998 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1));

1002 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1));

1006 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1014 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1015 
__THROW
 
	`__n⁄nuŒ
 ((1));

1022 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1023 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1024 
__©å
, 
__cou¡
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1037 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1038 
__THROW
 
	`__n⁄nuŒ
 ((1));

1041 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1042 
__THROW
 
	`__n⁄nuŒ
 ((1));

1045 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1046 
__ª°ri˘
 
__©å
,

1047 *
__ª°ri˘
 
__psh¨ed
)

1048 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1051 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1052 
__psh¨ed
)

1053 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1066 (*
__de°r_fun˘i⁄
) (*))

1067 
__THROW
 
	`__n⁄nuŒ
 ((1));

1070 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1073 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1076 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1077 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1080 #ifde‡
__USE_XOPEN2K


1082 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1083 
__˛ockid_t
 *
__˛ock_id
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((2));

1099 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1100 (*
__∑ª¡
) (),

1101 (*
__chûd
Ë()Ë
__THROW
;

1104 #ifde‡
__USE_EXTERN_INLINES


1106 
__ölöe
 

1107 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1109  
__thªad1
 =
__thªad2
;

1110 
	}
}

1113 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

51 #i‚de‡
WEOF


52 
	#WEOF
 (0xffffffffu)

	)

55 #unde‡
__√ed_iswxxx


60 #i‚de‡
__iswxxx_deföed


61 
	#__iswxxx_deföed
 1

	)

63 
__BEGIN_NAMESPACE_C99


66 
	tw˘y≥_t
;

67 
__END_NAMESPACE_C99


69 #i‚de‡
_ISwbô


74 
	~<ídün.h
>

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

78 
	#_ISwbô
(
bô
) \

79 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

80 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

81 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

82 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

87 
__ISwuµî
 = 0,

88 
__ISwlowî
 = 1,

89 
__ISwÆpha
 = 2,

90 
__ISwdigô
 = 3,

91 
__ISwxdigô
 = 4,

92 
__ISw•a˚
 = 5,

93 
__ISw¥öt
 = 6,

94 
__ISwgøph
 = 7,

95 
__ISwbœnk
 = 8,

96 
__ISw˙ål
 = 9,

97 
__ISwpun˘
 = 10,

98 
__ISwÆnum
 = 11,

100 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

101 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

102 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

103 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

104 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

105 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

106 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

107 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

108 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

109 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

110 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

111 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

116 
__BEGIN_DECLS


118 
__BEGIN_NAMESPACE_C99


125 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

131 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

138 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

150 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

155 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

160 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

165 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

170 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

175 #ifde‡
__USE_ISOC99


176 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

185 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

189 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

190 
__END_NAMESPACE_C99


197 
__BEGIN_NAMESPACE_C99


200 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

201 
__END_NAMESPACE_C99


202 #ifde‡
__USE_GNU


203 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

206 
__BEGIN_NAMESPACE_C99


208 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

211 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
__END_NAMESPACE_C99


214 
__END_DECLS


221 #ifde‡
_WCTYPE_H


227 
__BEGIN_DECLS


229 
__BEGIN_NAMESPACE_C99


232 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

235 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

236 
__END_NAMESPACE_C99


238 #ifde‡
__USE_GNU


240 
	~<xloˇÀ.h
>

244 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

250 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

257 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

269 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

274 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

279 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

289 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

294 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

298 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

299 
__THROW
;

303 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

304 
__THROW
;

312 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

319 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

320 
__THROW
;

323 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

324 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

36 #ifde‡
__USE_MISC


38 
	#CSIGNAL
 0x000000f‡

	)

39 
	#CLONE_VM
 0x00000100

	)

40 
	#CLONE_FS
 0x00000200

	)

41 
	#CLONE_FILES
 0x00000400

	)

42 
	#CLONE_SIGHAND
 0x00000800

	)

43 
	#CLONE_PTRACE
 0x00002000

	)

44 
	#CLONE_VFORK
 0x00004000

	)

46 
	#CLONE_PARENT
 0x00008000

	)

48 
	#CLONE_THREAD
 0x00010000

	)

49 
	#CLONE_NEWNS
 0x00020000

	)

50 
	#CLONE_SYSVSEM
 0x00040000

	)

51 
	#CLONE_SETTLS
 0x00080000

	)

52 
	#CLONE_PARENT_SETTID
 0x00100000

	)

54 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

56 
	#CLONE_DETACHED
 0x00400000

	)

57 
	#CLONE_UNTRACED
 0x00800000

	)

59 
	#CLONE_CHILD_SETTID
 0x01000000

	)

61 
	#CLONE_STOPPED
 0x02000000

	)

65 
	ssched_∑øm


67 
	m__sched_¥i‹ôy
;

70 
	g__BEGIN_DECLS


72 #ifde‡
__USE_MISC


74 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

75 
__Êags
, *
__¨g
, ...Ë
__THROW
;

78 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

81 
__END_DECLS


85 #i‡!
deföed
 
__deföed_sched∑øm
 \

86 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

87 
	#__deföed_sched∑øm
 1

	)

89 
	s__sched_∑øm


91 
__sched_¥i‹ôy
;

93 #unde‡
__√ed_sched∑øm


97 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


98 
	#__˝u_£t_t_deföed


	)

100 
	#__CPU_SETSIZE
 1024

	)

101 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

104 
	t__˝u_mask
;

107 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

108 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

113 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

114 } 
	t˝u_£t_t
;

117 
	#__CPU_ZERO
(
˝u£ç
) \

119 
__i
; \

120 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

121 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

122 
__¨r
->
__bôs
[
__i
] = 0; \

123 
	}
} 0)

	)

124 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

125 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

126 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

127 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

128 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

129 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@
1
.
1
/usr/include
138
2817
bin/hello/hello.c
bin/ps/ps.c
bin/shell/shell.c
bin/world/world.c
crt/crt1.c
include/defs.h
include/elf.h
include/errors.h
include/io.h
include/stdarg.h
include/stdio.h
include/stdlib.h
include/sys/exec.h
include/sys/gdt.h
include/sys/idt.h
include/sys/irq.h
include/sys/isr.h
include/sys/kb.h
include/sys/kthread.h
include/sys/list.h
include/sys/mm/mmgr.h
include/sys/mm/regions.h
include/sys/mm/vm_mmgr.h
include/sys/mm/vmmgr_pde.h
include/sys/mm/vmmgr_pdpe.h
include/sys/mm/vmmgr_pml4.h
include/sys/mm/vmmgr_pte.h
include/sys/mm/vmmgr_virtual.h
include/sys/mmap.h
include/sys/shell.h
include/sys/tarfs.h
include/sys/task.h
include/sys/timer.h
include/syscall.h
include/syscalls.h
include/ustdlib.h
ld/ld.c
libc/cls.c
libc/exec.c
libc/exit.c
libc/fork.c
libc/getpid.c
libc/printf.c
libc/ps.c
libc/read.c
libc/sleep.c
libc/stdlib.c
libc/syscalls.s
libc/wait.c
sys/elf.c
sys/exec.c
sys/fork.c
sys/gdt.c
sys/gdt.s
sys/idt.c
sys/idt.s
sys/irq.c
sys/irq.s
sys/isr.c
sys/isr.s
sys/kb.c
sys/kthread.c
sys/kthread.s
sys/main.c
sys/mm/mmgr.c
sys/mm/myalloc.c
sys/mm/paging.c
sys/mm/paging.s
sys/mm/slob.c
sys/mm/vmmgr_page_allocator.c
sys/mm/vmmgr_pde.c
sys/mm/vmmgr_pdpe.c
sys/mm/vmmgr_pml4.c
sys/mm/vmmgr_pte.c
sys/mm/vmmgr_virtual.c
sys/mmap.c
sys/shell.c
sys/stdfns.c
sys/task_switch.s
sys/timer.c
/usr/include/elf.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/alloca.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/stdint.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/sys/ucontext.h
